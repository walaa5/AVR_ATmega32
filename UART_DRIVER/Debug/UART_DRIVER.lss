
UART_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000393c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004ec  00800060  0000393c  000039d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080054c  0080054c  00003ebc  2**0
                  ALLOC
  3 .stab         00002ef8  00000000  00000000  00003ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001035  00000000  00000000  00006db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008099  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000abcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b97c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000badc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bd69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c537  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 34       	cpi	r26, 0x4C	; 76
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	ac e4       	ldi	r26, 0x4C	; 76
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 36       	cpi	r26, 0x61	; 97
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 10 	call	0x20fa	; 0x20fa <main>
      8a:	0c 94 9c 1c 	jmp	0x3938	; 0x3938 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ed       	ldi	r26, 0xDB	; 219
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ed       	ldi	r24, 0xDB	; 219
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DCMOTOR_voidRotateClockWise>:
#include "DCMOTOR_INT.h"
#include "DIO_INT.h"


void DCMOTOR_voidRotateClockWise(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(MOTOR_PORT , MOTOR_PIN0 , LOW);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT , MOTOR_PIN1 , HIGH);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <DCMOTOR_voidRotateAntiClockWise>:

void DCMOTOR_voidRotateAntiClockWise(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(MOTOR_PORT , MOTOR_PIN1 , LOW);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT , MOTOR_PIN0 , HIGH);
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <DCMOTOR_voidStop>:
void DCMOTOR_voidStop(void)
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(MOTOR_PORT , MOTOR_PIN1 , LOW);
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT , MOTOR_PIN0 , LOW);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
}
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <DIO_SetPinValue>:
#include "LIBS\MATH.h"
#include "DIO_REG.h"
#include "DIO_INT.h"

void DIO_SetPinValue (u8 DIO_PORTID , u8 DIO_PINID , u8 DIO_PinValue)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	27 97       	sbiw	r28, 0x07	; 7
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	89 83       	std	Y+1, r24	; 0x01
     bc2:	6a 83       	std	Y+2, r22	; 0x02
     bc4:	4b 83       	std	Y+3, r20	; 0x03
	if (DIO_PinValue == HIGH)
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	09 f0       	breq	.+2      	; 0xbce <DIO_SetPinValue+0x22>
     bcc:	6f c0       	rjmp	.+222    	; 0xcac <DIO_SetPinValue+0x100>
	{
		switch(DIO_PORTID)
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	28 2f       	mov	r18, r24
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	3f 83       	std	Y+7, r19	; 0x07
     bd6:	2e 83       	std	Y+6, r18	; 0x06
     bd8:	8e 81       	ldd	r24, Y+6	; 0x06
     bda:	9f 81       	ldd	r25, Y+7	; 0x07
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	91 05       	cpc	r25, r1
     be0:	49 f1       	breq	.+82     	; 0xc34 <DIO_SetPinValue+0x88>
     be2:	2e 81       	ldd	r18, Y+6	; 0x06
     be4:	3f 81       	ldd	r19, Y+7	; 0x07
     be6:	22 30       	cpi	r18, 0x02	; 2
     be8:	31 05       	cpc	r19, r1
     bea:	2c f4       	brge	.+10     	; 0xbf6 <DIO_SetPinValue+0x4a>
     bec:	8e 81       	ldd	r24, Y+6	; 0x06
     bee:	9f 81       	ldd	r25, Y+7	; 0x07
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	61 f0       	breq	.+24     	; 0xc0c <DIO_SetPinValue+0x60>
     bf4:	d2 c0       	rjmp	.+420    	; 0xd9a <DIO_SetPinValue+0x1ee>
     bf6:	2e 81       	ldd	r18, Y+6	; 0x06
     bf8:	3f 81       	ldd	r19, Y+7	; 0x07
     bfa:	22 30       	cpi	r18, 0x02	; 2
     bfc:	31 05       	cpc	r19, r1
     bfe:	71 f1       	breq	.+92     	; 0xc5c <DIO_SetPinValue+0xb0>
     c00:	8e 81       	ldd	r24, Y+6	; 0x06
     c02:	9f 81       	ldd	r25, Y+7	; 0x07
     c04:	83 30       	cpi	r24, 0x03	; 3
     c06:	91 05       	cpc	r25, r1
     c08:	e9 f1       	breq	.+122    	; 0xc84 <DIO_SetPinValue+0xd8>
     c0a:	c7 c0       	rjmp	.+398    	; 0xd9a <DIO_SetPinValue+0x1ee>
		{
		case PORTA:
			set_bit(PORTA_REG , DIO_PINID);
     c0c:	ab e3       	ldi	r26, 0x3B	; 59
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	eb e3       	ldi	r30, 0x3B	; 59
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <DIO_SetPinValue+0x7e>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <DIO_SetPinValue+0x7a>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	b3 c0       	rjmp	.+358    	; 0xd9a <DIO_SetPinValue+0x1ee>
		break;

		case PORTB:
			set_bit(PORTB_REG , DIO_PINID) ;
     c34:	a8 e3       	ldi	r26, 0x38	; 56
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e8 e3       	ldi	r30, 0x38	; 56
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <DIO_SetPinValue+0xa6>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <DIO_SetPinValue+0xa2>
     c56:	84 2b       	or	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	9f c0       	rjmp	.+318    	; 0xd9a <DIO_SetPinValue+0x1ee>
		break;

		case PORTC:
			set_bit(PORTC_REG , DIO_PINID) ;
     c5c:	a5 e3       	ldi	r26, 0x35	; 53
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e5 e3       	ldi	r30, 0x35	; 53
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	48 2f       	mov	r20, r24
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	02 2e       	mov	r0, r18
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <DIO_SetPinValue+0xce>
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	0a 94       	dec	r0
     c7c:	e2 f7       	brpl	.-8      	; 0xc76 <DIO_SetPinValue+0xca>
     c7e:	84 2b       	or	r24, r20
     c80:	8c 93       	st	X, r24
     c82:	8b c0       	rjmp	.+278    	; 0xd9a <DIO_SetPinValue+0x1ee>
		break;

		case PORTD:
			set_bit(PORTD_REG , DIO_PINID) ;
     c84:	a2 e3       	ldi	r26, 0x32	; 50
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e2 e3       	ldi	r30, 0x32	; 50
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	48 2f       	mov	r20, r24
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	02 2e       	mov	r0, r18
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <DIO_SetPinValue+0xf6>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <DIO_SetPinValue+0xf2>
     ca6:	84 2b       	or	r24, r20
     ca8:	8c 93       	st	X, r24
     caa:	77 c0       	rjmp	.+238    	; 0xd9a <DIO_SetPinValue+0x1ee>

		}

	}

	else if (DIO_PinValue == LOW)
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	88 23       	and	r24, r24
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <DIO_SetPinValue+0x108>
     cb2:	73 c0       	rjmp	.+230    	; 0xd9a <DIO_SetPinValue+0x1ee>
	{
		switch(DIO_PORTID)
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	3d 83       	std	Y+5, r19	; 0x05
     cbc:	2c 83       	std	Y+4, r18	; 0x04
     cbe:	8c 81       	ldd	r24, Y+4	; 0x04
     cc0:	9d 81       	ldd	r25, Y+5	; 0x05
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	91 05       	cpc	r25, r1
     cc6:	59 f1       	breq	.+86     	; 0xd1e <DIO_SetPinValue+0x172>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	31 05       	cpc	r19, r1
     cd0:	2c f4       	brge	.+10     	; 0xcdc <DIO_SetPinValue+0x130>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	69 f0       	breq	.+26     	; 0xcf4 <DIO_SetPinValue+0x148>
     cda:	5f c0       	rjmp	.+190    	; 0xd9a <DIO_SetPinValue+0x1ee>
     cdc:	2c 81       	ldd	r18, Y+4	; 0x04
     cde:	3d 81       	ldd	r19, Y+5	; 0x05
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	89 f1       	breq	.+98     	; 0xd48 <DIO_SetPinValue+0x19c>
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	9d 81       	ldd	r25, Y+5	; 0x05
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	91 05       	cpc	r25, r1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <DIO_SetPinValue+0x146>
     cf0:	40 c0       	rjmp	.+128    	; 0xd72 <DIO_SetPinValue+0x1c6>
     cf2:	53 c0       	rjmp	.+166    	; 0xd9a <DIO_SetPinValue+0x1ee>
		{
		case PORTA:
			clr_bit(PORTA_REG , DIO_PINID) ;
     cf4:	ab e3       	ldi	r26, 0x3B	; 59
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	eb e3       	ldi	r30, 0x3B	; 59
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <DIO_SetPinValue+0x166>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <DIO_SetPinValue+0x162>
     d16:	80 95       	com	r24
     d18:	84 23       	and	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	3e c0       	rjmp	.+124    	; 0xd9a <DIO_SetPinValue+0x1ee>
		break;

		case PORTB:
			clr_bit(PORTB_REG , DIO_PINID) ;
     d1e:	a8 e3       	ldi	r26, 0x38	; 56
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e8 e3       	ldi	r30, 0x38	; 56
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_SetPinValue+0x190>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_SetPinValue+0x18c>
     d40:	80 95       	com	r24
     d42:	84 23       	and	r24, r20
     d44:	8c 93       	st	X, r24
     d46:	29 c0       	rjmp	.+82     	; 0xd9a <DIO_SetPinValue+0x1ee>
		break;

		case PORTC:
			clr_bit(PORTC_REG , DIO_PINID) ;
     d48:	a5 e3       	ldi	r26, 0x35	; 53
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e5 e3       	ldi	r30, 0x35	; 53
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	48 2f       	mov	r20, r24
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 2e       	mov	r0, r18
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <DIO_SetPinValue+0x1ba>
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	0a 94       	dec	r0
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <DIO_SetPinValue+0x1b6>
     d6a:	80 95       	com	r24
     d6c:	84 23       	and	r24, r20
     d6e:	8c 93       	st	X, r24
     d70:	14 c0       	rjmp	.+40     	; 0xd9a <DIO_SetPinValue+0x1ee>
		break;

		case PORTD:
			clr_bit(PORTD_REG , DIO_PINID) ;
     d72:	a2 e3       	ldi	r26, 0x32	; 50
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e2 e3       	ldi	r30, 0x32	; 50
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_SetPinValue+0x1e4>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_SetPinValue+0x1e0>
     d94:	80 95       	com	r24
     d96:	84 23       	and	r24, r20
     d98:	8c 93       	st	X, r24
		break;

			}

		}
}
     d9a:	27 96       	adiw	r28, 0x07	; 7
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 DIO_DDRID , u8 DIO_PINID, u8 DIO_PINIO)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	27 97       	sbiw	r28, 0x07	; 7
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	89 83       	std	Y+1, r24	; 0x01
     dc2:	6a 83       	std	Y+2, r22	; 0x02
     dc4:	4b 83       	std	Y+3, r20	; 0x03
	if (DIO_PINIO == OUTPUT)
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	09 f0       	breq	.+2      	; 0xdce <DIO_SetPinDirection+0x22>
     dcc:	6f c0       	rjmp	.+222    	; 0xeac <DIO_SetPinDirection+0x100>
	{
		switch(DIO_DDRID)
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	3f 83       	std	Y+7, r19	; 0x07
     dd6:	2e 83       	std	Y+6, r18	; 0x06
     dd8:	8e 81       	ldd	r24, Y+6	; 0x06
     dda:	9f 81       	ldd	r25, Y+7	; 0x07
     ddc:	85 30       	cpi	r24, 0x05	; 5
     dde:	91 05       	cpc	r25, r1
     de0:	51 f1       	breq	.+84     	; 0xe36 <DIO_SetPinDirection+0x8a>
     de2:	2e 81       	ldd	r18, Y+6	; 0x06
     de4:	3f 81       	ldd	r19, Y+7	; 0x07
     de6:	26 30       	cpi	r18, 0x06	; 6
     de8:	31 05       	cpc	r19, r1
     dea:	34 f4       	brge	.+12     	; 0xdf8 <DIO_SetPinDirection+0x4c>
     dec:	8e 81       	ldd	r24, Y+6	; 0x06
     dee:	9f 81       	ldd	r25, Y+7	; 0x07
     df0:	84 30       	cpi	r24, 0x04	; 4
     df2:	91 05       	cpc	r25, r1
     df4:	61 f0       	breq	.+24     	; 0xe0e <DIO_SetPinDirection+0x62>
     df6:	5a c0       	rjmp	.+180    	; 0xeac <DIO_SetPinDirection+0x100>
     df8:	2e 81       	ldd	r18, Y+6	; 0x06
     dfa:	3f 81       	ldd	r19, Y+7	; 0x07
     dfc:	26 30       	cpi	r18, 0x06	; 6
     dfe:	31 05       	cpc	r19, r1
     e00:	71 f1       	breq	.+92     	; 0xe5e <DIO_SetPinDirection+0xb2>
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	9f 81       	ldd	r25, Y+7	; 0x07
     e06:	87 30       	cpi	r24, 0x07	; 7
     e08:	91 05       	cpc	r25, r1
     e0a:	e9 f1       	breq	.+122    	; 0xe86 <DIO_SetPinDirection+0xda>
     e0c:	4f c0       	rjmp	.+158    	; 0xeac <DIO_SetPinDirection+0x100>
		{
		case DDRA:
			set_bit(DDRA_REG , DIO_PINID);
     e0e:	aa e3       	ldi	r26, 0x3A	; 58
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ea e3       	ldi	r30, 0x3A	; 58
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_SetPinDirection+0x80>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_SetPinDirection+0x7c>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	3b c0       	rjmp	.+118    	; 0xeac <DIO_SetPinDirection+0x100>
		break;

		case DDRB:
			set_bit(DDRB_REG , DIO_PINID) ;
     e36:	a7 e3       	ldi	r26, 0x37	; 55
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e3       	ldi	r30, 0x37	; 55
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_SetPinDirection+0xa8>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_SetPinDirection+0xa4>
     e58:	84 2b       	or	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	27 c0       	rjmp	.+78     	; 0xeac <DIO_SetPinDirection+0x100>
		break;

		case DDRC:
			set_bit(DDRC_REG , DIO_PINID) ;
     e5e:	a4 e3       	ldi	r26, 0x34	; 52
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e4 e3       	ldi	r30, 0x34	; 52
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_SetPinDirection+0xd0>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_SetPinDirection+0xcc>
     e80:	84 2b       	or	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	13 c0       	rjmp	.+38     	; 0xeac <DIO_SetPinDirection+0x100>
		break;

		case DDRD:
			set_bit(DDRD_REG , DIO_PINID) ;
     e86:	a1 e3       	ldi	r26, 0x31	; 49
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e1 e3       	ldi	r30, 0x31	; 49
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_SetPinDirection+0xf8>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_SetPinDirection+0xf4>
     ea8:	84 2b       	or	r24, r20
     eaa:	8c 93       	st	X, r24

		}

	}

	if (DIO_PINIO == INPUT)
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	88 23       	and	r24, r24
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <DIO_SetPinDirection+0x108>
     eb2:	74 c0       	rjmp	.+232    	; 0xf9c <DIO_SetPinDirection+0x1f0>
	{
		switch(DIO_DDRID)
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	3d 83       	std	Y+5, r19	; 0x05
     ebc:	2c 83       	std	Y+4, r18	; 0x04
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	9d 81       	ldd	r25, Y+5	; 0x05
     ec2:	85 30       	cpi	r24, 0x05	; 5
     ec4:	91 05       	cpc	r25, r1
     ec6:	61 f1       	breq	.+88     	; 0xf20 <DIO_SetPinDirection+0x174>
     ec8:	2c 81       	ldd	r18, Y+4	; 0x04
     eca:	3d 81       	ldd	r19, Y+5	; 0x05
     ecc:	26 30       	cpi	r18, 0x06	; 6
     ece:	31 05       	cpc	r19, r1
     ed0:	34 f4       	brge	.+12     	; 0xede <DIO_SetPinDirection+0x132>
     ed2:	8c 81       	ldd	r24, Y+4	; 0x04
     ed4:	9d 81       	ldd	r25, Y+5	; 0x05
     ed6:	84 30       	cpi	r24, 0x04	; 4
     ed8:	91 05       	cpc	r25, r1
     eda:	69 f0       	breq	.+26     	; 0xef6 <DIO_SetPinDirection+0x14a>
     edc:	5f c0       	rjmp	.+190    	; 0xf9c <DIO_SetPinDirection+0x1f0>
     ede:	2c 81       	ldd	r18, Y+4	; 0x04
     ee0:	3d 81       	ldd	r19, Y+5	; 0x05
     ee2:	26 30       	cpi	r18, 0x06	; 6
     ee4:	31 05       	cpc	r19, r1
     ee6:	89 f1       	breq	.+98     	; 0xf4a <DIO_SetPinDirection+0x19e>
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	9d 81       	ldd	r25, Y+5	; 0x05
     eec:	87 30       	cpi	r24, 0x07	; 7
     eee:	91 05       	cpc	r25, r1
     ef0:	09 f4       	brne	.+2      	; 0xef4 <DIO_SetPinDirection+0x148>
     ef2:	40 c0       	rjmp	.+128    	; 0xf74 <DIO_SetPinDirection+0x1c8>
     ef4:	53 c0       	rjmp	.+166    	; 0xf9c <DIO_SetPinDirection+0x1f0>
		{
			case DDRA:
				clr_bit(DDRA_REG , DIO_PINID);
     ef6:	aa e3       	ldi	r26, 0x3A	; 58
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ea e3       	ldi	r30, 0x3A	; 58
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_SetPinDirection+0x168>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_SetPinDirection+0x164>
     f18:	80 95       	com	r24
     f1a:	84 23       	and	r24, r20
     f1c:	8c 93       	st	X, r24
     f1e:	3e c0       	rjmp	.+124    	; 0xf9c <DIO_SetPinDirection+0x1f0>
			break;

			case DDRB:
				clr_bit(DDRB_REG , DIO_PINID) ;
     f20:	a7 e3       	ldi	r26, 0x37	; 55
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e7 e3       	ldi	r30, 0x37	; 55
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <DIO_SetPinDirection+0x192>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <DIO_SetPinDirection+0x18e>
     f42:	80 95       	com	r24
     f44:	84 23       	and	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	29 c0       	rjmp	.+82     	; 0xf9c <DIO_SetPinDirection+0x1f0>
			break;

			case DDRC:
				clr_bit(DDRC_REG , DIO_PINID) ;
     f4a:	a4 e3       	ldi	r26, 0x34	; 52
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e4 e3       	ldi	r30, 0x34	; 52
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_SetPinDirection+0x1bc>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_SetPinDirection+0x1b8>
     f6c:	80 95       	com	r24
     f6e:	84 23       	and	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	14 c0       	rjmp	.+40     	; 0xf9c <DIO_SetPinDirection+0x1f0>
			break;

			case DDRD:
				clr_bit(DDRD_REG , DIO_PINID) ;
     f74:	a1 e3       	ldi	r26, 0x31	; 49
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e1 e3       	ldi	r30, 0x31	; 49
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_SetPinDirection+0x1e6>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_SetPinDirection+0x1e2>
     f96:	80 95       	com	r24
     f98:	84 23       	and	r24, r20
     f9a:	8c 93       	st	X, r24
			break;

		}

	}
}
     f9c:	27 96       	adiw	r28, 0x07	; 7
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <DIO_GetPinValue>:

u8 DIO_GetPinValue (u8 DIO_PIN , u8 DIO_PINID)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <DIO_GetPinValue+0x6>
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <DIO_GetPinValue+0x8>
     fb6:	0f 92       	push	r0
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	8a 83       	std	Y+2, r24	; 0x02
     fbe:	6b 83       	std	Y+3, r22	; 0x03
	u8 value_read ;

	switch(DIO_PIN)
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	3d 83       	std	Y+5, r19	; 0x05
     fc8:	2c 83       	std	Y+4, r18	; 0x04
     fca:	4c 81       	ldd	r20, Y+4	; 0x04
     fcc:	5d 81       	ldd	r21, Y+5	; 0x05
     fce:	41 30       	cpi	r20, 0x01	; 1
     fd0:	51 05       	cpc	r21, r1
     fd2:	41 f1       	breq	.+80     	; 0x1024 <DIO_GetPinValue+0x76>
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	82 30       	cpi	r24, 0x02	; 2
     fda:	91 05       	cpc	r25, r1
     fdc:	34 f4       	brge	.+12     	; 0xfea <DIO_GetPinValue+0x3c>
     fde:	2c 81       	ldd	r18, Y+4	; 0x04
     fe0:	3d 81       	ldd	r19, Y+5	; 0x05
     fe2:	21 15       	cp	r18, r1
     fe4:	31 05       	cpc	r19, r1
     fe6:	61 f0       	breq	.+24     	; 0x1000 <DIO_GetPinValue+0x52>
     fe8:	52 c0       	rjmp	.+164    	; 0x108e <DIO_GetPinValue+0xe0>
     fea:	4c 81       	ldd	r20, Y+4	; 0x04
     fec:	5d 81       	ldd	r21, Y+5	; 0x05
     fee:	42 30       	cpi	r20, 0x02	; 2
     ff0:	51 05       	cpc	r21, r1
     ff2:	51 f1       	breq	.+84     	; 0x1048 <DIO_GetPinValue+0x9a>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	91 05       	cpc	r25, r1
     ffc:	b9 f1       	breq	.+110    	; 0x106c <DIO_GetPinValue+0xbe>
     ffe:	47 c0       	rjmp	.+142    	; 0x108e <DIO_GetPinValue+0xe0>
	{

	case PINA :
		value_read = read_bit(PINA_REG , DIO_PINID);
    1000:	e9 e3       	ldi	r30, 0x39	; 57
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	a9 01       	movw	r20, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_GetPinValue+0x6a>
    1014:	55 95       	asr	r21
    1016:	47 95       	ror	r20
    1018:	8a 95       	dec	r24
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_GetPinValue+0x66>
    101c:	ca 01       	movw	r24, r20
    101e:	81 70       	andi	r24, 0x01	; 1
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	35 c0       	rjmp	.+106    	; 0x108e <DIO_GetPinValue+0xe0>
	break;

	case PINB :
	value_read = read_bit(PINB_REG , DIO_PINID) ;
    1024:	e6 e3       	ldi	r30, 0x36	; 54
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a9 01       	movw	r20, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_GetPinValue+0x8e>
    1038:	55 95       	asr	r21
    103a:	47 95       	ror	r20
    103c:	8a 95       	dec	r24
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_GetPinValue+0x8a>
    1040:	ca 01       	movw	r24, r20
    1042:	81 70       	andi	r24, 0x01	; 1
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	23 c0       	rjmp	.+70     	; 0x108e <DIO_GetPinValue+0xe0>

	break;

	case PINC:
	value_read = read_bit(PINC_REG , DIO_PINID) ;
    1048:	e3 e3       	ldi	r30, 0x33	; 51
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	a9 01       	movw	r20, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_GetPinValue+0xb2>
    105c:	55 95       	asr	r21
    105e:	47 95       	ror	r20
    1060:	8a 95       	dec	r24
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_GetPinValue+0xae>
    1064:	ca 01       	movw	r24, r20
    1066:	81 70       	andi	r24, 0x01	; 1
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	11 c0       	rjmp	.+34     	; 0x108e <DIO_GetPinValue+0xe0>
	break;

	case PIND:
	value_read = read_bit(PIND_REG ,DIO_PINID) ;
    106c:	e0 e3       	ldi	r30, 0x30	; 48
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	a9 01       	movw	r20, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_GetPinValue+0xd6>
    1080:	55 95       	asr	r21
    1082:	47 95       	ror	r20
    1084:	8a 95       	dec	r24
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_GetPinValue+0xd2>
    1088:	ca 01       	movw	r24, r20
    108a:	81 70       	andi	r24, 0x01	; 1
    108c:	89 83       	std	Y+1, r24	; 0x01
	break;

	}

	return value_read ;
    108e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 DIO_DDRID , u8 DIO_PortValue)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <DIO_SetPortDirection+0x6>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <DIO_SetPortDirection+0x8>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <DIO_SetPortDirection+0xa>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	89 83       	std	Y+1, r24	; 0x01
    10b0:	6a 83       	std	Y+2, r22	; 0x02

		switch(DIO_DDRID)
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	3e 83       	std	Y+6, r19	; 0x06
    10ba:	2d 83       	std	Y+5, r18	; 0x05
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	9e 81       	ldd	r25, Y+6	; 0x06
    10c0:	85 30       	cpi	r24, 0x05	; 5
    10c2:	91 05       	cpc	r25, r1
    10c4:	d9 f0       	breq	.+54     	; 0x10fc <DIO_SetPortDirection+0x5c>
    10c6:	2d 81       	ldd	r18, Y+5	; 0x05
    10c8:	3e 81       	ldd	r19, Y+6	; 0x06
    10ca:	26 30       	cpi	r18, 0x06	; 6
    10cc:	31 05       	cpc	r19, r1
    10ce:	34 f4       	brge	.+12     	; 0x10dc <DIO_SetPortDirection+0x3c>
    10d0:	8d 81       	ldd	r24, Y+5	; 0x05
    10d2:	9e 81       	ldd	r25, Y+6	; 0x06
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	91 05       	cpc	r25, r1
    10d8:	61 f0       	breq	.+24     	; 0x10f2 <DIO_SetPortDirection+0x52>
    10da:	1e c0       	rjmp	.+60     	; 0x1118 <DIO_SetPortDirection+0x78>
    10dc:	2d 81       	ldd	r18, Y+5	; 0x05
    10de:	3e 81       	ldd	r19, Y+6	; 0x06
    10e0:	26 30       	cpi	r18, 0x06	; 6
    10e2:	31 05       	cpc	r19, r1
    10e4:	81 f0       	breq	.+32     	; 0x1106 <DIO_SetPortDirection+0x66>
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	87 30       	cpi	r24, 0x07	; 7
    10ec:	91 05       	cpc	r25, r1
    10ee:	81 f0       	breq	.+32     	; 0x1110 <DIO_SetPortDirection+0x70>
    10f0:	13 c0       	rjmp	.+38     	; 0x1118 <DIO_SetPortDirection+0x78>
		{
		case DDRA:
			DDRA_REG = DIO_PortValue ;
    10f2:	ea e3       	ldi	r30, 0x3A	; 58
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	80 83       	st	Z, r24
    10fa:	0e c0       	rjmp	.+28     	; 0x1118 <DIO_SetPortDirection+0x78>
		break ;

		case DDRB:
			DDRB_REG = DIO_PortValue ;
    10fc:	e7 e3       	ldi	r30, 0x37	; 55
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	80 83       	st	Z, r24
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <DIO_SetPortDirection+0x78>
		break ;

		case DDRC:
			DDRC_REG = DIO_PortValue ;
    1106:	e4 e3       	ldi	r30, 0x34	; 52
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	80 83       	st	Z, r24
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <DIO_SetPortDirection+0x78>
		break ;

		case DDRD:
			DDRD_REG = DIO_PortValue ;
    1110:	e1 e3       	ldi	r30, 0x31	; 49
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	80 83       	st	Z, r24
		break ;

		}

		switch(DIO_DDRID)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	3c 83       	std	Y+4, r19	; 0x04
    1120:	2b 83       	std	Y+3, r18	; 0x03
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	85 30       	cpi	r24, 0x05	; 5
    1128:	91 05       	cpc	r25, r1
    112a:	d9 f0       	breq	.+54     	; 0x1162 <DIO_SetPortDirection+0xc2>
    112c:	2b 81       	ldd	r18, Y+3	; 0x03
    112e:	3c 81       	ldd	r19, Y+4	; 0x04
    1130:	26 30       	cpi	r18, 0x06	; 6
    1132:	31 05       	cpc	r19, r1
    1134:	34 f4       	brge	.+12     	; 0x1142 <DIO_SetPortDirection+0xa2>
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	91 05       	cpc	r25, r1
    113e:	61 f0       	breq	.+24     	; 0x1158 <DIO_SetPortDirection+0xb8>
    1140:	1e c0       	rjmp	.+60     	; 0x117e <DIO_SetPortDirection+0xde>
    1142:	2b 81       	ldd	r18, Y+3	; 0x03
    1144:	3c 81       	ldd	r19, Y+4	; 0x04
    1146:	26 30       	cpi	r18, 0x06	; 6
    1148:	31 05       	cpc	r19, r1
    114a:	81 f0       	breq	.+32     	; 0x116c <DIO_SetPortDirection+0xcc>
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	9c 81       	ldd	r25, Y+4	; 0x04
    1150:	87 30       	cpi	r24, 0x07	; 7
    1152:	91 05       	cpc	r25, r1
    1154:	81 f0       	breq	.+32     	; 0x1176 <DIO_SetPortDirection+0xd6>
    1156:	13 c0       	rjmp	.+38     	; 0x117e <DIO_SetPortDirection+0xde>
		{
		case DDRA:
			DDRA_REG =DIO_PortValue ;
    1158:	ea e3       	ldi	r30, 0x3A	; 58
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	80 83       	st	Z, r24
    1160:	0e c0       	rjmp	.+28     	; 0x117e <DIO_SetPortDirection+0xde>
		break ;

		case DDRB:
			DDRB_REG = DIO_PortValue ;
    1162:	e7 e3       	ldi	r30, 0x37	; 55
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	80 83       	st	Z, r24
    116a:	09 c0       	rjmp	.+18     	; 0x117e <DIO_SetPortDirection+0xde>
		break ;

		case DDRC:
			DDRC_REG = DIO_PortValue ;
    116c:	e4 e3       	ldi	r30, 0x34	; 52
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	80 83       	st	Z, r24
    1174:	04 c0       	rjmp	.+8      	; 0x117e <DIO_SetPortDirection+0xde>
		break ;

		case DDRD:
			DDRD_REG = DIO_PortValue ;
    1176:	e1 e3       	ldi	r30, 0x31	; 49
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	80 83       	st	Z, r24
		break ;
	   }
}
    117e:	26 96       	adiw	r28, 0x06	; 6
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <DIO_SetPortValue>:

void DIO_SetPortValue(u8 DIO_PORTID , u8 DIO_PortValue)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <DIO_SetPortValue+0x6>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <DIO_SetPortValue+0x8>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	6a 83       	std	Y+2, r22	; 0x02

		switch(DIO_PORTID)
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3c 83       	std	Y+4, r19	; 0x04
    11a8:	2b 83       	std	Y+3, r18	; 0x03
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	d1 f0       	breq	.+52     	; 0x11e8 <DIO_SetPortValue+0x58>
    11b4:	2b 81       	ldd	r18, Y+3	; 0x03
    11b6:	3c 81       	ldd	r19, Y+4	; 0x04
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <DIO_SetPortValue+0x38>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	61 f0       	breq	.+24     	; 0x11de <DIO_SetPortValue+0x4e>
    11c6:	1e c0       	rjmp	.+60     	; 0x1204 <DIO_SetPortValue+0x74>
    11c8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ca:	3c 81       	ldd	r19, Y+4	; 0x04
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	81 f0       	breq	.+32     	; 0x11f2 <DIO_SetPortValue+0x62>
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	91 05       	cpc	r25, r1
    11da:	81 f0       	breq	.+32     	; 0x11fc <DIO_SetPortValue+0x6c>
    11dc:	13 c0       	rjmp	.+38     	; 0x1204 <DIO_SetPortValue+0x74>
		{

		case PORTA:
			PORTA_REG = DIO_PortValue ;
    11de:	eb e3       	ldi	r30, 0x3B	; 59
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
    11e6:	0e c0       	rjmp	.+28     	; 0x1204 <DIO_SetPortValue+0x74>
		break ;

		case PORTB:
			PORTB_REG = DIO_PortValue ;
    11e8:	e8 e3       	ldi	r30, 0x38	; 56
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	80 83       	st	Z, r24
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <DIO_SetPortValue+0x74>
		break ;

		case PORTC:
			PORTC_REG = DIO_PortValue ;
    11f2:	e5 e3       	ldi	r30, 0x35	; 53
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	80 83       	st	Z, r24
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <DIO_SetPortValue+0x74>
		break ;

		case PORTD:
			PORTD_REG = DIO_PortValue ;
    11fc:	e2 e3       	ldi	r30, 0x32	; 50
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	80 83       	st	Z, r24
		break ;

		}

}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <LCD_voidInit>:
#include <avr\delay.h>


// initialization function : use it in the beginning of any lcd program
void LCD_voidInit(void)
{
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	c6 54       	subi	r28, 0x46	; 70
    1220:	d0 40       	sbci	r29, 0x00	; 0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	fe 01       	movw	r30, r28
    122e:	ed 5b       	subi	r30, 0xBD	; 189
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a0 e2       	ldi	r26, 0x20	; 32
    1238:	b2 e4       	ldi	r27, 0x42	; 66
    123a:	80 83       	st	Z, r24
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	a2 83       	std	Z+2, r26	; 0x02
    1240:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1242:	8e 01       	movw	r16, r28
    1244:	01 5c       	subi	r16, 0xC1	; 193
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	fe 01       	movw	r30, r28
    124a:	ed 5b       	subi	r30, 0xBD	; 189
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	60 81       	ld	r22, Z
    1250:	71 81       	ldd	r23, Z+1	; 0x01
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	93 81       	ldd	r25, Z+3	; 0x03
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	4a ef       	ldi	r20, 0xFA	; 250
    125c:	54 e4       	ldi	r21, 0x44	; 68
    125e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	f8 01       	movw	r30, r16
    1268:	80 83       	st	Z, r24
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	a2 83       	std	Z+2, r26	; 0x02
    126e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1270:	fe 01       	movw	r30, r28
    1272:	ff 96       	adiw	r30, 0x3f	; 63
    1274:	60 81       	ld	r22, Z
    1276:	71 81       	ldd	r23, Z+1	; 0x01
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e8       	ldi	r20, 0x80	; 128
    1282:	5f e3       	ldi	r21, 0x3F	; 63
    1284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1288:	88 23       	and	r24, r24
    128a:	2c f4       	brge	.+10     	; 0x1296 <LCD_voidInit+0x84>
		__ticks = 1;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	9e af       	std	Y+62, r25	; 0x3e
    1292:	8d af       	std	Y+61, r24	; 0x3d
    1294:	46 c0       	rjmp	.+140    	; 0x1322 <LCD_voidInit+0x110>
	else if (__tmp > 65535)
    1296:	fe 01       	movw	r30, r28
    1298:	ff 96       	adiw	r30, 0x3f	; 63
    129a:	60 81       	ld	r22, Z
    129c:	71 81       	ldd	r23, Z+1	; 0x01
    129e:	82 81       	ldd	r24, Z+2	; 0x02
    12a0:	93 81       	ldd	r25, Z+3	; 0x03
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	3f ef       	ldi	r19, 0xFF	; 255
    12a6:	4f e7       	ldi	r20, 0x7F	; 127
    12a8:	57 e4       	ldi	r21, 0x47	; 71
    12aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ae:	18 16       	cp	r1, r24
    12b0:	64 f5       	brge	.+88     	; 0x130a <LCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b2:	fe 01       	movw	r30, r28
    12b4:	ed 5b       	subi	r30, 0xBD	; 189
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	60 81       	ld	r22, Z
    12ba:	71 81       	ldd	r23, Z+1	; 0x01
    12bc:	82 81       	ldd	r24, Z+2	; 0x02
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e2       	ldi	r20, 0x20	; 32
    12c6:	51 e4       	ldi	r21, 0x41	; 65
    12c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	bc 01       	movw	r22, r24
    12d2:	cd 01       	movw	r24, r26
    12d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9e af       	std	Y+62, r25	; 0x3e
    12de:	8d af       	std	Y+61, r24	; 0x3d
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <LCD_voidInit+0xee>
    12e2:	88 ec       	ldi	r24, 0xC8	; 200
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	9c af       	std	Y+60, r25	; 0x3c
    12e8:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    12ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <LCD_voidInit+0xdc>
    12f2:	9c af       	std	Y+60, r25	; 0x3c
    12f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    12f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	9e af       	std	Y+62, r25	; 0x3e
    12fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1300:	8d ad       	ldd	r24, Y+61	; 0x3d
    1302:	9e ad       	ldd	r25, Y+62	; 0x3e
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	69 f7       	brne	.-38     	; 0x12e2 <LCD_voidInit+0xd0>
    1308:	16 c0       	rjmp	.+44     	; 0x1336 <LCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130a:	fe 01       	movw	r30, r28
    130c:	ff 96       	adiw	r30, 0x3f	; 63
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	93 81       	ldd	r25, Z+3	; 0x03
    1316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9e af       	std	Y+62, r25	; 0x3e
    1320:	8d af       	std	Y+61, r24	; 0x3d
    1322:	8d ad       	ldd	r24, Y+61	; 0x3d
    1324:	9e ad       	ldd	r25, Y+62	; 0x3e
    1326:	9a af       	std	Y+58, r25	; 0x3a
    1328:	89 af       	std	Y+57, r24	; 0x39
    132a:	89 ad       	ldd	r24, Y+57	; 0x39
    132c:	9a ad       	ldd	r25, Y+58	; 0x3a
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <LCD_voidInit+0x11c>
    1332:	9a af       	std	Y+58, r25	; 0x3a
    1334:	89 af       	std	Y+57, r24	; 0x39
	// wait for more than 30 ms
	_delay_ms(40);

	// function set command (8bit mode -- 2 lines -- 5*7)
	LCD_voidSendCommand (0b00111000);
    1336:	88 e3       	ldi	r24, 0x38	; 56
    1338:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a0 e8       	ldi	r26, 0x80	; 128
    1342:	bf e3       	ldi	r27, 0x3F	; 63
    1344:	8d ab       	std	Y+53, r24	; 0x35
    1346:	9e ab       	std	Y+54, r25	; 0x36
    1348:	af ab       	std	Y+55, r26	; 0x37
    134a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134c:	6d a9       	ldd	r22, Y+53	; 0x35
    134e:	7e a9       	ldd	r23, Y+54	; 0x36
    1350:	8f a9       	ldd	r24, Y+55	; 0x37
    1352:	98 ad       	ldd	r25, Y+56	; 0x38
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	4a ef       	ldi	r20, 0xFA	; 250
    135a:	54 e4       	ldi	r21, 0x44	; 68
    135c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	89 ab       	std	Y+49, r24	; 0x31
    1366:	9a ab       	std	Y+50, r25	; 0x32
    1368:	ab ab       	std	Y+51, r26	; 0x33
    136a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    136c:	69 a9       	ldd	r22, Y+49	; 0x31
    136e:	7a a9       	ldd	r23, Y+50	; 0x32
    1370:	8b a9       	ldd	r24, Y+51	; 0x33
    1372:	9c a9       	ldd	r25, Y+52	; 0x34
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e8       	ldi	r20, 0x80	; 128
    137a:	5f e3       	ldi	r21, 0x3F	; 63
    137c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1380:	88 23       	and	r24, r24
    1382:	2c f4       	brge	.+10     	; 0x138e <LCD_voidInit+0x17c>
		__ticks = 1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	98 ab       	std	Y+48, r25	; 0x30
    138a:	8f a7       	std	Y+47, r24	; 0x2f
    138c:	3f c0       	rjmp	.+126    	; 0x140c <LCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    138e:	69 a9       	ldd	r22, Y+49	; 0x31
    1390:	7a a9       	ldd	r23, Y+50	; 0x32
    1392:	8b a9       	ldd	r24, Y+51	; 0x33
    1394:	9c a9       	ldd	r25, Y+52	; 0x34
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	3f ef       	ldi	r19, 0xFF	; 255
    139a:	4f e7       	ldi	r20, 0x7F	; 127
    139c:	57 e4       	ldi	r21, 0x47	; 71
    139e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a2:	18 16       	cp	r1, r24
    13a4:	4c f5       	brge	.+82     	; 0x13f8 <LCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a6:	6d a9       	ldd	r22, Y+53	; 0x35
    13a8:	7e a9       	ldd	r23, Y+54	; 0x36
    13aa:	8f a9       	ldd	r24, Y+55	; 0x37
    13ac:	98 ad       	ldd	r25, Y+56	; 0x38
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e2       	ldi	r20, 0x20	; 32
    13b4:	51 e4       	ldi	r21, 0x41	; 65
    13b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	98 ab       	std	Y+48, r25	; 0x30
    13cc:	8f a7       	std	Y+47, r24	; 0x2f
    13ce:	0f c0       	rjmp	.+30     	; 0x13ee <LCD_voidInit+0x1dc>
    13d0:	88 ec       	ldi	r24, 0xC8	; 200
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	9e a7       	std	Y+46, r25	; 0x2e
    13d6:	8d a7       	std	Y+45, r24	; 0x2d
    13d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    13da:	9e a5       	ldd	r25, Y+46	; 0x2e
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <LCD_voidInit+0x1ca>
    13e0:	9e a7       	std	Y+46, r25	; 0x2e
    13e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e6:	98 a9       	ldd	r25, Y+48	; 0x30
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	98 ab       	std	Y+48, r25	; 0x30
    13ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f0:	98 a9       	ldd	r25, Y+48	; 0x30
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	69 f7       	brne	.-38     	; 0x13d0 <LCD_voidInit+0x1be>
    13f6:	14 c0       	rjmp	.+40     	; 0x1420 <LCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f8:	69 a9       	ldd	r22, Y+49	; 0x31
    13fa:	7a a9       	ldd	r23, Y+50	; 0x32
    13fc:	8b a9       	ldd	r24, Y+51	; 0x33
    13fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	98 ab       	std	Y+48, r25	; 0x30
    140a:	8f a7       	std	Y+47, r24	; 0x2f
    140c:	8f a5       	ldd	r24, Y+47	; 0x2f
    140e:	98 a9       	ldd	r25, Y+48	; 0x30
    1410:	9c a7       	std	Y+44, r25	; 0x2c
    1412:	8b a7       	std	Y+43, r24	; 0x2b
    1414:	8b a5       	ldd	r24, Y+43	; 0x2b
    1416:	9c a5       	ldd	r25, Y+44	; 0x2c
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <LCD_voidInit+0x206>
    141c:	9c a7       	std	Y+44, r25	; 0x2c
    141e:	8b a7       	std	Y+43, r24	; 0x2b

	//wait for more than 39 us
	_delay_ms(1);

	//display on/off control command (cursor on/off -- cursor blink/not blink)
	LCD_voidSendCommand (0x0c);
    1420:	8c e0       	ldi	r24, 0x0C	; 12
    1422:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a0 e8       	ldi	r26, 0x80	; 128
    142c:	bf e3       	ldi	r27, 0x3F	; 63
    142e:	8f a3       	std	Y+39, r24	; 0x27
    1430:	98 a7       	std	Y+40, r25	; 0x28
    1432:	a9 a7       	std	Y+41, r26	; 0x29
    1434:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1436:	6f a1       	ldd	r22, Y+39	; 0x27
    1438:	78 a5       	ldd	r23, Y+40	; 0x28
    143a:	89 a5       	ldd	r24, Y+41	; 0x29
    143c:	9a a5       	ldd	r25, Y+42	; 0x2a
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	4a ef       	ldi	r20, 0xFA	; 250
    1444:	54 e4       	ldi	r21, 0x44	; 68
    1446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	8b a3       	std	Y+35, r24	; 0x23
    1450:	9c a3       	std	Y+36, r25	; 0x24
    1452:	ad a3       	std	Y+37, r26	; 0x25
    1454:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1456:	6b a1       	ldd	r22, Y+35	; 0x23
    1458:	7c a1       	ldd	r23, Y+36	; 0x24
    145a:	8d a1       	ldd	r24, Y+37	; 0x25
    145c:	9e a1       	ldd	r25, Y+38	; 0x26
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e8       	ldi	r20, 0x80	; 128
    1464:	5f e3       	ldi	r21, 0x3F	; 63
    1466:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    146a:	88 23       	and	r24, r24
    146c:	2c f4       	brge	.+10     	; 0x1478 <LCD_voidInit+0x266>
		__ticks = 1;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	9a a3       	std	Y+34, r25	; 0x22
    1474:	89 a3       	std	Y+33, r24	; 0x21
    1476:	3f c0       	rjmp	.+126    	; 0x14f6 <LCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    1478:	6b a1       	ldd	r22, Y+35	; 0x23
    147a:	7c a1       	ldd	r23, Y+36	; 0x24
    147c:	8d a1       	ldd	r24, Y+37	; 0x25
    147e:	9e a1       	ldd	r25, Y+38	; 0x26
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	3f ef       	ldi	r19, 0xFF	; 255
    1484:	4f e7       	ldi	r20, 0x7F	; 127
    1486:	57 e4       	ldi	r21, 0x47	; 71
    1488:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    148c:	18 16       	cp	r1, r24
    148e:	4c f5       	brge	.+82     	; 0x14e2 <LCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1490:	6f a1       	ldd	r22, Y+39	; 0x27
    1492:	78 a5       	ldd	r23, Y+40	; 0x28
    1494:	89 a5       	ldd	r24, Y+41	; 0x29
    1496:	9a a5       	ldd	r25, Y+42	; 0x2a
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e2       	ldi	r20, 0x20	; 32
    149e:	51 e4       	ldi	r21, 0x41	; 65
    14a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	bc 01       	movw	r22, r24
    14aa:	cd 01       	movw	r24, r26
    14ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	9a a3       	std	Y+34, r25	; 0x22
    14b6:	89 a3       	std	Y+33, r24	; 0x21
    14b8:	0f c0       	rjmp	.+30     	; 0x14d8 <LCD_voidInit+0x2c6>
    14ba:	88 ec       	ldi	r24, 0xC8	; 200
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	98 a3       	std	Y+32, r25	; 0x20
    14c0:	8f 8f       	std	Y+31, r24	; 0x1f
    14c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14c4:	98 a1       	ldd	r25, Y+32	; 0x20
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	f1 f7       	brne	.-4      	; 0x14c6 <LCD_voidInit+0x2b4>
    14ca:	98 a3       	std	Y+32, r25	; 0x20
    14cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ce:	89 a1       	ldd	r24, Y+33	; 0x21
    14d0:	9a a1       	ldd	r25, Y+34	; 0x22
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	9a a3       	std	Y+34, r25	; 0x22
    14d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d8:	89 a1       	ldd	r24, Y+33	; 0x21
    14da:	9a a1       	ldd	r25, Y+34	; 0x22
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	69 f7       	brne	.-38     	; 0x14ba <LCD_voidInit+0x2a8>
    14e0:	14 c0       	rjmp	.+40     	; 0x150a <LCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e2:	6b a1       	ldd	r22, Y+35	; 0x23
    14e4:	7c a1       	ldd	r23, Y+36	; 0x24
    14e6:	8d a1       	ldd	r24, Y+37	; 0x25
    14e8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	9a a3       	std	Y+34, r25	; 0x22
    14f4:	89 a3       	std	Y+33, r24	; 0x21
    14f6:	89 a1       	ldd	r24, Y+33	; 0x21
    14f8:	9a a1       	ldd	r25, Y+34	; 0x22
    14fa:	9e 8f       	std	Y+30, r25	; 0x1e
    14fc:	8d 8f       	std	Y+29, r24	; 0x1d
    14fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1500:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <LCD_voidInit+0x2f0>
    1506:	9e 8f       	std	Y+30, r25	; 0x1e
    1508:	8d 8f       	std	Y+29, r24	; 0x1d

	// wait for more than 39 us
	_delay_ms(1);

	//lcd clear : to clear any data on the lcd
	LCD_voidSendCommand (0x01);
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e4       	ldi	r27, 0x40	; 64
    1518:	89 8f       	std	Y+25, r24	; 0x19
    151a:	9a 8f       	std	Y+26, r25	; 0x1a
    151c:	ab 8f       	std	Y+27, r26	; 0x1b
    151e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1520:	69 8d       	ldd	r22, Y+25	; 0x19
    1522:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1524:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1526:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	4a ef       	ldi	r20, 0xFA	; 250
    152e:	54 e4       	ldi	r21, 0x44	; 68
    1530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8d 8b       	std	Y+21, r24	; 0x15
    153a:	9e 8b       	std	Y+22, r25	; 0x16
    153c:	af 8b       	std	Y+23, r26	; 0x17
    153e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1540:	6d 89       	ldd	r22, Y+21	; 0x15
    1542:	7e 89       	ldd	r23, Y+22	; 0x16
    1544:	8f 89       	ldd	r24, Y+23	; 0x17
    1546:	98 8d       	ldd	r25, Y+24	; 0x18
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1554:	88 23       	and	r24, r24
    1556:	2c f4       	brge	.+10     	; 0x1562 <LCD_voidInit+0x350>
		__ticks = 1;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	9c 8b       	std	Y+20, r25	; 0x14
    155e:	8b 8b       	std	Y+19, r24	; 0x13
    1560:	3f c0       	rjmp	.+126    	; 0x15e0 <LCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1562:	6d 89       	ldd	r22, Y+21	; 0x15
    1564:	7e 89       	ldd	r23, Y+22	; 0x16
    1566:	8f 89       	ldd	r24, Y+23	; 0x17
    1568:	98 8d       	ldd	r25, Y+24	; 0x18
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	57 e4       	ldi	r21, 0x47	; 71
    1572:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1576:	18 16       	cp	r1, r24
    1578:	4c f5       	brge	.+82     	; 0x15cc <LCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157a:	69 8d       	ldd	r22, Y+25	; 0x19
    157c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    157e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1580:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e2       	ldi	r20, 0x20	; 32
    1588:	51 e4       	ldi	r21, 0x41	; 65
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9c 8b       	std	Y+20, r25	; 0x14
    15a0:	8b 8b       	std	Y+19, r24	; 0x13
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <LCD_voidInit+0x3b0>
    15a4:	88 ec       	ldi	r24, 0xC8	; 200
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9a 8b       	std	Y+18, r25	; 0x12
    15aa:	89 8b       	std	Y+17, r24	; 0x11
    15ac:	89 89       	ldd	r24, Y+17	; 0x11
    15ae:	9a 89       	ldd	r25, Y+18	; 0x12
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <LCD_voidInit+0x39e>
    15b4:	9a 8b       	std	Y+18, r25	; 0x12
    15b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ba:	9c 89       	ldd	r25, Y+20	; 0x14
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	9c 8b       	std	Y+20, r25	; 0x14
    15c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	8b 89       	ldd	r24, Y+19	; 0x13
    15c4:	9c 89       	ldd	r25, Y+20	; 0x14
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	69 f7       	brne	.-38     	; 0x15a4 <LCD_voidInit+0x392>
    15ca:	14 c0       	rjmp	.+40     	; 0x15f4 <LCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15cc:	6d 89       	ldd	r22, Y+21	; 0x15
    15ce:	7e 89       	ldd	r23, Y+22	; 0x16
    15d0:	8f 89       	ldd	r24, Y+23	; 0x17
    15d2:	98 8d       	ldd	r25, Y+24	; 0x18
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9c 8b       	std	Y+20, r25	; 0x14
    15de:	8b 8b       	std	Y+19, r24	; 0x13
    15e0:	8b 89       	ldd	r24, Y+19	; 0x13
    15e2:	9c 89       	ldd	r25, Y+20	; 0x14
    15e4:	98 8b       	std	Y+16, r25	; 0x10
    15e6:	8f 87       	std	Y+15, r24	; 0x0f
    15e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ea:	98 89       	ldd	r25, Y+16	; 0x10
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <LCD_voidInit+0x3da>
    15f0:	98 8b       	std	Y+16, r25	; 0x10
    15f2:	8f 87       	std	Y+15, r24	; 0x0f

	// delay for more than 1.53 ms
	_delay_ms(2);

	// entry mode set
	LCD_voidSendCommand(0x0A);
    15f4:	8a e0       	ldi	r24, 0x0A	; 10
    15f6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a0 e8       	ldi	r26, 0x80	; 128
    1600:	bf e3       	ldi	r27, 0x3F	; 63
    1602:	8b 87       	std	Y+11, r24	; 0x0b
    1604:	9c 87       	std	Y+12, r25	; 0x0c
    1606:	ad 87       	std	Y+13, r26	; 0x0d
    1608:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160a:	6b 85       	ldd	r22, Y+11	; 0x0b
    160c:	7c 85       	ldd	r23, Y+12	; 0x0c
    160e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1610:	9e 85       	ldd	r25, Y+14	; 0x0e
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	4a ef       	ldi	r20, 0xFA	; 250
    1618:	54 e4       	ldi	r21, 0x44	; 68
    161a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	8f 83       	std	Y+7, r24	; 0x07
    1624:	98 87       	std	Y+8, r25	; 0x08
    1626:	a9 87       	std	Y+9, r26	; 0x09
    1628:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    162a:	6f 81       	ldd	r22, Y+7	; 0x07
    162c:	78 85       	ldd	r23, Y+8	; 0x08
    162e:	89 85       	ldd	r24, Y+9	; 0x09
    1630:	9a 85       	ldd	r25, Y+10	; 0x0a
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e8       	ldi	r20, 0x80	; 128
    1638:	5f e3       	ldi	r21, 0x3F	; 63
    163a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    163e:	88 23       	and	r24, r24
    1640:	2c f4       	brge	.+10     	; 0x164c <LCD_voidInit+0x43a>
		__ticks = 1;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 83       	std	Y+5, r24	; 0x05
    164a:	3f c0       	rjmp	.+126    	; 0x16ca <LCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    164c:	6f 81       	ldd	r22, Y+7	; 0x07
    164e:	78 85       	ldd	r23, Y+8	; 0x08
    1650:	89 85       	ldd	r24, Y+9	; 0x09
    1652:	9a 85       	ldd	r25, Y+10	; 0x0a
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	3f ef       	ldi	r19, 0xFF	; 255
    1658:	4f e7       	ldi	r20, 0x7F	; 127
    165a:	57 e4       	ldi	r21, 0x47	; 71
    165c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1660:	18 16       	cp	r1, r24
    1662:	4c f5       	brge	.+82     	; 0x16b6 <LCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1664:	6b 85       	ldd	r22, Y+11	; 0x0b
    1666:	7c 85       	ldd	r23, Y+12	; 0x0c
    1668:	8d 85       	ldd	r24, Y+13	; 0x0d
    166a:	9e 85       	ldd	r25, Y+14	; 0x0e
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e2       	ldi	r20, 0x20	; 32
    1672:	51 e4       	ldi	r21, 0x41	; 65
    1674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	bc 01       	movw	r22, r24
    167e:	cd 01       	movw	r24, r26
    1680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	0f c0       	rjmp	.+30     	; 0x16ac <LCD_voidInit+0x49a>
    168e:	88 ec       	ldi	r24, 0xC8	; 200
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	8b 83       	std	Y+3, r24	; 0x03
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	f1 f7       	brne	.-4      	; 0x169a <LCD_voidInit+0x488>
    169e:	9c 83       	std	Y+4, r25	; 0x04
    16a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a2:	8d 81       	ldd	r24, Y+5	; 0x05
    16a4:	9e 81       	ldd	r25, Y+6	; 0x06
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	9e 83       	std	Y+6, r25	; 0x06
    16aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	9e 81       	ldd	r25, Y+6	; 0x06
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	69 f7       	brne	.-38     	; 0x168e <LCD_voidInit+0x47c>
    16b4:	14 c0       	rjmp	.+40     	; 0x16de <LCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b6:	6f 81       	ldd	r22, Y+7	; 0x07
    16b8:	78 85       	ldd	r23, Y+8	; 0x08
    16ba:	89 85       	ldd	r24, Y+9	; 0x09
    16bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	9e 83       	std	Y+6, r25	; 0x06
    16c8:	8d 83       	std	Y+5, r24	; 0x05
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <LCD_voidInit+0x4c4>
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	89 83       	std	Y+1, r24	; 0x01

	//delay for more than 1 ms
	_delay_ms(1);

}
    16de:	ca 5b       	subi	r28, 0xBA	; 186
    16e0:	df 4f       	sbci	r29, 0xFF	; 255
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <LCD_voidSendCommand>:


void LCD_voidSendCommand (u8 COPY_LCD_CMD)
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	6d 97       	sbiw	r28, 0x1d	; 29
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	8d 8f       	std	Y+29, r24	; 0x1d
	// disable Enable bin
	DIO_SetPinValue (LCD_CTRL_PORT,LCD_EN,LOW);
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	62 e0       	ldi	r22, 0x02	; 2
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>

	//RS COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RS , LOW) ;
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
	//_delay_ms(1) ;

	//RW COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RW , LOW) ;
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
	//_delay_ms(1) ;

	// SEND THE COMMAND
	DIO_SetPortValue (LCD_DATA_PORT ,COPY_LCD_CMD) ;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    172e:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPortValue>
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a0 e8       	ldi	r26, 0x80	; 128
    1738:	bf e3       	ldi	r27, 0x3F	; 63
    173a:	89 8f       	std	Y+25, r24	; 0x19
    173c:	9a 8f       	std	Y+26, r25	; 0x1a
    173e:	ab 8f       	std	Y+27, r26	; 0x1b
    1740:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1742:	69 8d       	ldd	r22, Y+25	; 0x19
    1744:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1746:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1748:	9c 8d       	ldd	r25, Y+28	; 0x1c
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	4a ef       	ldi	r20, 0xFA	; 250
    1750:	54 e4       	ldi	r21, 0x44	; 68
    1752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	8d 8b       	std	Y+21, r24	; 0x15
    175c:	9e 8b       	std	Y+22, r25	; 0x16
    175e:	af 8b       	std	Y+23, r26	; 0x17
    1760:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1762:	6d 89       	ldd	r22, Y+21	; 0x15
    1764:	7e 89       	ldd	r23, Y+22	; 0x16
    1766:	8f 89       	ldd	r24, Y+23	; 0x17
    1768:	98 8d       	ldd	r25, Y+24	; 0x18
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f e3       	ldi	r21, 0x3F	; 63
    1772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1776:	88 23       	and	r24, r24
    1778:	2c f4       	brge	.+10     	; 0x1784 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9c 8b       	std	Y+20, r25	; 0x14
    1780:	8b 8b       	std	Y+19, r24	; 0x13
    1782:	3f c0       	rjmp	.+126    	; 0x1802 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1784:	6d 89       	ldd	r22, Y+21	; 0x15
    1786:	7e 89       	ldd	r23, Y+22	; 0x16
    1788:	8f 89       	ldd	r24, Y+23	; 0x17
    178a:	98 8d       	ldd	r25, Y+24	; 0x18
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	3f ef       	ldi	r19, 0xFF	; 255
    1790:	4f e7       	ldi	r20, 0x7F	; 127
    1792:	57 e4       	ldi	r21, 0x47	; 71
    1794:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1798:	18 16       	cp	r1, r24
    179a:	4c f5       	brge	.+82     	; 0x17ee <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179c:	69 8d       	ldd	r22, Y+25	; 0x19
    179e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	51 e4       	ldi	r21, 0x41	; 65
    17ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	9c 8b       	std	Y+20, r25	; 0x14
    17c2:	8b 8b       	std	Y+19, r24	; 0x13
    17c4:	0f c0       	rjmp	.+30     	; 0x17e4 <LCD_voidSendCommand+0xee>
    17c6:	88 ec       	ldi	r24, 0xC8	; 200
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9a 8b       	std	Y+18, r25	; 0x12
    17cc:	89 8b       	std	Y+17, r24	; 0x11
    17ce:	89 89       	ldd	r24, Y+17	; 0x11
    17d0:	9a 89       	ldd	r25, Y+18	; 0x12
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <LCD_voidSendCommand+0xdc>
    17d6:	9a 8b       	std	Y+18, r25	; 0x12
    17d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17da:	8b 89       	ldd	r24, Y+19	; 0x13
    17dc:	9c 89       	ldd	r25, Y+20	; 0x14
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	9c 8b       	std	Y+20, r25	; 0x14
    17e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e4:	8b 89       	ldd	r24, Y+19	; 0x13
    17e6:	9c 89       	ldd	r25, Y+20	; 0x14
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	69 f7       	brne	.-38     	; 0x17c6 <LCD_voidSendCommand+0xd0>
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ee:	6d 89       	ldd	r22, Y+21	; 0x15
    17f0:	7e 89       	ldd	r23, Y+22	; 0x16
    17f2:	8f 89       	ldd	r24, Y+23	; 0x17
    17f4:	98 8d       	ldd	r25, Y+24	; 0x18
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9c 8b       	std	Y+20, r25	; 0x14
    1800:	8b 8b       	std	Y+19, r24	; 0x13
    1802:	8b 89       	ldd	r24, Y+19	; 0x13
    1804:	9c 89       	ldd	r25, Y+20	; 0x14
    1806:	98 8b       	std	Y+16, r25	; 0x10
    1808:	8f 87       	std	Y+15, r24	; 0x0f
    180a:	8f 85       	ldd	r24, Y+15	; 0x0f
    180c:	98 89       	ldd	r25, Y+16	; 0x10
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <LCD_voidSendCommand+0x118>
    1812:	98 8b       	std	Y+16, r25	; 0x10
    1814:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , HIGH) ;
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	62 e0       	ldi	r22, 0x02	; 2
    181a:	41 e0       	ldi	r20, 0x01	; 1
    181c:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a0 e8       	ldi	r26, 0x80	; 128
    1826:	bf e3       	ldi	r27, 0x3F	; 63
    1828:	8b 87       	std	Y+11, r24	; 0x0b
    182a:	9c 87       	std	Y+12, r25	; 0x0c
    182c:	ad 87       	std	Y+13, r26	; 0x0d
    182e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1830:	6b 85       	ldd	r22, Y+11	; 0x0b
    1832:	7c 85       	ldd	r23, Y+12	; 0x0c
    1834:	8d 85       	ldd	r24, Y+13	; 0x0d
    1836:	9e 85       	ldd	r25, Y+14	; 0x0e
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	4a ef       	ldi	r20, 0xFA	; 250
    183e:	54 e4       	ldi	r21, 0x44	; 68
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	8f 83       	std	Y+7, r24	; 0x07
    184a:	98 87       	std	Y+8, r25	; 0x08
    184c:	a9 87       	std	Y+9, r26	; 0x09
    184e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1850:	6f 81       	ldd	r22, Y+7	; 0x07
    1852:	78 85       	ldd	r23, Y+8	; 0x08
    1854:	89 85       	ldd	r24, Y+9	; 0x09
    1856:	9a 85       	ldd	r25, Y+10	; 0x0a
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5f e3       	ldi	r21, 0x3F	; 63
    1860:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1864:	88 23       	and	r24, r24
    1866:	2c f4       	brge	.+10     	; 0x1872 <LCD_voidSendCommand+0x17c>
		__ticks = 1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9e 83       	std	Y+6, r25	; 0x06
    186e:	8d 83       	std	Y+5, r24	; 0x05
    1870:	3f c0       	rjmp	.+126    	; 0x18f0 <LCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1872:	6f 81       	ldd	r22, Y+7	; 0x07
    1874:	78 85       	ldd	r23, Y+8	; 0x08
    1876:	89 85       	ldd	r24, Y+9	; 0x09
    1878:	9a 85       	ldd	r25, Y+10	; 0x0a
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	3f ef       	ldi	r19, 0xFF	; 255
    187e:	4f e7       	ldi	r20, 0x7F	; 127
    1880:	57 e4       	ldi	r21, 0x47	; 71
    1882:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1886:	18 16       	cp	r1, r24
    1888:	4c f5       	brge	.+82     	; 0x18dc <LCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188a:	6b 85       	ldd	r22, Y+11	; 0x0b
    188c:	7c 85       	ldd	r23, Y+12	; 0x0c
    188e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1890:	9e 85       	ldd	r25, Y+14	; 0x0e
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	9e 83       	std	Y+6, r25	; 0x06
    18b0:	8d 83       	std	Y+5, r24	; 0x05
    18b2:	0f c0       	rjmp	.+30     	; 0x18d2 <LCD_voidSendCommand+0x1dc>
    18b4:	88 ec       	ldi	r24, 0xC8	; 200
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9c 83       	std	Y+4, r25	; 0x04
    18ba:	8b 83       	std	Y+3, r24	; 0x03
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <LCD_voidSendCommand+0x1ca>
    18c4:	9c 83       	std	Y+4, r25	; 0x04
    18c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	69 f7       	brne	.-38     	; 0x18b4 <LCD_voidSendCommand+0x1be>
    18da:	14 c0       	rjmp	.+40     	; 0x1904 <LCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18dc:	6f 81       	ldd	r22, Y+7	; 0x07
    18de:	78 85       	ldd	r23, Y+8	; 0x08
    18e0:	89 85       	ldd	r24, Y+9	; 0x09
    18e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	8d 83       	std	Y+5, r24	; 0x05
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	9e 81       	ldd	r25, Y+6	; 0x06
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <LCD_voidSendCommand+0x206>
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , LOW) ;
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	62 e0       	ldi	r22, 0x02	; 2
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>

}
    190e:	6d 96       	adiw	r28, 0x1d	; 29
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <LCD_voidWriteData>:
void LCD_voidWriteData (u8  COPY_LCD_WRITE)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	6d 97       	sbiw	r28, 0x1d	; 29
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	8d 8f       	std	Y+29, r24	; 0x1d

	// disable Enable bin
	DIO_SetPinValue (LCD_CTRL_PORT,LCD_EN,LOW);
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	62 e0       	ldi	r22, 0x02	; 2
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>

	//RS COMMAND : HIGH
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RS , HIGH) ;
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
	//_delay_ms(1) ;

	//RW COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RW , LOW) ;
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
	//_delay_ms(1) ;

	// SEND THE COMMAND
	DIO_SetPortValue (LCD_DATA_PORT ,COPY_LCD_WRITE) ;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1958:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPortValue>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a0 e8       	ldi	r26, 0x80	; 128
    1962:	bf e3       	ldi	r27, 0x3F	; 63
    1964:	89 8f       	std	Y+25, r24	; 0x19
    1966:	9a 8f       	std	Y+26, r25	; 0x1a
    1968:	ab 8f       	std	Y+27, r26	; 0x1b
    196a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	69 8d       	ldd	r22, Y+25	; 0x19
    196e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1972:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4a ef       	ldi	r20, 0xFA	; 250
    197a:	54 e4       	ldi	r21, 0x44	; 68
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8d 8b       	std	Y+21, r24	; 0x15
    1986:	9e 8b       	std	Y+22, r25	; 0x16
    1988:	af 8b       	std	Y+23, r26	; 0x17
    198a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    198c:	6d 89       	ldd	r22, Y+21	; 0x15
    198e:	7e 89       	ldd	r23, Y+22	; 0x16
    1990:	8f 89       	ldd	r24, Y+23	; 0x17
    1992:	98 8d       	ldd	r25, Y+24	; 0x18
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	2c f4       	brge	.+10     	; 0x19ae <LCD_voidWriteData+0x8e>
		__ticks = 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
    19ac:	3f c0       	rjmp	.+126    	; 0x1a2c <LCD_voidWriteData+0x10c>
	else if (__tmp > 65535)
    19ae:	6d 89       	ldd	r22, Y+21	; 0x15
    19b0:	7e 89       	ldd	r23, Y+22	; 0x16
    19b2:	8f 89       	ldd	r24, Y+23	; 0x17
    19b4:	98 8d       	ldd	r25, Y+24	; 0x18
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c2:	18 16       	cp	r1, r24
    19c4:	4c f5       	brge	.+82     	; 0x1a18 <LCD_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	69 8d       	ldd	r22, Y+25	; 0x19
    19c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	9c 8b       	std	Y+20, r25	; 0x14
    19ec:	8b 8b       	std	Y+19, r24	; 0x13
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <LCD_voidWriteData+0xee>
    19f0:	88 ec       	ldi	r24, 0xC8	; 200
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9a 8b       	std	Y+18, r25	; 0x12
    19f6:	89 8b       	std	Y+17, r24	; 0x11
    19f8:	89 89       	ldd	r24, Y+17	; 0x11
    19fa:	9a 89       	ldd	r25, Y+18	; 0x12
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <LCD_voidWriteData+0xdc>
    1a00:	9a 8b       	std	Y+18, r25	; 0x12
    1a02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	8b 89       	ldd	r24, Y+19	; 0x13
    1a06:	9c 89       	ldd	r25, Y+20	; 0x14
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	9c 8b       	std	Y+20, r25	; 0x14
    1a0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a10:	9c 89       	ldd	r25, Y+20	; 0x14
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f7       	brne	.-38     	; 0x19f0 <LCD_voidWriteData+0xd0>
    1a16:	14 c0       	rjmp	.+40     	; 0x1a40 <LCD_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9c 8b       	std	Y+20, r25	; 0x14
    1a2a:	8b 8b       	std	Y+19, r24	; 0x13
    1a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a30:	98 8b       	std	Y+16, r25	; 0x10
    1a32:	8f 87       	std	Y+15, r24	; 0x0f
    1a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a36:	98 89       	ldd	r25, Y+16	; 0x10
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <LCD_voidWriteData+0x118>
    1a3c:	98 8b       	std	Y+16, r25	; 0x10
    1a3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , HIGH) ;
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	62 e0       	ldi	r22, 0x02	; 2
    1a44:	41 e0       	ldi	r20, 0x01	; 1
    1a46:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a0 e8       	ldi	r26, 0x80	; 128
    1a50:	bf e3       	ldi	r27, 0x3F	; 63
    1a52:	8b 87       	std	Y+11, r24	; 0x0b
    1a54:	9c 87       	std	Y+12, r25	; 0x0c
    1a56:	ad 87       	std	Y+13, r26	; 0x0d
    1a58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	4a ef       	ldi	r20, 0xFA	; 250
    1a68:	54 e4       	ldi	r21, 0x44	; 68
    1a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	8f 83       	std	Y+7, r24	; 0x07
    1a74:	98 87       	std	Y+8, r25	; 0x08
    1a76:	a9 87       	std	Y+9, r26	; 0x09
    1a78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7c:	78 85       	ldd	r23, Y+8	; 0x08
    1a7e:	89 85       	ldd	r24, Y+9	; 0x09
    1a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e8       	ldi	r20, 0x80	; 128
    1a88:	5f e3       	ldi	r21, 0x3F	; 63
    1a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8e:	88 23       	and	r24, r24
    1a90:	2c f4       	brge	.+10     	; 0x1a9c <LCD_voidWriteData+0x17c>
		__ticks = 1;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	3f c0       	rjmp	.+126    	; 0x1b1a <LCD_voidWriteData+0x1fa>
	else if (__tmp > 65535)
    1a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9e:	78 85       	ldd	r23, Y+8	; 0x08
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	3f ef       	ldi	r19, 0xFF	; 255
    1aa8:	4f e7       	ldi	r20, 0x7F	; 127
    1aaa:	57 e4       	ldi	r21, 0x47	; 71
    1aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab0:	18 16       	cp	r1, r24
    1ab2:	4c f5       	brge	.+82     	; 0x1b06 <LCD_voidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e2       	ldi	r20, 0x20	; 32
    1ac2:	51 e4       	ldi	r21, 0x41	; 65
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
    1adc:	0f c0       	rjmp	.+30     	; 0x1afc <LCD_voidWriteData+0x1dc>
    1ade:	88 ec       	ldi	r24, 0xC8	; 200
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9c 83       	std	Y+4, r25	; 0x04
    1ae4:	8b 83       	std	Y+3, r24	; 0x03
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_voidWriteData+0x1ca>
    1aee:	9c 83       	std	Y+4, r25	; 0x04
    1af0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	9e 83       	std	Y+6, r25	; 0x06
    1afa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afc:	8d 81       	ldd	r24, Y+5	; 0x05
    1afe:	9e 81       	ldd	r25, Y+6	; 0x06
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	69 f7       	brne	.-38     	; 0x1ade <LCD_voidWriteData+0x1be>
    1b04:	14 c0       	rjmp	.+40     	; 0x1b2e <LCD_voidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b06:	6f 81       	ldd	r22, Y+7	; 0x07
    1b08:	78 85       	ldd	r23, Y+8	; 0x08
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	9e 83       	std	Y+6, r25	; 0x06
    1b18:	8d 83       	std	Y+5, r24	; 0x05
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <LCD_voidWriteData+0x206>
    1b2a:	9a 83       	std	Y+2, r25	; 0x02
    1b2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , LOW) ;
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>

}
    1b38:	6d 96       	adiw	r28, 0x1d	; 29
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 LCD_XPOS , u8 LCD_YPOS)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <LCD_voidGoToXY+0x6>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	6a 83       	std	Y+2, r22	; 0x02
	// SET DD RAM ADRESS
	LCD_voidSendCommand((LCD_XPOS * 0x40 + LCD_YPOS) | 0b10000000);
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	00 24       	eor	r0, r0
    1b60:	96 95       	lsr	r25
    1b62:	87 95       	ror	r24
    1b64:	07 94       	ror	r0
    1b66:	96 95       	lsr	r25
    1b68:	87 95       	ror	r24
    1b6a:	07 94       	ror	r0
    1b6c:	98 2f       	mov	r25, r24
    1b6e:	80 2d       	mov	r24, r0
    1b70:	98 2f       	mov	r25, r24
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	89 0f       	add	r24, r25
    1b76:	80 68       	ori	r24, 0x80	; 128
    1b78:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>

}
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <LCD_voidWriteSpecialChar>:

void LCD_voidWriteSpecialChar(u8 *pattern , u8 block_no, u8 x, u8 y)
{
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	27 97       	sbiw	r28, 0x07	; 7
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
    1b9e:	6d 83       	std	Y+5, r22	; 0x05
    1ba0:	4e 83       	std	Y+6, r20	; 0x06
    1ba2:	2f 83       	std	Y+7, r18	; 0x07
	// variable for loop
	u8 i;

	// every block is 8 bytes so calculate address by multiply it with 8
	u8 address = 8 * block_no ;
    1ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	89 83       	std	Y+1, r24	; 0x01

	// set CG RAM address from data sheet (00 01 A5-A0)
	LCD_voidSendCommand(address | 0b01000000);
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	80 64       	ori	r24, 0x40	; 64
    1bbc:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>

	// LOOP to write data from CGRAM to DDRAM (array of 8 bytes)
	for(i = 0 ; i< 8; i++)
    1bc0:	1a 82       	std	Y+2, r1	; 0x02
    1bc2:	0e c0       	rjmp	.+28     	; 0x1be0 <LCD_voidWriteSpecialChar+0x5a>
	{
		LCD_voidWriteData(pattern[i]);
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	fc 01       	movw	r30, r24
    1bd0:	e2 0f       	add	r30, r18
    1bd2:	f3 1f       	adc	r31, r19
    1bd4:	80 81       	ld	r24, Z
    1bd6:	0e 94 90 0c 	call	0x1920	; 0x1920 <LCD_voidWriteData>

	// set CG RAM address from data sheet (00 01 A5-A0)
	LCD_voidSendCommand(address | 0b01000000);

	// LOOP to write data from CGRAM to DDRAM (array of 8 bytes)
	for(i = 0 ; i< 8; i++)
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	8f 5f       	subi	r24, 0xFF	; 255
    1bde:	8a 83       	std	Y+2, r24	; 0x02
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	88 30       	cpi	r24, 0x08	; 8
    1be4:	78 f3       	brcs	.-34     	; 0x1bc4 <LCD_voidWriteSpecialChar+0x3e>
	{
		LCD_voidWriteData(pattern[i]);
	}
	// set DDRAM to write on LCD by using GO TO XY
	LCD_voidGoToXY(x , y);
    1be6:	8e 81       	ldd	r24, Y+6	; 0x06
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>

	//display block number from CGRAM
	LCD_voidWriteData(block_no);
    1bee:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf0:	0e 94 90 0c 	call	0x1920	; 0x1920 <LCD_voidWriteData>
}
    1bf4:	27 96       	adiw	r28, 0x07	; 7
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <LCD_voidWriteNumber>:
void LCD_voidWriteNumber(u16 Number)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	2e 97       	sbiw	r28, 0x0e	; 14
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	98 87       	std	Y+8, r25	; 0x08
    1c1c:	8f 83       	std	Y+7, r24	; 0x07
	for(i = 0 ; i<num_digit ; i++)
	{
		LCD_voidWriteData(arr[i]) ;
	}

}
    1c1e:	2d b7       	in	r18, 0x3d	; 61
    1c20:	3e b7       	in	r19, 0x3e	; 62
    1c22:	3e 87       	std	Y+14, r19	; 0x0e
    1c24:	2d 87       	std	Y+13, r18	; 0x0d

	//display block number from CGRAM
	LCD_voidWriteData(block_no);
}
void LCD_voidWriteNumber(u16 Number)
{
    1c26:	8d b7       	in	r24, 0x3d	; 61
    1c28:	9e b7       	in	r25, 0x3e	; 62
    1c2a:	9a 87       	std	Y+10, r25	; 0x0a
    1c2c:	89 87       	std	Y+9, r24	; 0x09
	u8 num_digit = 0 ;
    1c2e:	1c 82       	std	Y+4, r1	; 0x04
	u8 i;
	u16 copy_number = Number;
    1c30:	8f 81       	ldd	r24, Y+7	; 0x07
    1c32:	98 85       	ldd	r25, Y+8	; 0x08
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	0d c0       	rjmp	.+26     	; 0x1c54 <LCD_voidWriteNumber+0x4e>

	while(copy_number != 0)
	{
		copy_number /= 10 ;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	2a e0       	ldi	r18, 0x0A	; 10
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	b9 01       	movw	r22, r18
    1c44:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
		num_digit += 1;
    1c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c50:	8f 5f       	subi	r24, 0xFF	; 255
    1c52:	8c 83       	std	Y+4, r24	; 0x04
{
	u8 num_digit = 0 ;
	u8 i;
	u16 copy_number = Number;

	while(copy_number != 0)
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	79 f7       	brne	.-34     	; 0x1c3a <LCD_voidWriteNumber+0x34>
	{
		copy_number /= 10 ;
		num_digit += 1;
	}

	u8 arr[num_digit] ;
    1c5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	2d b7       	in	r18, 0x3d	; 61
    1c64:	3e b7       	in	r19, 0x3e	; 62
    1c66:	28 1b       	sub	r18, r24
    1c68:	39 0b       	sbc	r19, r25
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	3e bf       	out	0x3e, r19	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	2d bf       	out	0x3d, r18	; 61
    1c74:	8d b7       	in	r24, 0x3d	; 61
    1c76:	9e b7       	in	r25, 0x3e	; 62
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	9c 87       	std	Y+12, r25	; 0x0c
    1c7c:	8b 87       	std	Y+11, r24	; 0x0b
    1c7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c80:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c82:	00 96       	adiw	r24, 0x00	; 0
    1c84:	9c 87       	std	Y+12, r25	; 0x0c
    1c86:	8b 87       	std	Y+11, r24	; 0x0b
    1c88:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c8a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c8c:	3e 83       	std	Y+6, r19	; 0x06
    1c8e:	2d 83       	std	Y+5, r18	; 0x05

	for(i = num_digit ; i> 0 ; i--)
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	8b 83       	std	Y+3, r24	; 0x03
    1c94:	20 c0       	rjmp	.+64     	; 0x1cd6 <LCD_voidWriteNumber+0xd0>
	{
		arr[i-1] = (u8)((Number % 10) +'0') ;
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	31 97       	sbiw	r30, 0x01	; 1
    1ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca2:	98 85       	ldd	r25, Y+8	; 0x08
    1ca4:	2a e0       	ldi	r18, 0x0A	; 10
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	b9 01       	movw	r22, r18
    1caa:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    1cae:	28 2f       	mov	r18, r24
    1cb0:	20 5d       	subi	r18, 0xD0	; 208
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb6:	e8 0f       	add	r30, r24
    1cb8:	f9 1f       	adc	r31, r25
    1cba:	20 83       	st	Z, r18
		Number = Number /10 ;
    1cbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1cbe:	98 85       	ldd	r25, Y+8	; 0x08
    1cc0:	2a e0       	ldi	r18, 0x0A	; 10
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	b9 01       	movw	r22, r18
    1cc6:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    1cca:	cb 01       	movw	r24, r22
    1ccc:	98 87       	std	Y+8, r25	; 0x08
    1cce:	8f 83       	std	Y+7, r24	; 0x07
		num_digit += 1;
	}

	u8 arr[num_digit] ;

	for(i = num_digit ; i> 0 ; i--)
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	81 50       	subi	r24, 0x01	; 1
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	88 23       	and	r24, r24
    1cda:	e9 f6       	brne	.-70     	; 0x1c96 <LCD_voidWriteNumber+0x90>
		arr[i-1] = (u8)((Number % 10) +'0') ;
		Number = Number /10 ;
	}


	for(i = 0 ; i<num_digit ; i++)
    1cdc:	1b 82       	std	Y+3, r1	; 0x03
    1cde:	0e c0       	rjmp	.+28     	; 0x1cfc <LCD_voidWriteNumber+0xf6>
	{
		LCD_voidWriteData(arr[i]) ;
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cea:	fc 01       	movw	r30, r24
    1cec:	e2 0f       	add	r30, r18
    1cee:	f3 1f       	adc	r31, r19
    1cf0:	80 81       	ld	r24, Z
    1cf2:	0e 94 90 0c 	call	0x1920	; 0x1920 <LCD_voidWriteData>
		arr[i-1] = (u8)((Number % 10) +'0') ;
		Number = Number /10 ;
	}


	for(i = 0 ; i<num_digit ; i++)
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	8f 5f       	subi	r24, 0xFF	; 255
    1cfa:	8b 83       	std	Y+3, r24	; 0x03
    1cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	98 17       	cp	r25, r24
    1d02:	70 f3       	brcs	.-36     	; 0x1ce0 <LCD_voidWriteNumber+0xda>
    1d04:	89 85       	ldd	r24, Y+9	; 0x09
    1d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	9e bf       	out	0x3e, r25	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	8d bf       	out	0x3d, r24	; 61
	{
		LCD_voidWriteData(arr[i]) ;
	}

}
    1d12:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d14:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	3e bf       	out	0x3e, r19	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	2d bf       	out	0x3d, r18	; 61
    1d20:	2e 96       	adiw	r28, 0x0e	; 14
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <LCD_Display>:

void LCD_Display(u8 word[])
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <LCD_Display+0x6>
    1d38:	0f 92       	push	r0
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	9b 83       	std	Y+3, r25	; 0x03
    1d40:	8a 83       	std	Y+2, r24	; 0x02
	u8 i ;

	for(i = 0; word[i]!=0 ;i++)
    1d42:	19 82       	std	Y+1, r1	; 0x01
    1d44:	0e c0       	rjmp	.+28     	; 0x1d62 <LCD_Display+0x30>
	{
		LCD_voidWriteData(word[i]);
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d50:	fc 01       	movw	r30, r24
    1d52:	e2 0f       	add	r30, r18
    1d54:	f3 1f       	adc	r31, r19
    1d56:	80 81       	ld	r24, Z
    1d58:	0e 94 90 0c 	call	0x1920	; 0x1920 <LCD_voidWriteData>

void LCD_Display(u8 word[])
{
	u8 i ;

	for(i = 0; word[i]!=0 ;i++)
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	8f 5f       	subi	r24, 0xFF	; 255
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	e2 0f       	add	r30, r18
    1d70:	f3 1f       	adc	r31, r19
    1d72:	80 81       	ld	r24, Z
    1d74:	88 23       	and	r24, r24
    1d76:	39 f7       	brne	.-50     	; 0x1d46 <LCD_Display+0x14>
	{
		LCD_voidWriteData(word[i]);
	}
}
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <Timer1_voidInit>:
#include"TIMER_INT.h"
#include"DIO_INT.h"


void Timer1_voidInit(void)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
	// set on top clear on compare
	set_bit(TCCR1A , TCCR1A_COM1A1);
    1d8c:	af e4       	ldi	r26, 0x4F	; 79
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	ef e4       	ldi	r30, 0x4F	; 79
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	80 68       	ori	r24, 0x80	; 128
    1d98:	8c 93       	st	X, r24
	clr_bit(TCCR1A , TCCR1A_COM1A0);
    1d9a:	af e4       	ldi	r26, 0x4F	; 79
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	ef e4       	ldi	r30, 0x4F	; 79
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8f 7b       	andi	r24, 0xBF	; 191
    1da6:	8c 93       	st	X, r24

	// set wave form to 14: fast PWM
	set_bit(TCCR1A , TCCR1A_WGM11);
    1da8:	af e4       	ldi	r26, 0x4F	; 79
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	ef e4       	ldi	r30, 0x4F	; 79
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	82 60       	ori	r24, 0x02	; 2
    1db4:	8c 93       	st	X, r24
	clr_bit(TCCR1A , TCCR1A_WGM10);
    1db6:	af e4       	ldi	r26, 0x4F	; 79
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	ef e4       	ldi	r30, 0x4F	; 79
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	8e 7f       	andi	r24, 0xFE	; 254
    1dc2:	8c 93       	st	X, r24

	set_bit(TCCR1B  , TCCR1B_WGM12);
    1dc4:	ae e4       	ldi	r26, 0x4E	; 78
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	ee e4       	ldi	r30, 0x4E	; 78
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	88 60       	ori	r24, 0x08	; 8
    1dd0:	8c 93       	st	X, r24
	set_bit(TCCR1B  , TCCR1B_WGM13);
    1dd2:	ae e4       	ldi	r26, 0x4E	; 78
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ee e4       	ldi	r30, 0x4E	; 78
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	80 61       	ori	r24, 0x10	; 16
    1dde:	8c 93       	st	X, r24

	// preload  period time = 20ms
	ICR1L = 1000;
    1de0:	e6 e4       	ldi	r30, 0x46	; 70
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	88 ee       	ldi	r24, 0xE8	; 232
    1de6:	93 e0       	ldi	r25, 0x03	; 3
    1de8:	91 83       	std	Z+1, r25	; 0x01
    1dea:	80 83       	st	Z, r24

	//ON TIME = 750US
	OCR1AL = 750;
    1dec:	ea e4       	ldi	r30, 0x4A	; 74
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	8e ee       	ldi	r24, 0xEE	; 238
    1df2:	92 e0       	ldi	r25, 0x02	; 2
    1df4:	91 83       	std	Z+1, r25	; 0x01
    1df6:	80 83       	st	Z, r24

	// PRESCALER divided by 8
	clr_bit(TCCR1B  , TCCR1B_CS10);
    1df8:	ae e4       	ldi	r26, 0x4E	; 78
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	ee e4       	ldi	r30, 0x4E	; 78
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8e 7f       	andi	r24, 0xFE	; 254
    1e04:	8c 93       	st	X, r24
	set_bit(TCCR1B  , TCCR1B_CS11);
    1e06:	ae e4       	ldi	r26, 0x4E	; 78
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	ee e4       	ldi	r30, 0x4E	; 78
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	82 60       	ori	r24, 0x02	; 2
    1e12:	8c 93       	st	X, r24
	clr_bit(TCCR1B  , TCCR1B_CS12);
    1e14:	ae e4       	ldi	r26, 0x4E	; 78
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	ee e4       	ldi	r30, 0x4E	; 78
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8b 7f       	andi	r24, 0xFB	; 251
    1e20:	8c 93       	st	X, r24
}
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <Timer1_voidInitnormal>:

void Timer1_voidInitnormal(void)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
	// set NORMAL MODE
	clr_bit(TCCR1A , TCCR1A_WGM11);
    1e30:	af e4       	ldi	r26, 0x4F	; 79
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ef e4       	ldi	r30, 0x4F	; 79
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	8d 7f       	andi	r24, 0xFD	; 253
    1e3c:	8c 93       	st	X, r24
	clr_bit(TCCR1A , TCCR1A_WGM10);
    1e3e:	af e4       	ldi	r26, 0x4F	; 79
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	ef e4       	ldi	r30, 0x4F	; 79
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8e 7f       	andi	r24, 0xFE	; 254
    1e4a:	8c 93       	st	X, r24
	clr_bit(TCCR1B , TCCR1B_WGM12);
    1e4c:	ae e4       	ldi	r26, 0x4E	; 78
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	ee e4       	ldi	r30, 0x4E	; 78
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	87 7f       	andi	r24, 0xF7	; 247
    1e58:	8c 93       	st	X, r24
	clr_bit(TCCR1B , TCCR1B_WGM13);
    1e5a:	ae e4       	ldi	r26, 0x4E	; 78
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	ee e4       	ldi	r30, 0x4E	; 78
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8f 7e       	andi	r24, 0xEF	; 239
    1e66:	8c 93       	st	X, r24

	//preload value setting
	TCNT1L = 0;
    1e68:	ec e4       	ldi	r30, 0x4C	; 76
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	11 82       	std	Z+1, r1	; 0x01
    1e6e:	10 82       	st	Z, r1

	set_bit(TIMSK , TIMSK_TOIE1);
    1e70:	a9 e5       	ldi	r26, 0x59	; 89
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e9 e5       	ldi	r30, 0x59	; 89
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	84 60       	ori	r24, 0x04	; 4
    1e7c:	8c 93       	st	X, r24

	// PRESCALER divided by 8
	clr_bit(TCCR1B  , TCCR1B_CS10);
    1e7e:	ae e4       	ldi	r26, 0x4E	; 78
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	ee e4       	ldi	r30, 0x4E	; 78
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8e 7f       	andi	r24, 0xFE	; 254
    1e8a:	8c 93       	st	X, r24
	clr_bit(TCCR1B  , TCCR1B_CS11);
    1e8c:	ae e4       	ldi	r26, 0x4E	; 78
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	ee e4       	ldi	r30, 0x4E	; 78
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	8d 7f       	andi	r24, 0xFD	; 253
    1e98:	8c 93       	st	X, r24
	set_bit(TCCR1B  , TCCR1B_CS12);
    1e9a:	ae e4       	ldi	r26, 0x4E	; 78
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	ee e4       	ldi	r30, 0x4E	; 78
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	84 60       	ori	r24, 0x04	; 4
    1ea6:	8c 93       	st	X, r24
}
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <TIMER1_ICR_voidInit>:

void TIMER1_ICR_voidInit(void)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
	// SET EDGE SELECTION ON falling edge
	clr_bit(TCCR1B  , TCCR1B_ICES1);
    1eb6:	ae e4       	ldi	r26, 0x4E	; 78
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	ee e4       	ldi	r30, 0x4E	; 78
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	8f 7b       	andi	r24, 0xBF	; 191
    1ec2:	8c 93       	st	X, r24

	// enable ICU interrupt
	set_bit(TIMSK  , TIMSK_TICIE1);
    1ec4:	a9 e5       	ldi	r26, 0x59	; 89
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e9 e5       	ldi	r30, 0x59	; 89
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	80 62       	ori	r24, 0x20	; 32
    1ed0:	8c 93       	st	X, r24
}
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <USART_voidInit>:
#include "UART_REG.h"
#include "LIBS/MATH.h"
#include "UART_INT.h"

void USART_voidInit(void)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	0f 92       	push	r0
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
	u8 UCSRC_VALUE = 0 ;
    1ee2:	19 82       	std	Y+1, r1	; 0x01
	// UART ENABLE
	set_bit(UCSRB , UCSRB_RXEN) ;
    1ee4:	aa e2       	ldi	r26, 0x2A	; 42
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	ea e2       	ldi	r30, 0x2A	; 42
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	80 61       	ori	r24, 0x10	; 16
    1ef0:	8c 93       	st	X, r24
	set_bit(UCSRB , UCSRB_TXEN) ;
    1ef2:	aa e2       	ldi	r26, 0x2A	; 42
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	ea e2       	ldi	r30, 0x2A	; 42
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	88 60       	ori	r24, 0x08	; 8
    1efe:	8c 93       	st	X, r24

	// access USCRC register
	set_bit(UCSRC_VALUE , UCSRC_URSEL) ;
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	80 68       	ori	r24, 0x80	; 128
    1f04:	89 83       	std	Y+1, r24	; 0x01

	//characterized : 8bits
	set_bit(UCSRC_VALUE , UCSRC_UCSZ1) ;
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	84 60       	ori	r24, 0x04	; 4
    1f0a:	89 83       	std	Y+1, r24	; 0x01
	set_bit(UCSRC_VALUE , UCSRC_UCSZ0) ;
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	82 60       	ori	r24, 0x02	; 2
    1f10:	89 83       	std	Y+1, r24	; 0x01

	// send the value to the transmitter
	UCSRC = UCSRC_VALUE ;
    1f12:	e0 e4       	ldi	r30, 0x40	; 64
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	80 83       	st	Z, r24

	// 9600 bps baudrate
	UBRRL=51;
    1f1a:	e9 e2       	ldi	r30, 0x29	; 41
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	83 e3       	ldi	r24, 0x33	; 51
    1f20:	80 83       	st	Z, r24
}
    1f22:	0f 90       	pop	r0
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <USART_voidTransmit>:

void USART_voidTransmit(u8 data)
{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	0f 92       	push	r0
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	89 83       	std	Y+1, r24	; 0x01
	// polling with blocking on UDRE
	while((read_bit(UCSRA , UCSRA_UDRE))== 0);
    1f36:	eb e2       	ldi	r30, 0x2B	; 43
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	82 95       	swap	r24
    1f3e:	86 95       	lsr	r24
    1f40:	87 70       	andi	r24, 0x07	; 7
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	81 70       	andi	r24, 0x01	; 1
    1f48:	90 70       	andi	r25, 0x00	; 0
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	a1 f3       	breq	.-24     	; 0x1f36 <USART_voidTransmit+0xc>

	// send the data
	UDR = data ;
    1f4e:	ec e2       	ldi	r30, 0x2C	; 44
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	80 83       	st	Z, r24

	// check for transmitter complete
	//while((read_bit(UCSRA , UCSRA_TXC)) == 0);
	//set_bit(UCSRA , UCSRA_TXC);
}
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <USART_u8Receive>:

u8 USART_u8Receive(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
	// poling with blocking on receive complete
	while((read_bit(UCSRA , UCSRA_RXC)) == 0) ;
    1f66:	eb e2       	ldi	r30, 0x2B	; 43
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 23       	and	r24, r24
    1f6e:	dc f7       	brge	.-10     	; 0x1f66 <USART_u8Receive+0x8>

	// get the data
	return UDR ;
    1f70:	ec e2       	ldi	r30, 0x2C	; 44
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <USART_voidSendString>:

void USART_voidSendString(char * str)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <USART_voidSendString+0x6>
    1f82:	0f 92       	push	r0
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	9b 83       	std	Y+3, r25	; 0x03
    1f8a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i ;

	for(i = 0; str[i]!=0 ;i++)
    1f8c:	19 82       	std	Y+1, r1	; 0x01
    1f8e:	0e c0       	rjmp	.+28     	; 0x1fac <USART_voidSendString+0x30>
	{
		USART_voidTransmit(str[i]);
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	e2 0f       	add	r30, r18
    1f9e:	f3 1f       	adc	r31, r19
    1fa0:	80 81       	ld	r24, Z
    1fa2:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <USART_voidTransmit>

void USART_voidSendString(char * str)
{
	u8 i ;

	for(i = 0; str[i]!=0 ;i++)
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	8f 5f       	subi	r24, 0xFF	; 255
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	28 2f       	mov	r18, r24
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	e2 0f       	add	r30, r18
    1fba:	f3 1f       	adc	r31, r19
    1fbc:	80 81       	ld	r24, Z
    1fbe:	88 23       	and	r24, r24
    1fc0:	39 f7       	brne	.-50     	; 0x1f90 <USART_voidSendString+0x14>
	{
		USART_voidTransmit(str[i]);
	}
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <USART_voidSendAsciiNumber>:

void USART_voidSendAsciiNumber(u16 Number)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	2e 97       	sbiw	r28, 0x0e	; 14
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	98 87       	std	Y+8, r25	; 0x08
    1fe4:	8f 83       	std	Y+7, r24	; 0x07

	for(i = 0 ; i<num_digit ; i++)
	{
		USART_voidTransmit(arr[i]) ;
	}
}
    1fe6:	2d b7       	in	r18, 0x3d	; 61
    1fe8:	3e b7       	in	r19, 0x3e	; 62
    1fea:	3e 87       	std	Y+14, r19	; 0x0e
    1fec:	2d 87       	std	Y+13, r18	; 0x0d
		USART_voidTransmit(str[i]);
	}
}

void USART_voidSendAsciiNumber(u16 Number)
{
    1fee:	8d b7       	in	r24, 0x3d	; 61
    1ff0:	9e b7       	in	r25, 0x3e	; 62
    1ff2:	9a 87       	std	Y+10, r25	; 0x0a
    1ff4:	89 87       	std	Y+9, r24	; 0x09

	u8 num_digit = 0 ;
    1ff6:	1c 82       	std	Y+4, r1	; 0x04
	u8 i;
	u16 copy_number = Number;
    1ff8:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffa:	98 85       	ldd	r25, Y+8	; 0x08
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	0d c0       	rjmp	.+26     	; 0x201c <USART_voidSendAsciiNumber+0x4e>

	while(copy_number != 0)
	{
		copy_number /= 10 ;
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	2a e0       	ldi	r18, 0x0A	; 10
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	b9 01       	movw	r22, r18
    200c:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    2010:	cb 01       	movw	r24, r22
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
		num_digit += 1;
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
    2018:	8f 5f       	subi	r24, 0xFF	; 255
    201a:	8c 83       	std	Y+4, r24	; 0x04

	u8 num_digit = 0 ;
	u8 i;
	u16 copy_number = Number;

	while(copy_number != 0)
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	9a 81       	ldd	r25, Y+2	; 0x02
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	79 f7       	brne	.-34     	; 0x2002 <USART_voidSendAsciiNumber+0x34>
	{
		copy_number /= 10 ;
		num_digit += 1;
	}

	u8 arr[num_digit] ;
    2024:	8c 81       	ldd	r24, Y+4	; 0x04
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	2d b7       	in	r18, 0x3d	; 61
    202c:	3e b7       	in	r19, 0x3e	; 62
    202e:	28 1b       	sub	r18, r24
    2030:	39 0b       	sbc	r19, r25
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	3e bf       	out	0x3e, r19	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	2d bf       	out	0x3d, r18	; 61
    203c:	8d b7       	in	r24, 0x3d	; 61
    203e:	9e b7       	in	r25, 0x3e	; 62
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	9c 87       	std	Y+12, r25	; 0x0c
    2044:	8b 87       	std	Y+11, r24	; 0x0b
    2046:	8b 85       	ldd	r24, Y+11	; 0x0b
    2048:	9c 85       	ldd	r25, Y+12	; 0x0c
    204a:	00 96       	adiw	r24, 0x00	; 0
    204c:	9c 87       	std	Y+12, r25	; 0x0c
    204e:	8b 87       	std	Y+11, r24	; 0x0b
    2050:	2b 85       	ldd	r18, Y+11	; 0x0b
    2052:	3c 85       	ldd	r19, Y+12	; 0x0c
    2054:	3e 83       	std	Y+6, r19	; 0x06
    2056:	2d 83       	std	Y+5, r18	; 0x05

	for(i = num_digit ; i> 0 ; i--)
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	8b 83       	std	Y+3, r24	; 0x03
    205c:	20 c0       	rjmp	.+64     	; 0x209e <USART_voidSendAsciiNumber+0xd0>
	{
		arr[i-1] = (u8)((Number % 10) +'0') ;
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	fc 01       	movw	r30, r24
    2066:	31 97       	sbiw	r30, 0x01	; 1
    2068:	8f 81       	ldd	r24, Y+7	; 0x07
    206a:	98 85       	ldd	r25, Y+8	; 0x08
    206c:	2a e0       	ldi	r18, 0x0A	; 10
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	b9 01       	movw	r22, r18
    2072:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    2076:	28 2f       	mov	r18, r24
    2078:	20 5d       	subi	r18, 0xD0	; 208
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	e8 0f       	add	r30, r24
    2080:	f9 1f       	adc	r31, r25
    2082:	20 83       	st	Z, r18
		Number = Number /10 ;
    2084:	8f 81       	ldd	r24, Y+7	; 0x07
    2086:	98 85       	ldd	r25, Y+8	; 0x08
    2088:	2a e0       	ldi	r18, 0x0A	; 10
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	b9 01       	movw	r22, r18
    208e:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    2092:	cb 01       	movw	r24, r22
    2094:	98 87       	std	Y+8, r25	; 0x08
    2096:	8f 83       	std	Y+7, r24	; 0x07
		num_digit += 1;
	}

	u8 arr[num_digit] ;

	for(i = num_digit ; i> 0 ; i--)
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	81 50       	subi	r24, 0x01	; 1
    209c:	8b 83       	std	Y+3, r24	; 0x03
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	88 23       	and	r24, r24
    20a2:	e9 f6       	brne	.-70     	; 0x205e <USART_voidSendAsciiNumber+0x90>
		arr[i-1] = (u8)((Number % 10) +'0') ;
		Number = Number /10 ;
	}


	for(i = 0 ; i<num_digit ; i++)
    20a4:	1b 82       	std	Y+3, r1	; 0x03
    20a6:	0e c0       	rjmp	.+28     	; 0x20c4 <USART_voidSendAsciiNumber+0xf6>
	{
		USART_voidTransmit(arr[i]) ;
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	fc 01       	movw	r30, r24
    20b4:	e2 0f       	add	r30, r18
    20b6:	f3 1f       	adc	r31, r19
    20b8:	80 81       	ld	r24, Z
    20ba:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <USART_voidTransmit>
		arr[i-1] = (u8)((Number % 10) +'0') ;
		Number = Number /10 ;
	}


	for(i = 0 ; i<num_digit ; i++)
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	8f 5f       	subi	r24, 0xFF	; 255
    20c2:	8b 83       	std	Y+3, r24	; 0x03
    20c4:	9b 81       	ldd	r25, Y+3	; 0x03
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
    20c8:	98 17       	cp	r25, r24
    20ca:	70 f3       	brcs	.-36     	; 0x20a8 <USART_voidSendAsciiNumber+0xda>
    20cc:	89 85       	ldd	r24, Y+9	; 0x09
    20ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	9e bf       	out	0x3e, r25	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	8d bf       	out	0x3d, r24	; 61
	{
		USART_voidTransmit(arr[i]) ;
	}
}
    20da:	2d 85       	ldd	r18, Y+13	; 0x0d
    20dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	3e bf       	out	0x3e, r19	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	2d bf       	out	0x3d, r18	; 61
    20e8:	2e 96       	adiw	r28, 0x0e	; 14
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <main>:
u8 * pass_arr(u16 pass);
u8 * id_arr(u16 id);
void system(void);

void main()
 {
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
	// LCD INATILIZE AND PORTS

	DIO_SetPortDirection(DDRA , 0xff);
    2102:	84 e0       	ldi	r24, 0x04	; 4
    2104:	6f ef       	ldi	r22, 0xFF	; 255
    2106:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_SetPortDirection>
	DIO_SetPortDirection(DDRB , 0xff);
    210a:	85 e0       	ldi	r24, 0x05	; 5
    210c:	6f ef       	ldi	r22, 0xFF	; 255
    210e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_SetPortDirection>

	LCD_voidInit();
    2112:	0e 94 09 09 	call	0x1212	; 0x1212 <LCD_voidInit>
	LCD_voidSendCommand(0x0c);
    2116:	8c e0       	ldi	r24, 0x0C	; 12
    2118:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>

	// initialize UART
	USART_voidInit();
    211c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <USART_voidInit>

	// TIMER

	DIO_SetPinDirection(DDRD , PIN5 , OUTPUT);
    2120:	87 e0       	ldi	r24, 0x07	; 7
    2122:	65 e0       	ldi	r22, 0x05	; 5
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	0e 94 d6 06 	call	0xdac	; 0xdac <DIO_SetPinDirection>
	DIO_SetPinDirection(DDRD , PIN7 , OUTPUT);
    212a:	87 e0       	ldi	r24, 0x07	; 7
    212c:	67 e0       	ldi	r22, 0x07	; 7
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	0e 94 d6 06 	call	0xdac	; 0xdac <DIO_SetPinDirection>
	DIO_SetPinDirection(DDRD , PIN6 , OUTPUT);
    2134:	87 e0       	ldi	r24, 0x07	; 7
    2136:	66 e0       	ldi	r22, 0x06	; 6
    2138:	41 e0       	ldi	r20, 0x01	; 1
    213a:	0e 94 d6 06 	call	0xdac	; 0xdac <DIO_SetPinDirection>

	system() ;
    213e:	0e 94 a4 10 	call	0x2148	; 0x2148 <system>

}
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <system>:

// fun to

void system(void)
{
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	ce 5a       	subi	r28, 0xAE	; 174
    2156:	d0 40       	sbci	r29, 0x00	; 0
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61

	u8 count = 1 ;
    2162:	fe 01       	movw	r30, r28
    2164:	e2 55       	subi	r30, 0x52	; 82
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	80 83       	st	Z, r24
	u8  *arr_id;
	u8  *arr_pass;

	// print welcome on LCD for 3 seconds

	LCD_voidGoToXY(0 , 4) ;
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	64 e0       	ldi	r22, 0x04	; 4
    2170:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
	LCD_Display("WELCOME") ;
    2174:	80 e6       	ldi	r24, 0x60	; 96
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
	USART_voidSendString("Welcome TO Your system \r");
    217c:	88 e6       	ldi	r24, 0x68	; 104
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
    2184:	fe 01       	movw	r30, r28
    2186:	eb 55       	subi	r30, 0x5B	; 91
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 e8       	ldi	r25, 0x80	; 128
    218e:	ab e3       	ldi	r26, 0x3B	; 59
    2190:	b5 e4       	ldi	r27, 0x45	; 69
    2192:	80 83       	st	Z, r24
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	a2 83       	std	Z+2, r26	; 0x02
    2198:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219a:	8e 01       	movw	r16, r28
    219c:	0f 55       	subi	r16, 0x5F	; 95
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	fe 01       	movw	r30, r28
    21a2:	eb 55       	subi	r30, 0x5B	; 91
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	60 81       	ld	r22, Z
    21a8:	71 81       	ldd	r23, Z+1	; 0x01
    21aa:	82 81       	ldd	r24, Z+2	; 0x02
    21ac:	93 81       	ldd	r25, Z+3	; 0x03
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	4a ef       	ldi	r20, 0xFA	; 250
    21b4:	54 e4       	ldi	r21, 0x44	; 68
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	f8 01       	movw	r30, r16
    21c0:	80 83       	st	Z, r24
    21c2:	91 83       	std	Z+1, r25	; 0x01
    21c4:	a2 83       	std	Z+2, r26	; 0x02
    21c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21c8:	fe 01       	movw	r30, r28
    21ca:	ef 55       	subi	r30, 0x5F	; 95
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	44 f4       	brge	.+16     	; 0x21f6 <system+0xae>
		__ticks = 1;
    21e6:	fe 01       	movw	r30, r28
    21e8:	e1 56       	subi	r30, 0x61	; 97
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	91 83       	std	Z+1, r25	; 0x01
    21f2:	80 83       	st	Z, r24
    21f4:	64 c0       	rjmp	.+200    	; 0x22be <system+0x176>
	else if (__tmp > 65535)
    21f6:	fe 01       	movw	r30, r28
    21f8:	ef 55       	subi	r30, 0x5F	; 95
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	60 81       	ld	r22, Z
    21fe:	71 81       	ldd	r23, Z+1	; 0x01
    2200:	82 81       	ldd	r24, Z+2	; 0x02
    2202:	93 81       	ldd	r25, Z+3	; 0x03
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	3f ef       	ldi	r19, 0xFF	; 255
    2208:	4f e7       	ldi	r20, 0x7F	; 127
    220a:	57 e4       	ldi	r21, 0x47	; 71
    220c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2210:	18 16       	cp	r1, r24
    2212:	0c f0       	brlt	.+2      	; 0x2216 <system+0xce>
    2214:	43 c0       	rjmp	.+134    	; 0x229c <system+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2216:	fe 01       	movw	r30, r28
    2218:	eb 55       	subi	r30, 0x5B	; 91
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	93 81       	ldd	r25, Z+3	; 0x03
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e2       	ldi	r20, 0x20	; 32
    222a:	51 e4       	ldi	r21, 0x41	; 65
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	8e 01       	movw	r16, r28
    2236:	01 56       	subi	r16, 0x61	; 97
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	f8 01       	movw	r30, r16
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	80 83       	st	Z, r24
    224c:	1f c0       	rjmp	.+62     	; 0x228c <system+0x144>
    224e:	fe 01       	movw	r30, r28
    2250:	e3 56       	subi	r30, 0x63	; 99
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	88 ec       	ldi	r24, 0xC8	; 200
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	91 83       	std	Z+1, r25	; 0x01
    225a:	80 83       	st	Z, r24
    225c:	fe 01       	movw	r30, r28
    225e:	e3 56       	subi	r30, 0x63	; 99
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 81       	ld	r24, Z
    2264:	91 81       	ldd	r25, Z+1	; 0x01
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <system+0x11e>
    226a:	fe 01       	movw	r30, r28
    226c:	e3 56       	subi	r30, 0x63	; 99
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	91 83       	std	Z+1, r25	; 0x01
    2272:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	de 01       	movw	r26, r28
    2276:	a1 56       	subi	r26, 0x61	; 97
    2278:	bf 4f       	sbci	r27, 0xFF	; 255
    227a:	fe 01       	movw	r30, r28
    227c:	e1 56       	subi	r30, 0x61	; 97
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	11 96       	adiw	r26, 0x01	; 1
    2288:	9c 93       	st	X, r25
    228a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	fe 01       	movw	r30, r28
    228e:	e1 56       	subi	r30, 0x61	; 97
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	d1 f6       	brne	.-76     	; 0x224e <system+0x106>
    229a:	27 c0       	rjmp	.+78     	; 0x22ea <system+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229c:	8e 01       	movw	r16, r28
    229e:	01 56       	subi	r16, 0x61	; 97
    22a0:	1f 4f       	sbci	r17, 0xFF	; 255
    22a2:	fe 01       	movw	r30, r28
    22a4:	ef 55       	subi	r30, 0x5F	; 95
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	60 81       	ld	r22, Z
    22aa:	71 81       	ldd	r23, Z+1	; 0x01
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	93 81       	ldd	r25, Z+3	; 0x03
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	f8 01       	movw	r30, r16
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	80 83       	st	Z, r24
    22be:	de 01       	movw	r26, r28
    22c0:	a5 56       	subi	r26, 0x65	; 101
    22c2:	bf 4f       	sbci	r27, 0xFF	; 255
    22c4:	fe 01       	movw	r30, r28
    22c6:	e1 56       	subi	r30, 0x61	; 97
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	8d 93       	st	X+, r24
    22d0:	9c 93       	st	X, r25
    22d2:	fe 01       	movw	r30, r28
    22d4:	e5 56       	subi	r30, 0x65	; 101
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	91 81       	ldd	r25, Z+1	; 0x01
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <system+0x194>
    22e0:	fe 01       	movw	r30, r28
    22e2:	e5 56       	subi	r30, 0x65	; 101
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	80 83       	st	Z, r24
	_delay_ms(3 * 1000) ;

	// enter id

	LCD_voidSendCommand(0x01) ;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
	LCD_voidGoToXY(0 , 1) ;
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	61 e0       	ldi	r22, 0x01	; 1
    22f4:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
	LCD_Display("Enter ID:");
    22f8:	81 e8       	ldi	r24, 0x81	; 129
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
	USART_voidSendString("please enter your ID \r");
    2300:	8b e8       	ldi	r24, 0x8B	; 139
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>

	u8 R_num ;

	while(1)
	{
		R_num = no_data;
    2308:	fe 01       	movw	r30, r28
    230a:	e7 55       	subi	r30, 0x57	; 87
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	88 ec       	ldi	r24, 0xC8	; 200
    2310:	80 83       	st	Z, r24
		R_num = USART_u8Receive();
    2312:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <USART_u8Receive>
    2316:	fe 01       	movw	r30, r28
    2318:	e7 55       	subi	r30, 0x57	; 87
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	80 83       	st	Z, r24
		//USART_voidTransmit(R_num);

		if(state == 0)
    231e:	80 91 52 05 	lds	r24, 0x0552
    2322:	88 23       	and	r24, r24
    2324:	09 f0       	breq	.+2      	; 0x2328 <system+0x1e0>
    2326:	35 c2       	rjmp	.+1130   	; 0x2792 <system+0x64a>
		{

			if(R_num != no_data && (R_num == '0' || R_num == '1' || R_num == '2' || R_num == '3' || R_num == '4' || R_num == '5' || R_num == '6' || R_num == '7' || R_num == '8' || R_num == '9'))
    2328:	fe 01       	movw	r30, r28
    232a:	e7 55       	subi	r30, 0x57	; 87
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	80 81       	ld	r24, Z
    2330:	88 3c       	cpi	r24, 0xC8	; 200
    2332:	09 f4       	brne	.+2      	; 0x2336 <system+0x1ee>
    2334:	64 c0       	rjmp	.+200    	; 0x23fe <system+0x2b6>
    2336:	fe 01       	movw	r30, r28
    2338:	e7 55       	subi	r30, 0x57	; 87
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	80 81       	ld	r24, Z
    233e:	80 33       	cpi	r24, 0x30	; 48
    2340:	b1 f1       	breq	.+108    	; 0x23ae <system+0x266>
    2342:	fe 01       	movw	r30, r28
    2344:	e7 55       	subi	r30, 0x57	; 87
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	81 33       	cpi	r24, 0x31	; 49
    234c:	81 f1       	breq	.+96     	; 0x23ae <system+0x266>
    234e:	fe 01       	movw	r30, r28
    2350:	e7 55       	subi	r30, 0x57	; 87
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 81       	ld	r24, Z
    2356:	82 33       	cpi	r24, 0x32	; 50
    2358:	51 f1       	breq	.+84     	; 0x23ae <system+0x266>
    235a:	fe 01       	movw	r30, r28
    235c:	e7 55       	subi	r30, 0x57	; 87
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	83 33       	cpi	r24, 0x33	; 51
    2364:	21 f1       	breq	.+72     	; 0x23ae <system+0x266>
    2366:	fe 01       	movw	r30, r28
    2368:	e7 55       	subi	r30, 0x57	; 87
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	84 33       	cpi	r24, 0x34	; 52
    2370:	f1 f0       	breq	.+60     	; 0x23ae <system+0x266>
    2372:	fe 01       	movw	r30, r28
    2374:	e7 55       	subi	r30, 0x57	; 87
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 81       	ld	r24, Z
    237a:	85 33       	cpi	r24, 0x35	; 53
    237c:	c1 f0       	breq	.+48     	; 0x23ae <system+0x266>
    237e:	fe 01       	movw	r30, r28
    2380:	e7 55       	subi	r30, 0x57	; 87
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	86 33       	cpi	r24, 0x36	; 54
    2388:	91 f0       	breq	.+36     	; 0x23ae <system+0x266>
    238a:	fe 01       	movw	r30, r28
    238c:	e7 55       	subi	r30, 0x57	; 87
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	87 33       	cpi	r24, 0x37	; 55
    2394:	61 f0       	breq	.+24     	; 0x23ae <system+0x266>
    2396:	fe 01       	movw	r30, r28
    2398:	e7 55       	subi	r30, 0x57	; 87
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 81       	ld	r24, Z
    239e:	88 33       	cpi	r24, 0x38	; 56
    23a0:	31 f0       	breq	.+12     	; 0x23ae <system+0x266>
    23a2:	fe 01       	movw	r30, r28
    23a4:	e7 55       	subi	r30, 0x57	; 87
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 81       	ld	r24, Z
    23aa:	89 33       	cpi	r24, 0x39	; 57
    23ac:	41 f5       	brne	.+80     	; 0x23fe <system+0x2b6>
			{
				id = 10 * id + (u16)(R_num - '0') ;
    23ae:	80 91 4e 05 	lds	r24, 0x054E
    23b2:	90 91 4f 05 	lds	r25, 0x054F
    23b6:	9c 01       	movw	r18, r24
    23b8:	22 0f       	add	r18, r18
    23ba:	33 1f       	adc	r19, r19
    23bc:	c9 01       	movw	r24, r18
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	28 0f       	add	r18, r24
    23c8:	39 1f       	adc	r19, r25
    23ca:	fe 01       	movw	r30, r28
    23cc:	e7 55       	subi	r30, 0x57	; 87
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	80 81       	ld	r24, Z
    23d2:	88 2f       	mov	r24, r24
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	82 0f       	add	r24, r18
    23d8:	93 1f       	adc	r25, r19
    23da:	c0 97       	sbiw	r24, 0x30	; 48
    23dc:	90 93 4f 05 	sts	0x054F, r25
    23e0:	80 93 4e 05 	sts	0x054E, r24
				LCD_voidWriteData(R_num);
    23e4:	fe 01       	movw	r30, r28
    23e6:	e7 55       	subi	r30, 0x57	; 87
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	80 81       	ld	r24, Z
    23ec:	0e 94 90 0c 	call	0x1920	; 0x1920 <LCD_voidWriteData>
				USART_voidTransmit(R_num);
    23f0:	fe 01       	movw	r30, r28
    23f2:	e7 55       	subi	r30, 0x57	; 87
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 81       	ld	r24, Z
    23f8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <USART_voidTransmit>
    23fc:	85 cf       	rjmp	.-246    	; 0x2308 <system+0x1c0>
			}

			else if(R_num != no_data && R_num == '=')
    23fe:	fe 01       	movw	r30, r28
    2400:	e7 55       	subi	r30, 0x57	; 87
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	88 3c       	cpi	r24, 0xC8	; 200
    2408:	09 f4       	brne	.+2      	; 0x240c <system+0x2c4>
    240a:	7e cf       	rjmp	.-260    	; 0x2308 <system+0x1c0>
    240c:	fe 01       	movw	r30, r28
    240e:	e7 55       	subi	r30, 0x57	; 87
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 81       	ld	r24, Z
    2414:	8d 33       	cpi	r24, 0x3D	; 61
    2416:	09 f0       	breq	.+2      	; 0x241a <system+0x2d2>
    2418:	77 cf       	rjmp	.-274    	; 0x2308 <system+0x1c0>
			{
				 state = 1 ;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	80 93 52 05 	sts	0x0552, r24
				 arr_id = id_arr(id);
    2420:	80 91 4e 05 	lds	r24, 0x054E
    2424:	90 91 4f 05 	lds	r25, 0x054F
    2428:	0e 94 34 1b 	call	0x3668	; 0x3668 <id_arr>
    242c:	fe 01       	movw	r30, r28
    242e:	e4 55       	subi	r30, 0x54	; 84
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
				 id_copy = id ;
    2436:	80 91 4e 05 	lds	r24, 0x054E
    243a:	90 91 4f 05 	lds	r25, 0x054F
    243e:	90 93 60 05 	sts	0x0560, r25
    2442:	80 93 5f 05 	sts	0x055F, r24
    2446:	13 c0       	rjmp	.+38     	; 0x246e <system+0x326>
				 while(id_copy != 0)
				 {
					id_copy /= 10 ;
    2448:	80 91 5f 05 	lds	r24, 0x055F
    244c:	90 91 60 05 	lds	r25, 0x0560
    2450:	2a e0       	ldi	r18, 0x0A	; 10
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	b9 01       	movw	r22, r18
    2456:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    245a:	cb 01       	movw	r24, r22
    245c:	90 93 60 05 	sts	0x0560, r25
    2460:	80 93 5f 05 	sts	0x055F, r24
					id_digit += 1 ;
    2464:	80 91 4c 05 	lds	r24, 0x054C
    2468:	8f 5f       	subi	r24, 0xFF	; 255
    246a:	80 93 4c 05 	sts	0x054C, r24
			else if(R_num != no_data && R_num == '=')
			{
				 state = 1 ;
				 arr_id = id_arr(id);
				 id_copy = id ;
				 while(id_copy != 0)
    246e:	80 91 5f 05 	lds	r24, 0x055F
    2472:	90 91 60 05 	lds	r25, 0x0560
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	39 f7       	brne	.-50     	; 0x2448 <system+0x300>
				 {
					id_copy /= 10 ;
					id_digit += 1 ;
				 }

				if(id_digit == 4)
    247a:	80 91 4c 05 	lds	r24, 0x054C
    247e:	84 30       	cpi	r24, 0x04	; 4
    2480:	09 f0       	breq	.+2      	; 0x2484 <system+0x33c>
    2482:	c3 c0       	rjmp	.+390    	; 0x260a <system+0x4c2>
    2484:	fe 01       	movw	r30, r28
    2486:	e9 56       	subi	r30, 0x69	; 105
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	aa e7       	ldi	r26, 0x7A	; 122
    2490:	b4 e4       	ldi	r27, 0x44	; 68
    2492:	80 83       	st	Z, r24
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	a2 83       	std	Z+2, r26	; 0x02
    2498:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249a:	8e 01       	movw	r16, r28
    249c:	0d 56       	subi	r16, 0x6D	; 109
    249e:	1f 4f       	sbci	r17, 0xFF	; 255
    24a0:	fe 01       	movw	r30, r28
    24a2:	e9 56       	subi	r30, 0x69	; 105
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	60 81       	ld	r22, Z
    24a8:	71 81       	ldd	r23, Z+1	; 0x01
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	4a ef       	ldi	r20, 0xFA	; 250
    24b4:	54 e4       	ldi	r21, 0x44	; 68
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	f8 01       	movw	r30, r16
    24c0:	80 83       	st	Z, r24
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	a2 83       	std	Z+2, r26	; 0x02
    24c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24c8:	fe 01       	movw	r30, r28
    24ca:	ed 56       	subi	r30, 0x6D	; 109
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	60 81       	ld	r22, Z
    24d0:	71 81       	ldd	r23, Z+1	; 0x01
    24d2:	82 81       	ldd	r24, Z+2	; 0x02
    24d4:	93 81       	ldd	r25, Z+3	; 0x03
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e2:	88 23       	and	r24, r24
    24e4:	44 f4       	brge	.+16     	; 0x24f6 <system+0x3ae>
		__ticks = 1;
    24e6:	fe 01       	movw	r30, r28
    24e8:	ef 56       	subi	r30, 0x6F	; 111
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	80 83       	st	Z, r24
    24f4:	64 c0       	rjmp	.+200    	; 0x25be <system+0x476>
	else if (__tmp > 65535)
    24f6:	fe 01       	movw	r30, r28
    24f8:	ed 56       	subi	r30, 0x6D	; 109
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	60 81       	ld	r22, Z
    24fe:	71 81       	ldd	r23, Z+1	; 0x01
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	93 81       	ldd	r25, Z+3	; 0x03
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	3f ef       	ldi	r19, 0xFF	; 255
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	57 e4       	ldi	r21, 0x47	; 71
    250c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2510:	18 16       	cp	r1, r24
    2512:	0c f0       	brlt	.+2      	; 0x2516 <system+0x3ce>
    2514:	43 c0       	rjmp	.+134    	; 0x259c <system+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2516:	fe 01       	movw	r30, r28
    2518:	e9 56       	subi	r30, 0x69	; 105
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	60 81       	ld	r22, Z
    251e:	71 81       	ldd	r23, Z+1	; 0x01
    2520:	82 81       	ldd	r24, Z+2	; 0x02
    2522:	93 81       	ldd	r25, Z+3	; 0x03
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e2       	ldi	r20, 0x20	; 32
    252a:	51 e4       	ldi	r21, 0x41	; 65
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8e 01       	movw	r16, r28
    2536:	0f 56       	subi	r16, 0x6F	; 111
    2538:	1f 4f       	sbci	r17, 0xFF	; 255
    253a:	bc 01       	movw	r22, r24
    253c:	cd 01       	movw	r24, r26
    253e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	f8 01       	movw	r30, r16
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	80 83       	st	Z, r24
    254c:	1f c0       	rjmp	.+62     	; 0x258c <system+0x444>
    254e:	fe 01       	movw	r30, r28
    2550:	e1 57       	subi	r30, 0x71	; 113
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	88 ec       	ldi	r24, 0xC8	; 200
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	80 83       	st	Z, r24
    255c:	fe 01       	movw	r30, r28
    255e:	e1 57       	subi	r30, 0x71	; 113
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <system+0x41e>
    256a:	fe 01       	movw	r30, r28
    256c:	e1 57       	subi	r30, 0x71	; 113
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2574:	de 01       	movw	r26, r28
    2576:	af 56       	subi	r26, 0x6F	; 111
    2578:	bf 4f       	sbci	r27, 0xFF	; 255
    257a:	fe 01       	movw	r30, r28
    257c:	ef 56       	subi	r30, 0x6F	; 111
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	11 96       	adiw	r26, 0x01	; 1
    2588:	9c 93       	st	X, r25
    258a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	fe 01       	movw	r30, r28
    258e:	ef 56       	subi	r30, 0x6F	; 111
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	d1 f6       	brne	.-76     	; 0x254e <system+0x406>
    259a:	27 c0       	rjmp	.+78     	; 0x25ea <system+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259c:	8e 01       	movw	r16, r28
    259e:	0f 56       	subi	r16, 0x6F	; 111
    25a0:	1f 4f       	sbci	r17, 0xFF	; 255
    25a2:	fe 01       	movw	r30, r28
    25a4:	ed 56       	subi	r30, 0x6D	; 109
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	60 81       	ld	r22, Z
    25aa:	71 81       	ldd	r23, Z+1	; 0x01
    25ac:	82 81       	ldd	r24, Z+2	; 0x02
    25ae:	93 81       	ldd	r25, Z+3	; 0x03
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	f8 01       	movw	r30, r16
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	80 83       	st	Z, r24
    25be:	de 01       	movw	r26, r28
    25c0:	a3 57       	subi	r26, 0x73	; 115
    25c2:	bf 4f       	sbci	r27, 0xFF	; 255
    25c4:	fe 01       	movw	r30, r28
    25c6:	ef 56       	subi	r30, 0x6F	; 111
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	80 81       	ld	r24, Z
    25cc:	91 81       	ldd	r25, Z+1	; 0x01
    25ce:	8d 93       	st	X+, r24
    25d0:	9c 93       	st	X, r25
    25d2:	fe 01       	movw	r30, r28
    25d4:	e3 57       	subi	r30, 0x73	; 115
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <system+0x494>
    25e0:	fe 01       	movw	r30, r28
    25e2:	e3 57       	subi	r30, 0x73	; 115
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	80 83       	st	Z, r24
				{

					_delay_ms(1000);
					LCD_voidSendCommand(0x01);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
					LCD_voidGoToXY(0, 1) ;
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	61 e0       	ldi	r22, 0x01	; 1
    25f4:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
					LCD_Display("Password:");
    25f8:	82 ea       	ldi	r24, 0xA2	; 162
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
					USART_voidSendString("\rThanks, Now Enter Your Password \r");
    2600:	8c ea       	ldi	r24, 0xAC	; 172
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
    2608:	7f ce       	rjmp	.-770    	; 0x2308 <system+0x1c0>
					//SEVENSEGMENT_voidSetNumber(0 , PORTB);
				}

				else
				{
					LCD_voidGoToXY(1, 2) ;
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	62 e0       	ldi	r22, 0x02	; 2
    260e:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
					LCD_Display("ID Invalid!\r");
    2612:	8f ec       	ldi	r24, 0xCF	; 207
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
					USART_voidSendString("\ryour ID is Invalid Sorry we have to close the system\r");
    261a:	8c ed       	ldi	r24, 0xDC	; 220
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
    2622:	fe 01       	movw	r30, r28
    2624:	e7 57       	subi	r30, 0x77	; 119
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e8       	ldi	r25, 0x80	; 128
    262c:	ab e3       	ldi	r26, 0x3B	; 59
    262e:	b5 e4       	ldi	r27, 0x45	; 69
    2630:	80 83       	st	Z, r24
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	a2 83       	std	Z+2, r26	; 0x02
    2636:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2638:	8e 01       	movw	r16, r28
    263a:	0b 57       	subi	r16, 0x7B	; 123
    263c:	1f 4f       	sbci	r17, 0xFF	; 255
    263e:	fe 01       	movw	r30, r28
    2640:	e7 57       	subi	r30, 0x77	; 119
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	60 81       	ld	r22, Z
    2646:	71 81       	ldd	r23, Z+1	; 0x01
    2648:	82 81       	ldd	r24, Z+2	; 0x02
    264a:	93 81       	ldd	r25, Z+3	; 0x03
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	4a ef       	ldi	r20, 0xFA	; 250
    2652:	54 e4       	ldi	r21, 0x44	; 68
    2654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	f8 01       	movw	r30, r16
    265e:	80 83       	st	Z, r24
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	a2 83       	std	Z+2, r26	; 0x02
    2664:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2666:	fe 01       	movw	r30, r28
    2668:	eb 57       	subi	r30, 0x7B	; 123
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	60 81       	ld	r22, Z
    266e:	71 81       	ldd	r23, Z+1	; 0x01
    2670:	82 81       	ldd	r24, Z+2	; 0x02
    2672:	93 81       	ldd	r25, Z+3	; 0x03
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e8       	ldi	r20, 0x80	; 128
    267a:	5f e3       	ldi	r21, 0x3F	; 63
    267c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2680:	88 23       	and	r24, r24
    2682:	44 f4       	brge	.+16     	; 0x2694 <system+0x54c>
		__ticks = 1;
    2684:	fe 01       	movw	r30, r28
    2686:	ed 57       	subi	r30, 0x7D	; 125
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	80 83       	st	Z, r24
    2692:	64 c0       	rjmp	.+200    	; 0x275c <system+0x614>
	else if (__tmp > 65535)
    2694:	fe 01       	movw	r30, r28
    2696:	eb 57       	subi	r30, 0x7B	; 123
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	60 81       	ld	r22, Z
    269c:	71 81       	ldd	r23, Z+1	; 0x01
    269e:	82 81       	ldd	r24, Z+2	; 0x02
    26a0:	93 81       	ldd	r25, Z+3	; 0x03
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	3f ef       	ldi	r19, 0xFF	; 255
    26a6:	4f e7       	ldi	r20, 0x7F	; 127
    26a8:	57 e4       	ldi	r21, 0x47	; 71
    26aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ae:	18 16       	cp	r1, r24
    26b0:	0c f0       	brlt	.+2      	; 0x26b4 <system+0x56c>
    26b2:	43 c0       	rjmp	.+134    	; 0x273a <system+0x5f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b4:	fe 01       	movw	r30, r28
    26b6:	e7 57       	subi	r30, 0x77	; 119
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	60 81       	ld	r22, Z
    26bc:	71 81       	ldd	r23, Z+1	; 0x01
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	93 81       	ldd	r25, Z+3	; 0x03
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	51 e4       	ldi	r21, 0x41	; 65
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	8e 01       	movw	r16, r28
    26d4:	0d 57       	subi	r16, 0x7D	; 125
    26d6:	1f 4f       	sbci	r17, 0xFF	; 255
    26d8:	bc 01       	movw	r22, r24
    26da:	cd 01       	movw	r24, r26
    26dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	f8 01       	movw	r30, r16
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	80 83       	st	Z, r24
    26ea:	1f c0       	rjmp	.+62     	; 0x272a <system+0x5e2>
    26ec:	fe 01       	movw	r30, r28
    26ee:	ef 57       	subi	r30, 0x7F	; 127
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	88 ec       	ldi	r24, 0xC8	; 200
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	80 83       	st	Z, r24
    26fa:	fe 01       	movw	r30, r28
    26fc:	ef 57       	subi	r30, 0x7F	; 127
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	91 81       	ldd	r25, Z+1	; 0x01
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <system+0x5bc>
    2708:	fe 01       	movw	r30, r28
    270a:	ef 57       	subi	r30, 0x7F	; 127
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	de 01       	movw	r26, r28
    2714:	ad 57       	subi	r26, 0x7D	; 125
    2716:	bf 4f       	sbci	r27, 0xFF	; 255
    2718:	fe 01       	movw	r30, r28
    271a:	ed 57       	subi	r30, 0x7D	; 125
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	80 81       	ld	r24, Z
    2720:	91 81       	ldd	r25, Z+1	; 0x01
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	11 96       	adiw	r26, 0x01	; 1
    2726:	9c 93       	st	X, r25
    2728:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272a:	fe 01       	movw	r30, r28
    272c:	ed 57       	subi	r30, 0x7D	; 125
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 81       	ld	r24, Z
    2732:	91 81       	ldd	r25, Z+1	; 0x01
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	d1 f6       	brne	.-76     	; 0x26ec <system+0x5a4>
    2738:	27 c0       	rjmp	.+78     	; 0x2788 <system+0x640>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273a:	8e 01       	movw	r16, r28
    273c:	0d 57       	subi	r16, 0x7D	; 125
    273e:	1f 4f       	sbci	r17, 0xFF	; 255
    2740:	fe 01       	movw	r30, r28
    2742:	eb 57       	subi	r30, 0x7B	; 123
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	60 81       	ld	r22, Z
    2748:	71 81       	ldd	r23, Z+1	; 0x01
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	f8 01       	movw	r30, r16
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	80 83       	st	Z, r24
    275c:	de 01       	movw	r26, r28
    275e:	a1 58       	subi	r26, 0x81	; 129
    2760:	bf 4f       	sbci	r27, 0xFF	; 255
    2762:	fe 01       	movw	r30, r28
    2764:	ed 57       	subi	r30, 0x7D	; 125
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 81       	ld	r24, Z
    276a:	91 81       	ldd	r25, Z+1	; 0x01
    276c:	8d 93       	st	X+, r24
    276e:	9c 93       	st	X, r25
    2770:	fe 01       	movw	r30, r28
    2772:	e1 58       	subi	r30, 0x81	; 129
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 81       	ld	r24, Z
    2778:	91 81       	ldd	r25, Z+1	; 0x01
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <system+0x632>
    277e:	fe 01       	movw	r30, r28
    2780:	e1 58       	subi	r30, 0x81	; 129
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	91 83       	std	Z+1, r25	; 0x01
    2786:	80 83       	st	Z, r24
					_delay_ms(3* 1000);
					LCD_voidSendCommand(0x01);
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
    278e:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <system+0x1508>

			 }
		}

		// GET password
		else if(state == 1)
    2792:	80 91 52 05 	lds	r24, 0x0552
    2796:	81 30       	cpi	r24, 0x01	; 1
    2798:	09 f0       	breq	.+2      	; 0x279c <system+0x654>
    279a:	7e c3       	rjmp	.+1788   	; 0x2e98 <system+0xd50>
		{
			if(R_num != no_data && (R_num == '0' || R_num == '1' || R_num == '2' || R_num == '3' || R_num == '4' || R_num == '5' || R_num == '6' || R_num == '7' || R_num == '8' || R_num == '9'))
    279c:	fe 01       	movw	r30, r28
    279e:	e7 55       	subi	r30, 0x57	; 87
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 81       	ld	r24, Z
    27a4:	88 3c       	cpi	r24, 0xC8	; 200
    27a6:	09 f4       	brne	.+2      	; 0x27aa <system+0x662>
    27a8:	64 c0       	rjmp	.+200    	; 0x2872 <system+0x72a>
    27aa:	fe 01       	movw	r30, r28
    27ac:	e7 55       	subi	r30, 0x57	; 87
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	80 33       	cpi	r24, 0x30	; 48
    27b4:	b1 f1       	breq	.+108    	; 0x2822 <system+0x6da>
    27b6:	fe 01       	movw	r30, r28
    27b8:	e7 55       	subi	r30, 0x57	; 87
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	80 81       	ld	r24, Z
    27be:	81 33       	cpi	r24, 0x31	; 49
    27c0:	81 f1       	breq	.+96     	; 0x2822 <system+0x6da>
    27c2:	fe 01       	movw	r30, r28
    27c4:	e7 55       	subi	r30, 0x57	; 87
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	82 33       	cpi	r24, 0x32	; 50
    27cc:	51 f1       	breq	.+84     	; 0x2822 <system+0x6da>
    27ce:	fe 01       	movw	r30, r28
    27d0:	e7 55       	subi	r30, 0x57	; 87
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	83 33       	cpi	r24, 0x33	; 51
    27d8:	21 f1       	breq	.+72     	; 0x2822 <system+0x6da>
    27da:	fe 01       	movw	r30, r28
    27dc:	e7 55       	subi	r30, 0x57	; 87
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 81       	ld	r24, Z
    27e2:	84 33       	cpi	r24, 0x34	; 52
    27e4:	f1 f0       	breq	.+60     	; 0x2822 <system+0x6da>
    27e6:	fe 01       	movw	r30, r28
    27e8:	e7 55       	subi	r30, 0x57	; 87
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	85 33       	cpi	r24, 0x35	; 53
    27f0:	c1 f0       	breq	.+48     	; 0x2822 <system+0x6da>
    27f2:	fe 01       	movw	r30, r28
    27f4:	e7 55       	subi	r30, 0x57	; 87
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	86 33       	cpi	r24, 0x36	; 54
    27fc:	91 f0       	breq	.+36     	; 0x2822 <system+0x6da>
    27fe:	fe 01       	movw	r30, r28
    2800:	e7 55       	subi	r30, 0x57	; 87
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	87 33       	cpi	r24, 0x37	; 55
    2808:	61 f0       	breq	.+24     	; 0x2822 <system+0x6da>
    280a:	fe 01       	movw	r30, r28
    280c:	e7 55       	subi	r30, 0x57	; 87
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 81       	ld	r24, Z
    2812:	88 33       	cpi	r24, 0x38	; 56
    2814:	31 f0       	breq	.+12     	; 0x2822 <system+0x6da>
    2816:	fe 01       	movw	r30, r28
    2818:	e7 55       	subi	r30, 0x57	; 87
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 81       	ld	r24, Z
    281e:	89 33       	cpi	r24, 0x39	; 57
    2820:	41 f5       	brne	.+80     	; 0x2872 <system+0x72a>
			{
				pass = 10 * pass + (u16)(R_num - '0') ;
    2822:	80 91 50 05 	lds	r24, 0x0550
    2826:	90 91 51 05 	lds	r25, 0x0551
    282a:	9c 01       	movw	r18, r24
    282c:	22 0f       	add	r18, r18
    282e:	33 1f       	adc	r19, r19
    2830:	c9 01       	movw	r24, r18
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	88 0f       	add	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	28 0f       	add	r18, r24
    283c:	39 1f       	adc	r19, r25
    283e:	fe 01       	movw	r30, r28
    2840:	e7 55       	subi	r30, 0x57	; 87
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	88 2f       	mov	r24, r24
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	82 0f       	add	r24, r18
    284c:	93 1f       	adc	r25, r19
    284e:	c0 97       	sbiw	r24, 0x30	; 48
    2850:	90 93 51 05 	sts	0x0551, r25
    2854:	80 93 50 05 	sts	0x0550, r24
				LCD_voidWriteData(R_num);
    2858:	fe 01       	movw	r30, r28
    285a:	e7 55       	subi	r30, 0x57	; 87
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 81       	ld	r24, Z
    2860:	0e 94 90 0c 	call	0x1920	; 0x1920 <LCD_voidWriteData>
				USART_voidTransmit(R_num);
    2864:	fe 01       	movw	r30, r28
    2866:	e7 55       	subi	r30, 0x57	; 87
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <USART_voidTransmit>
    2870:	4b cd       	rjmp	.-1386   	; 0x2308 <system+0x1c0>
			}
			else if(R_num != no_data && R_num == '=')
    2872:	fe 01       	movw	r30, r28
    2874:	e7 55       	subi	r30, 0x57	; 87
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 81       	ld	r24, Z
    287a:	88 3c       	cpi	r24, 0xC8	; 200
    287c:	09 f4       	brne	.+2      	; 0x2880 <system+0x738>
    287e:	44 cd       	rjmp	.-1400   	; 0x2308 <system+0x1c0>
    2880:	fe 01       	movw	r30, r28
    2882:	e7 55       	subi	r30, 0x57	; 87
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 81       	ld	r24, Z
    2888:	8d 33       	cpi	r24, 0x3D	; 61
    288a:	09 f0       	breq	.+2      	; 0x288e <system+0x746>
    288c:	3d cd       	rjmp	.-1414   	; 0x2308 <system+0x1c0>
			{

				arr_pass = pass_arr(pass) ;
    288e:	80 91 50 05 	lds	r24, 0x0550
    2892:	90 91 51 05 	lds	r25, 0x0551
    2896:	0e 94 66 1b 	call	0x36cc	; 0x36cc <pass_arr>
    289a:	fe 01       	movw	r30, r28
    289c:	e6 55       	subi	r30, 0x56	; 86
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	80 83       	st	Z, r24

				 pass_copy = pass ;
    28a4:	80 91 50 05 	lds	r24, 0x0550
    28a8:	90 91 51 05 	lds	r25, 0x0551
    28ac:	90 93 5e 05 	sts	0x055E, r25
    28b0:	80 93 5d 05 	sts	0x055D, r24
    28b4:	13 c0       	rjmp	.+38     	; 0x28dc <system+0x794>
				 while(pass_copy != 0)
				 {
					pass_copy /= 10 ;
    28b6:	80 91 5d 05 	lds	r24, 0x055D
    28ba:	90 91 5e 05 	lds	r25, 0x055E
    28be:	2a e0       	ldi	r18, 0x0A	; 10
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	b9 01       	movw	r22, r18
    28c4:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    28c8:	cb 01       	movw	r24, r22
    28ca:	90 93 5e 05 	sts	0x055E, r25
    28ce:	80 93 5d 05 	sts	0x055D, r24
					pass_digit += 1 ;
    28d2:	80 91 4d 05 	lds	r24, 0x054D
    28d6:	8f 5f       	subi	r24, 0xFF	; 255
    28d8:	80 93 4d 05 	sts	0x054D, r24
			{

				arr_pass = pass_arr(pass) ;

				 pass_copy = pass ;
				 while(pass_copy != 0)
    28dc:	80 91 5d 05 	lds	r24, 0x055D
    28e0:	90 91 5e 05 	lds	r25, 0x055E
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	39 f7       	brne	.-50     	; 0x28b6 <system+0x76e>
				 {
					pass_copy /= 10 ;
					pass_digit += 1 ;
				 }

				 if(pass_digit == 4 && arr_id[0] == arr_pass[3] && arr_id[1] == arr_pass[2] && arr_id[2] == arr_pass[1] && arr_id[3] == arr_pass[0])
    28e8:	80 91 4d 05 	lds	r24, 0x054D
    28ec:	84 30       	cpi	r24, 0x04	; 4
    28ee:	09 f0       	breq	.+2      	; 0x28f2 <system+0x7aa>
    28f0:	29 c1       	rjmp	.+594    	; 0x2b44 <system+0x9fc>
    28f2:	fe 01       	movw	r30, r28
    28f4:	e4 55       	subi	r30, 0x54	; 84
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	01 90       	ld	r0, Z+
    28fa:	f0 81       	ld	r31, Z
    28fc:	e0 2d       	mov	r30, r0
    28fe:	20 81       	ld	r18, Z
    2900:	fe 01       	movw	r30, r28
    2902:	e6 55       	subi	r30, 0x56	; 86
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	80 81       	ld	r24, Z
    2908:	91 81       	ldd	r25, Z+1	; 0x01
    290a:	fc 01       	movw	r30, r24
    290c:	33 96       	adiw	r30, 0x03	; 3
    290e:	80 81       	ld	r24, Z
    2910:	28 17       	cp	r18, r24
    2912:	09 f0       	breq	.+2      	; 0x2916 <system+0x7ce>
    2914:	17 c1       	rjmp	.+558    	; 0x2b44 <system+0x9fc>
    2916:	fe 01       	movw	r30, r28
    2918:	e4 55       	subi	r30, 0x54	; 84
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	fc 01       	movw	r30, r24
    2922:	31 96       	adiw	r30, 0x01	; 1
    2924:	20 81       	ld	r18, Z
    2926:	fe 01       	movw	r30, r28
    2928:	e6 55       	subi	r30, 0x56	; 86
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	fc 01       	movw	r30, r24
    2932:	32 96       	adiw	r30, 0x02	; 2
    2934:	80 81       	ld	r24, Z
    2936:	28 17       	cp	r18, r24
    2938:	09 f0       	breq	.+2      	; 0x293c <system+0x7f4>
    293a:	04 c1       	rjmp	.+520    	; 0x2b44 <system+0x9fc>
    293c:	fe 01       	movw	r30, r28
    293e:	e4 55       	subi	r30, 0x54	; 84
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	80 81       	ld	r24, Z
    2944:	91 81       	ldd	r25, Z+1	; 0x01
    2946:	fc 01       	movw	r30, r24
    2948:	32 96       	adiw	r30, 0x02	; 2
    294a:	20 81       	ld	r18, Z
    294c:	fe 01       	movw	r30, r28
    294e:	e6 55       	subi	r30, 0x56	; 86
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	80 81       	ld	r24, Z
    2954:	91 81       	ldd	r25, Z+1	; 0x01
    2956:	fc 01       	movw	r30, r24
    2958:	31 96       	adiw	r30, 0x01	; 1
    295a:	80 81       	ld	r24, Z
    295c:	28 17       	cp	r18, r24
    295e:	09 f0       	breq	.+2      	; 0x2962 <system+0x81a>
    2960:	f1 c0       	rjmp	.+482    	; 0x2b44 <system+0x9fc>
    2962:	fe 01       	movw	r30, r28
    2964:	e4 55       	subi	r30, 0x54	; 84
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	fc 01       	movw	r30, r24
    296e:	33 96       	adiw	r30, 0x03	; 3
    2970:	90 81       	ld	r25, Z
    2972:	fe 01       	movw	r30, r28
    2974:	e6 55       	subi	r30, 0x56	; 86
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	01 90       	ld	r0, Z+
    297a:	f0 81       	ld	r31, Z
    297c:	e0 2d       	mov	r30, r0
    297e:	80 81       	ld	r24, Z
    2980:	98 17       	cp	r25, r24
    2982:	09 f0       	breq	.+2      	; 0x2986 <system+0x83e>
    2984:	df c0       	rjmp	.+446    	; 0x2b44 <system+0x9fc>
				 {
					 LCD_voidSendCommand(0x01);
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
					 LCD_voidGoToXY(0, 1) ;
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
					 LCD_Display("System Unlock");
    2994:	83 e1       	ldi	r24, 0x13	; 19
    2996:	91 e0       	ldi	r25, 0x01	; 1
    2998:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
					 USART_voidSendString("\rHello Walaa how can I help you? please choose.\r");
    299c:	81 e2       	ldi	r24, 0x21	; 33
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
					 USART_voidSendString("0 - close the system \r");
    29a4:	82 e5       	ldi	r24, 0x52	; 82
    29a6:	91 e0       	ldi	r25, 0x01	; 1
    29a8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
					 USART_voidSendString("1 - turn led on \r");
    29ac:	89 e6       	ldi	r24, 0x69	; 105
    29ae:	91 e0       	ldi	r25, 0x01	; 1
    29b0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
					 USART_voidSendString("2 - turn led off \r");
    29b4:	8b e7       	ldi	r24, 0x7B	; 123
    29b6:	91 e0       	ldi	r25, 0x01	; 1
    29b8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
					 USART_voidSendString("3 - play music \r");
    29bc:	8e e8       	ldi	r24, 0x8E	; 142
    29be:	91 e0       	ldi	r25, 0x01	; 1
    29c0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
					 USART_voidSendString("4 - turn motor on \r");
    29c4:	8f e9       	ldi	r24, 0x9F	; 159
    29c6:	91 e0       	ldi	r25, 0x01	; 1
    29c8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
					 USART_voidSendString("5 - turn motor off \r");
    29cc:	83 eb       	ldi	r24, 0xB3	; 179
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
    29d4:	fe 01       	movw	r30, r28
    29d6:	e5 58       	subi	r30, 0x85	; 133
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	90 e8       	ldi	r25, 0x80	; 128
    29de:	ab e3       	ldi	r26, 0x3B	; 59
    29e0:	b5 e4       	ldi	r27, 0x45	; 69
    29e2:	80 83       	st	Z, r24
    29e4:	91 83       	std	Z+1, r25	; 0x01
    29e6:	a2 83       	std	Z+2, r26	; 0x02
    29e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ea:	8e 01       	movw	r16, r28
    29ec:	09 58       	subi	r16, 0x89	; 137
    29ee:	1f 4f       	sbci	r17, 0xFF	; 255
    29f0:	fe 01       	movw	r30, r28
    29f2:	e5 58       	subi	r30, 0x85	; 133
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	60 81       	ld	r22, Z
    29f8:	71 81       	ldd	r23, Z+1	; 0x01
    29fa:	82 81       	ldd	r24, Z+2	; 0x02
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a ef       	ldi	r20, 0xFA	; 250
    2a04:	54 e4       	ldi	r21, 0x44	; 68
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	f8 01       	movw	r30, r16
    2a10:	80 83       	st	Z, r24
    2a12:	91 83       	std	Z+1, r25	; 0x01
    2a14:	a2 83       	std	Z+2, r26	; 0x02
    2a16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e9 58       	subi	r30, 0x89	; 137
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	60 81       	ld	r22, Z
    2a20:	71 81       	ldd	r23, Z+1	; 0x01
    2a22:	82 81       	ldd	r24, Z+2	; 0x02
    2a24:	93 81       	ldd	r25, Z+3	; 0x03
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e8       	ldi	r20, 0x80	; 128
    2a2c:	5f e3       	ldi	r21, 0x3F	; 63
    2a2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a32:	88 23       	and	r24, r24
    2a34:	44 f4       	brge	.+16     	; 0x2a46 <system+0x8fe>
		__ticks = 1;
    2a36:	fe 01       	movw	r30, r28
    2a38:	eb 58       	subi	r30, 0x8B	; 139
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	91 83       	std	Z+1, r25	; 0x01
    2a42:	80 83       	st	Z, r24
    2a44:	64 c0       	rjmp	.+200    	; 0x2b0e <system+0x9c6>
	else if (__tmp > 65535)
    2a46:	fe 01       	movw	r30, r28
    2a48:	e9 58       	subi	r30, 0x89	; 137
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	60 81       	ld	r22, Z
    2a4e:	71 81       	ldd	r23, Z+1	; 0x01
    2a50:	82 81       	ldd	r24, Z+2	; 0x02
    2a52:	93 81       	ldd	r25, Z+3	; 0x03
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	3f ef       	ldi	r19, 0xFF	; 255
    2a58:	4f e7       	ldi	r20, 0x7F	; 127
    2a5a:	57 e4       	ldi	r21, 0x47	; 71
    2a5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a60:	18 16       	cp	r1, r24
    2a62:	0c f0       	brlt	.+2      	; 0x2a66 <system+0x91e>
    2a64:	43 c0       	rjmp	.+134    	; 0x2aec <system+0x9a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a66:	fe 01       	movw	r30, r28
    2a68:	e5 58       	subi	r30, 0x85	; 133
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	60 81       	ld	r22, Z
    2a6e:	71 81       	ldd	r23, Z+1	; 0x01
    2a70:	82 81       	ldd	r24, Z+2	; 0x02
    2a72:	93 81       	ldd	r25, Z+3	; 0x03
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e2       	ldi	r20, 0x20	; 32
    2a7a:	51 e4       	ldi	r21, 0x41	; 65
    2a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	8e 01       	movw	r16, r28
    2a86:	0b 58       	subi	r16, 0x8B	; 139
    2a88:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	f8 01       	movw	r30, r16
    2a98:	91 83       	std	Z+1, r25	; 0x01
    2a9a:	80 83       	st	Z, r24
    2a9c:	1f c0       	rjmp	.+62     	; 0x2adc <system+0x994>
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ed 58       	subi	r30, 0x8D	; 141
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	88 ec       	ldi	r24, 0xC8	; 200
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	80 83       	st	Z, r24
    2aac:	fe 01       	movw	r30, r28
    2aae:	ed 58       	subi	r30, 0x8D	; 141
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	91 81       	ldd	r25, Z+1	; 0x01
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <system+0x96e>
    2aba:	fe 01       	movw	r30, r28
    2abc:	ed 58       	subi	r30, 0x8D	; 141
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac4:	de 01       	movw	r26, r28
    2ac6:	ab 58       	subi	r26, 0x8B	; 139
    2ac8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aca:	fe 01       	movw	r30, r28
    2acc:	eb 58       	subi	r30, 0x8B	; 139
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 81       	ld	r24, Z
    2ad2:	91 81       	ldd	r25, Z+1	; 0x01
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	11 96       	adiw	r26, 0x01	; 1
    2ad8:	9c 93       	st	X, r25
    2ada:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2adc:	fe 01       	movw	r30, r28
    2ade:	eb 58       	subi	r30, 0x8B	; 139
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 81       	ld	r24, Z
    2ae4:	91 81       	ldd	r25, Z+1	; 0x01
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	d1 f6       	brne	.-76     	; 0x2a9e <system+0x956>
    2aea:	28 c0       	rjmp	.+80     	; 0x2b3c <system+0x9f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aec:	8e 01       	movw	r16, r28
    2aee:	0b 58       	subi	r16, 0x8B	; 139
    2af0:	1f 4f       	sbci	r17, 0xFF	; 255
    2af2:	fe 01       	movw	r30, r28
    2af4:	e9 58       	subi	r30, 0x89	; 137
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	60 81       	ld	r22, Z
    2afa:	71 81       	ldd	r23, Z+1	; 0x01
    2afc:	82 81       	ldd	r24, Z+2	; 0x02
    2afe:	93 81       	ldd	r25, Z+3	; 0x03
    2b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	f8 01       	movw	r30, r16
    2b0a:	91 83       	std	Z+1, r25	; 0x01
    2b0c:	80 83       	st	Z, r24
    2b0e:	de 01       	movw	r26, r28
    2b10:	af 58       	subi	r26, 0x8F	; 143
    2b12:	bf 4f       	sbci	r27, 0xFF	; 255
    2b14:	fe 01       	movw	r30, r28
    2b16:	eb 58       	subi	r30, 0x8B	; 139
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	80 81       	ld	r24, Z
    2b1c:	91 81       	ldd	r25, Z+1	; 0x01
    2b1e:	11 96       	adiw	r26, 0x01	; 1
    2b20:	9c 93       	st	X, r25
    2b22:	8e 93       	st	-X, r24
    2b24:	fe 01       	movw	r30, r28
    2b26:	ef 58       	subi	r30, 0x8F	; 143
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <system+0x9e6>
    2b32:	fe 01       	movw	r30, r28
    2b34:	ef 58       	subi	r30, 0x8F	; 143
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	80 83       	st	Z, r24


					 _delay_ms(3 *1000) ;

					 state = 2 ;
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	80 93 52 05 	sts	0x0552, r24
    2b42:	e2 cb       	rjmp	.-2108   	; 0x2308 <system+0x1c0>
				 }

				 else
				 {
					 if(count <= 3)
    2b44:	fe 01       	movw	r30, r28
    2b46:	e2 55       	subi	r30, 0x52	; 82
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	80 81       	ld	r24, Z
    2b4c:	84 30       	cpi	r24, 0x04	; 4
    2b4e:	08 f0       	brcs	.+2      	; 0x2b52 <system+0xa0a>
    2b50:	dd c0       	rjmp	.+442    	; 0x2d0c <system+0xbc4>
					 {
						 LCD_voidSendCommand(0x01);
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
						 LCD_voidGoToXY(0 , 1) ;
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	61 e0       	ldi	r22, 0x01	; 1
    2b5c:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
						 LCD_Display("\rTry again:\r") ;
    2b60:	88 ec       	ldi	r24, 0xC8	; 200
    2b62:	91 e0       	ldi	r25, 0x01	; 1
    2b64:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e3 59       	subi	r30, 0x93	; 147
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	aa e7       	ldi	r26, 0x7A	; 122
    2b74:	b4 e4       	ldi	r27, 0x44	; 68
    2b76:	80 83       	st	Z, r24
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	a2 83       	std	Z+2, r26	; 0x02
    2b7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7e:	8e 01       	movw	r16, r28
    2b80:	07 59       	subi	r16, 0x97	; 151
    2b82:	1f 4f       	sbci	r17, 0xFF	; 255
    2b84:	fe 01       	movw	r30, r28
    2b86:	e3 59       	subi	r30, 0x93	; 147
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	60 81       	ld	r22, Z
    2b8c:	71 81       	ldd	r23, Z+1	; 0x01
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	93 81       	ldd	r25, Z+3	; 0x03
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a ef       	ldi	r20, 0xFA	; 250
    2b98:	54 e4       	ldi	r21, 0x44	; 68
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	f8 01       	movw	r30, r16
    2ba4:	80 83       	st	Z, r24
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	a2 83       	std	Z+2, r26	; 0x02
    2baa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bac:	fe 01       	movw	r30, r28
    2bae:	e7 59       	subi	r30, 0x97	; 151
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	60 81       	ld	r22, Z
    2bb4:	71 81       	ldd	r23, Z+1	; 0x01
    2bb6:	82 81       	ldd	r24, Z+2	; 0x02
    2bb8:	93 81       	ldd	r25, Z+3	; 0x03
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e8       	ldi	r20, 0x80	; 128
    2bc0:	5f e3       	ldi	r21, 0x3F	; 63
    2bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc6:	88 23       	and	r24, r24
    2bc8:	44 f4       	brge	.+16     	; 0x2bda <system+0xa92>
		__ticks = 1;
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e9 59       	subi	r30, 0x99	; 153
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	91 83       	std	Z+1, r25	; 0x01
    2bd6:	80 83       	st	Z, r24
    2bd8:	64 c0       	rjmp	.+200    	; 0x2ca2 <system+0xb5a>
	else if (__tmp > 65535)
    2bda:	fe 01       	movw	r30, r28
    2bdc:	e7 59       	subi	r30, 0x97	; 151
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	60 81       	ld	r22, Z
    2be2:	71 81       	ldd	r23, Z+1	; 0x01
    2be4:	82 81       	ldd	r24, Z+2	; 0x02
    2be6:	93 81       	ldd	r25, Z+3	; 0x03
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	3f ef       	ldi	r19, 0xFF	; 255
    2bec:	4f e7       	ldi	r20, 0x7F	; 127
    2bee:	57 e4       	ldi	r21, 0x47	; 71
    2bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bf4:	18 16       	cp	r1, r24
    2bf6:	0c f0       	brlt	.+2      	; 0x2bfa <system+0xab2>
    2bf8:	43 c0       	rjmp	.+134    	; 0x2c80 <system+0xb38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e3 59       	subi	r30, 0x93	; 147
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	60 81       	ld	r22, Z
    2c02:	71 81       	ldd	r23, Z+1	; 0x01
    2c04:	82 81       	ldd	r24, Z+2	; 0x02
    2c06:	93 81       	ldd	r25, Z+3	; 0x03
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e2       	ldi	r20, 0x20	; 32
    2c0e:	51 e4       	ldi	r21, 0x41	; 65
    2c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	8e 01       	movw	r16, r28
    2c1a:	09 59       	subi	r16, 0x99	; 153
    2c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	f8 01       	movw	r30, r16
    2c2c:	91 83       	std	Z+1, r25	; 0x01
    2c2e:	80 83       	st	Z, r24
    2c30:	1f c0       	rjmp	.+62     	; 0x2c70 <system+0xb28>
    2c32:	fe 01       	movw	r30, r28
    2c34:	eb 59       	subi	r30, 0x9B	; 155
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	88 ec       	ldi	r24, 0xC8	; 200
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	91 83       	std	Z+1, r25	; 0x01
    2c3e:	80 83       	st	Z, r24
    2c40:	fe 01       	movw	r30, r28
    2c42:	eb 59       	subi	r30, 0x9B	; 155
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	80 81       	ld	r24, Z
    2c48:	91 81       	ldd	r25, Z+1	; 0x01
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <system+0xb02>
    2c4e:	fe 01       	movw	r30, r28
    2c50:	eb 59       	subi	r30, 0x9B	; 155
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c58:	de 01       	movw	r26, r28
    2c5a:	a9 59       	subi	r26, 0x99	; 153
    2c5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e9 59       	subi	r30, 0x99	; 153
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	80 81       	ld	r24, Z
    2c66:	91 81       	ldd	r25, Z+1	; 0x01
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	11 96       	adiw	r26, 0x01	; 1
    2c6c:	9c 93       	st	X, r25
    2c6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c70:	fe 01       	movw	r30, r28
    2c72:	e9 59       	subi	r30, 0x99	; 153
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	00 97       	sbiw	r24, 0x00	; 0
    2c7c:	d1 f6       	brne	.-76     	; 0x2c32 <system+0xaea>
    2c7e:	27 c0       	rjmp	.+78     	; 0x2cce <system+0xb86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c80:	8e 01       	movw	r16, r28
    2c82:	09 59       	subi	r16, 0x99	; 153
    2c84:	1f 4f       	sbci	r17, 0xFF	; 255
    2c86:	fe 01       	movw	r30, r28
    2c88:	e7 59       	subi	r30, 0x97	; 151
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	60 81       	ld	r22, Z
    2c8e:	71 81       	ldd	r23, Z+1	; 0x01
    2c90:	82 81       	ldd	r24, Z+2	; 0x02
    2c92:	93 81       	ldd	r25, Z+3	; 0x03
    2c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	f8 01       	movw	r30, r16
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	80 83       	st	Z, r24
    2ca2:	de 01       	movw	r26, r28
    2ca4:	ad 59       	subi	r26, 0x9D	; 157
    2ca6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e9 59       	subi	r30, 0x99	; 153
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	91 81       	ldd	r25, Z+1	; 0x01
    2cb2:	8d 93       	st	X+, r24
    2cb4:	9c 93       	st	X, r25
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	ed 59       	subi	r30, 0x9D	; 157
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 81       	ld	r24, Z
    2cbe:	91 81       	ldd	r25, Z+1	; 0x01
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <system+0xb78>
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	ed 59       	subi	r30, 0x9D	; 157
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	91 83       	std	Z+1, r25	; 0x01
    2ccc:	80 83       	st	Z, r24


						 _delay_ms(1000);

						 LCD_voidGoToXY(1, 1) ;
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	61 e0       	ldi	r22, 0x01	; 1
    2cd2:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
						 LCD_Display("Password:") ;
    2cd6:	82 ea       	ldi	r24, 0xA2	; 162
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
						 USART_voidSendString("\ryou entered A wrong password pleaase Try Again\r");
    2cde:	85 ed       	ldi	r24, 0xD5	; 213
    2ce0:	91 e0       	ldi	r25, 0x01	; 1
    2ce2:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
						 count += 1;
    2ce6:	de 01       	movw	r26, r28
    2ce8:	a2 55       	subi	r26, 0x52	; 82
    2cea:	bf 4f       	sbci	r27, 0xFF	; 255
    2cec:	fe 01       	movw	r30, r28
    2cee:	e2 55       	subi	r30, 0x52	; 82
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	8f 5f       	subi	r24, 0xFF	; 255
    2cf6:	8c 93       	st	X, r24
						 state = 1;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	80 93 52 05 	sts	0x0552, r24
						 pass = 0;
    2cfe:	10 92 51 05 	sts	0x0551, r1
    2d02:	10 92 50 05 	sts	0x0550, r1
						 pass_digit = 0;
    2d06:	10 92 4d 05 	sts	0x054D, r1
    2d0a:	fe ca       	rjmp	.-2564   	; 0x2308 <system+0x1c0>
						 continue ;
					 }
					 else
					 {
						 LCD_voidSendCommand(0x01);
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
						 LCD_voidGoToXY(0, 3) ;
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	63 e0       	ldi	r22, 0x03	; 3
    2d16:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
						 LCD_Display("you have entered wrong password 3 times , Bye Bye") ;
    2d1a:	86 e0       	ldi	r24, 0x06	; 6
    2d1c:	92 e0       	ldi	r25, 0x02	; 2
    2d1e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
						 USART_voidSendString("\ryou have entered wrong password 3 times , Bye Bye\r");
    2d22:	88 e3       	ldi	r24, 0x38	; 56
    2d24:	92 e0       	ldi	r25, 0x02	; 2
    2d26:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e1 5a       	subi	r30, 0xA1	; 161
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e8       	ldi	r25, 0x80	; 128
    2d34:	ab e3       	ldi	r26, 0x3B	; 59
    2d36:	b5 e4       	ldi	r27, 0x45	; 69
    2d38:	80 83       	st	Z, r24
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	a2 83       	std	Z+2, r26	; 0x02
    2d3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d40:	8e 01       	movw	r16, r28
    2d42:	05 5a       	subi	r16, 0xA5	; 165
    2d44:	1f 4f       	sbci	r17, 0xFF	; 255
    2d46:	fe 01       	movw	r30, r28
    2d48:	e1 5a       	subi	r30, 0xA1	; 161
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	4a ef       	ldi	r20, 0xFA	; 250
    2d5a:	54 e4       	ldi	r21, 0x44	; 68
    2d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	f8 01       	movw	r30, r16
    2d66:	80 83       	st	Z, r24
    2d68:	91 83       	std	Z+1, r25	; 0x01
    2d6a:	a2 83       	std	Z+2, r26	; 0x02
    2d6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e5 5a       	subi	r30, 0xA5	; 165
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	60 81       	ld	r22, Z
    2d76:	71 81       	ldd	r23, Z+1	; 0x01
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e8       	ldi	r20, 0x80	; 128
    2d82:	5f e3       	ldi	r21, 0x3F	; 63
    2d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d88:	88 23       	and	r24, r24
    2d8a:	44 f4       	brge	.+16     	; 0x2d9c <system+0xc54>
		__ticks = 1;
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e7 5a       	subi	r30, 0xA7	; 167
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	91 83       	std	Z+1, r25	; 0x01
    2d98:	80 83       	st	Z, r24
    2d9a:	64 c0       	rjmp	.+200    	; 0x2e64 <system+0xd1c>
	else if (__tmp > 65535)
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e5 5a       	subi	r30, 0xA5	; 165
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	3f ef       	ldi	r19, 0xFF	; 255
    2dae:	4f e7       	ldi	r20, 0x7F	; 127
    2db0:	57 e4       	ldi	r21, 0x47	; 71
    2db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db6:	18 16       	cp	r1, r24
    2db8:	0c f0       	brlt	.+2      	; 0x2dbc <system+0xc74>
    2dba:	43 c0       	rjmp	.+134    	; 0x2e42 <system+0xcfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e1 5a       	subi	r30, 0xA1	; 161
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	60 81       	ld	r22, Z
    2dc4:	71 81       	ldd	r23, Z+1	; 0x01
    2dc6:	82 81       	ldd	r24, Z+2	; 0x02
    2dc8:	93 81       	ldd	r25, Z+3	; 0x03
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e2       	ldi	r20, 0x20	; 32
    2dd0:	51 e4       	ldi	r21, 0x41	; 65
    2dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	8e 01       	movw	r16, r28
    2ddc:	07 5a       	subi	r16, 0xA7	; 167
    2dde:	1f 4f       	sbci	r17, 0xFF	; 255
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	f8 01       	movw	r30, r16
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	80 83       	st	Z, r24
    2df2:	1f c0       	rjmp	.+62     	; 0x2e32 <system+0xcea>
    2df4:	fe 01       	movw	r30, r28
    2df6:	e9 5a       	subi	r30, 0xA9	; 169
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	88 ec       	ldi	r24, 0xC8	; 200
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	91 83       	std	Z+1, r25	; 0x01
    2e00:	80 83       	st	Z, r24
    2e02:	fe 01       	movw	r30, r28
    2e04:	e9 5a       	subi	r30, 0xA9	; 169
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <system+0xcc4>
    2e10:	fe 01       	movw	r30, r28
    2e12:	e9 5a       	subi	r30, 0xA9	; 169
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	91 83       	std	Z+1, r25	; 0x01
    2e18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1a:	de 01       	movw	r26, r28
    2e1c:	a7 5a       	subi	r26, 0xA7	; 167
    2e1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e20:	fe 01       	movw	r30, r28
    2e22:	e7 5a       	subi	r30, 0xA7	; 167
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 81       	ld	r24, Z
    2e28:	91 81       	ldd	r25, Z+1	; 0x01
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	11 96       	adiw	r26, 0x01	; 1
    2e2e:	9c 93       	st	X, r25
    2e30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e32:	fe 01       	movw	r30, r28
    2e34:	e7 5a       	subi	r30, 0xA7	; 167
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 81       	ld	r24, Z
    2e3a:	91 81       	ldd	r25, Z+1	; 0x01
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	d1 f6       	brne	.-76     	; 0x2df4 <system+0xcac>
    2e40:	27 c0       	rjmp	.+78     	; 0x2e90 <system+0xd48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e42:	8e 01       	movw	r16, r28
    2e44:	07 5a       	subi	r16, 0xA7	; 167
    2e46:	1f 4f       	sbci	r17, 0xFF	; 255
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e5 5a       	subi	r30, 0xA5	; 165
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	f8 01       	movw	r30, r16
    2e60:	91 83       	std	Z+1, r25	; 0x01
    2e62:	80 83       	st	Z, r24
    2e64:	de 01       	movw	r26, r28
    2e66:	ab 5a       	subi	r26, 0xAB	; 171
    2e68:	bf 4f       	sbci	r27, 0xFF	; 255
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e7 5a       	subi	r30, 0xA7	; 167
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 81       	ld	r24, Z
    2e72:	91 81       	ldd	r25, Z+1	; 0x01
    2e74:	8d 93       	st	X+, r24
    2e76:	9c 93       	st	X, r25
    2e78:	fe 01       	movw	r30, r28
    2e7a:	eb 5a       	subi	r30, 0xAB	; 171
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	80 81       	ld	r24, Z
    2e80:	91 81       	ldd	r25, Z+1	; 0x01
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	f1 f7       	brne	.-4      	; 0x2e82 <system+0xd3a>
    2e86:	fe 01       	movw	r30, r28
    2e88:	eb 5a       	subi	r30, 0xAB	; 171
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	91 83       	std	Z+1, r25	; 0x01
    2e8e:	80 83       	st	Z, r24
						 _delay_ms(3 *1000) ;
						 LCD_voidSendCommand(0x01);
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
    2e96:	dc c3       	rjmp	.+1976   	; 0x3650 <system+0x1508>
			}
		}

		// function that control motor if password is write

		else if(state == 2)
    2e98:	80 91 52 05 	lds	r24, 0x0552
    2e9c:	82 30       	cpi	r24, 0x02	; 2
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <system+0xd5a>
    2ea0:	33 ca       	rjmp	.-2970   	; 0x2308 <system+0x1c0>
		{

			 if(R_num != no_data && (R_num == '0' ||R_num == '1' || R_num == '2' || R_num == '3' || R_num == '4' || R_num == '5'))
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e7 55       	subi	r30, 0x57	; 87
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	80 81       	ld	r24, Z
    2eaa:	88 3c       	cpi	r24, 0xC8	; 200
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <system+0xd68>
    2eae:	2c ca       	rjmp	.-2984   	; 0x2308 <system+0x1c0>
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e7 55       	subi	r30, 0x57	; 87
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	80 81       	ld	r24, Z
    2eb8:	80 33       	cpi	r24, 0x30	; 48
    2eba:	f9 f0       	breq	.+62     	; 0x2efa <system+0xdb2>
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e7 55       	subi	r30, 0x57	; 87
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	81 33       	cpi	r24, 0x31	; 49
    2ec6:	c9 f0       	breq	.+50     	; 0x2efa <system+0xdb2>
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e7 55       	subi	r30, 0x57	; 87
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	80 81       	ld	r24, Z
    2ed0:	82 33       	cpi	r24, 0x32	; 50
    2ed2:	99 f0       	breq	.+38     	; 0x2efa <system+0xdb2>
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	e7 55       	subi	r30, 0x57	; 87
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	80 81       	ld	r24, Z
    2edc:	83 33       	cpi	r24, 0x33	; 51
    2ede:	69 f0       	breq	.+26     	; 0x2efa <system+0xdb2>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e7 55       	subi	r30, 0x57	; 87
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 81       	ld	r24, Z
    2ee8:	84 33       	cpi	r24, 0x34	; 52
    2eea:	39 f0       	breq	.+14     	; 0x2efa <system+0xdb2>
    2eec:	fe 01       	movw	r30, r28
    2eee:	e7 55       	subi	r30, 0x57	; 87
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	80 81       	ld	r24, Z
    2ef4:	85 33       	cpi	r24, 0x35	; 53
    2ef6:	09 f0       	breq	.+2      	; 0x2efa <system+0xdb2>
    2ef8:	07 ca       	rjmp	.-3058   	; 0x2308 <system+0x1c0>
			 {
				 if(R_num == '1')
    2efa:	fe 01       	movw	r30, r28
    2efc:	e7 55       	subi	r30, 0x57	; 87
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 81       	ld	r24, Z
    2f02:	81 33       	cpi	r24, 0x31	; 49
    2f04:	a9 f4       	brne	.+42     	; 0x2f30 <system+0xde8>
				 {
					 LCD_voidSendCommand(0x01);
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
					 LCD_voidGoToXY(0, 1) ;
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	61 e0       	ldi	r22, 0x01	; 1
    2f10:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
					 LCD_Display("LED_ON") ;
    2f14:	8c e6       	ldi	r24, 0x6C	; 108
    2f16:	92 e0       	ldi	r25, 0x02	; 2
    2f18:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
					 USART_voidSendString("Led On\r");
    2f1c:	83 e7       	ldi	r24, 0x73	; 115
    2f1e:	92 e0       	ldi	r25, 0x02	; 2
    2f20:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
					 DIO_SetPinValue(PORTD ,PIN7, HIGH);
    2f24:	83 e0       	ldi	r24, 0x03	; 3
    2f26:	67 e0       	ldi	r22, 0x07	; 7
    2f28:	41 e0       	ldi	r20, 0x01	; 1
    2f2a:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
    2f2e:	ec c9       	rjmp	.-3112   	; 0x2308 <system+0x1c0>
				 }
				 else if(R_num == '2')
    2f30:	fe 01       	movw	r30, r28
    2f32:	e7 55       	subi	r30, 0x57	; 87
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 81       	ld	r24, Z
    2f38:	82 33       	cpi	r24, 0x32	; 50
    2f3a:	a9 f4       	brne	.+42     	; 0x2f66 <system+0xe1e>
				 {
						 LCD_voidSendCommand(0x01);
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
						 LCD_voidGoToXY(0, 1) ;
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	61 e0       	ldi	r22, 0x01	; 1
    2f46:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
						 LCD_Display("LED_OFF") ;
    2f4a:	8b e7       	ldi	r24, 0x7B	; 123
    2f4c:	92 e0       	ldi	r25, 0x02	; 2
    2f4e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
						 USART_voidSendString("Led Off\r");
    2f52:	83 e8       	ldi	r24, 0x83	; 131
    2f54:	92 e0       	ldi	r25, 0x02	; 2
    2f56:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
						 DIO_SetPinValue(PORTD ,PIN7, LOW);
    2f5a:	83 e0       	ldi	r24, 0x03	; 3
    2f5c:	67 e0       	ldi	r22, 0x07	; 7
    2f5e:	40 e0       	ldi	r20, 0x00	; 0
    2f60:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
    2f64:	d1 c9       	rjmp	.-3166   	; 0x2308 <system+0x1c0>
				 }

				else if (R_num == '3')
    2f66:	fe 01       	movw	r30, r28
    2f68:	e7 55       	subi	r30, 0x57	; 87
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	80 81       	ld	r24, Z
    2f6e:	83 33       	cpi	r24, 0x33	; 51
    2f70:	09 f0       	breq	.+2      	; 0x2f74 <system+0xe2c>
    2f72:	cd c1       	rjmp	.+922    	; 0x330e <system+0x11c6>
				{
					Timer1_voidInit();
    2f74:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <Timer1_voidInit>
					 LCD_voidSendCommand(0x01);
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
					 LCD_voidGoToXY(0, 1) ;
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	61 e0       	ldi	r22, 0x01	; 1
    2f82:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
					 LCD_Display("Play Music");
    2f86:	8c e8       	ldi	r24, 0x8C	; 140
    2f88:	92 e0       	ldi	r25, 0x02	; 2
    2f8a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
					 USART_voidSendString("Play Music\r");
    2f8e:	87 e9       	ldi	r24, 0x97	; 151
    2f90:	92 e0       	ldi	r25, 0x02	; 2
    2f92:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>

				    PlayMusic( octave, 40 );
    2f96:	89 e2       	ldi	r24, 0x29	; 41
    2f98:	95 e0       	ldi	r25, 0x05	; 5
    2f9a:	68 e2       	ldi	r22, 0x28	; 40
    2f9c:	0e 94 98 1b 	call	0x3730	; 0x3730 <PlayMusic>
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	ef 5a       	subi	r30, 0xAF	; 175
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	aa e7       	ldi	r26, 0x7A	; 122
    2fac:	b4 e4       	ldi	r27, 0x44	; 68
    2fae:	80 83       	st	Z, r24
    2fb0:	91 83       	std	Z+1, r25	; 0x01
    2fb2:	a2 83       	std	Z+2, r26	; 0x02
    2fb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb6:	8e 01       	movw	r16, r28
    2fb8:	03 5b       	subi	r16, 0xB3	; 179
    2fba:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	ef 5a       	subi	r30, 0xAF	; 175
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	60 81       	ld	r22, Z
    2fc4:	71 81       	ldd	r23, Z+1	; 0x01
    2fc6:	82 81       	ldd	r24, Z+2	; 0x02
    2fc8:	93 81       	ldd	r25, Z+3	; 0x03
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	4a ef       	ldi	r20, 0xFA	; 250
    2fd0:	54 e4       	ldi	r21, 0x44	; 68
    2fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	f8 01       	movw	r30, r16
    2fdc:	80 83       	st	Z, r24
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	a2 83       	std	Z+2, r26	; 0x02
    2fe2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	e3 5b       	subi	r30, 0xB3	; 179
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	60 81       	ld	r22, Z
    2fec:	71 81       	ldd	r23, Z+1	; 0x01
    2fee:	82 81       	ldd	r24, Z+2	; 0x02
    2ff0:	93 81       	ldd	r25, Z+3	; 0x03
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e8       	ldi	r20, 0x80	; 128
    2ff8:	5f e3       	ldi	r21, 0x3F	; 63
    2ffa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ffe:	88 23       	and	r24, r24
    3000:	44 f4       	brge	.+16     	; 0x3012 <system+0xeca>
		__ticks = 1;
    3002:	fe 01       	movw	r30, r28
    3004:	e5 5b       	subi	r30, 0xB5	; 181
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	80 83       	st	Z, r24
    3010:	64 c0       	rjmp	.+200    	; 0x30da <system+0xf92>
	else if (__tmp > 65535)
    3012:	fe 01       	movw	r30, r28
    3014:	e3 5b       	subi	r30, 0xB3	; 179
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	60 81       	ld	r22, Z
    301a:	71 81       	ldd	r23, Z+1	; 0x01
    301c:	82 81       	ldd	r24, Z+2	; 0x02
    301e:	93 81       	ldd	r25, Z+3	; 0x03
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	3f ef       	ldi	r19, 0xFF	; 255
    3024:	4f e7       	ldi	r20, 0x7F	; 127
    3026:	57 e4       	ldi	r21, 0x47	; 71
    3028:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    302c:	18 16       	cp	r1, r24
    302e:	0c f0       	brlt	.+2      	; 0x3032 <system+0xeea>
    3030:	43 c0       	rjmp	.+134    	; 0x30b8 <system+0xf70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3032:	fe 01       	movw	r30, r28
    3034:	ef 5a       	subi	r30, 0xAF	; 175
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	60 81       	ld	r22, Z
    303a:	71 81       	ldd	r23, Z+1	; 0x01
    303c:	82 81       	ldd	r24, Z+2	; 0x02
    303e:	93 81       	ldd	r25, Z+3	; 0x03
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e2       	ldi	r20, 0x20	; 32
    3046:	51 e4       	ldi	r21, 0x41	; 65
    3048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	8e 01       	movw	r16, r28
    3052:	05 5b       	subi	r16, 0xB5	; 181
    3054:	1f 4f       	sbci	r17, 0xFF	; 255
    3056:	bc 01       	movw	r22, r24
    3058:	cd 01       	movw	r24, r26
    305a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	f8 01       	movw	r30, r16
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	80 83       	st	Z, r24
    3068:	1f c0       	rjmp	.+62     	; 0x30a8 <system+0xf60>
    306a:	fe 01       	movw	r30, r28
    306c:	e7 5b       	subi	r30, 0xB7	; 183
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	88 ec       	ldi	r24, 0xC8	; 200
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	91 83       	std	Z+1, r25	; 0x01
    3076:	80 83       	st	Z, r24
    3078:	fe 01       	movw	r30, r28
    307a:	e7 5b       	subi	r30, 0xB7	; 183
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	80 81       	ld	r24, Z
    3080:	91 81       	ldd	r25, Z+1	; 0x01
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <system+0xf3a>
    3086:	fe 01       	movw	r30, r28
    3088:	e7 5b       	subi	r30, 0xB7	; 183
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	91 83       	std	Z+1, r25	; 0x01
    308e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3090:	de 01       	movw	r26, r28
    3092:	a5 5b       	subi	r26, 0xB5	; 181
    3094:	bf 4f       	sbci	r27, 0xFF	; 255
    3096:	fe 01       	movw	r30, r28
    3098:	e5 5b       	subi	r30, 0xB5	; 181
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	80 81       	ld	r24, Z
    309e:	91 81       	ldd	r25, Z+1	; 0x01
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	11 96       	adiw	r26, 0x01	; 1
    30a4:	9c 93       	st	X, r25
    30a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a8:	fe 01       	movw	r30, r28
    30aa:	e5 5b       	subi	r30, 0xB5	; 181
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	80 81       	ld	r24, Z
    30b0:	91 81       	ldd	r25, Z+1	; 0x01
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	d1 f6       	brne	.-76     	; 0x306a <system+0xf22>
    30b6:	27 c0       	rjmp	.+78     	; 0x3106 <system+0xfbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b8:	8e 01       	movw	r16, r28
    30ba:	05 5b       	subi	r16, 0xB5	; 181
    30bc:	1f 4f       	sbci	r17, 0xFF	; 255
    30be:	fe 01       	movw	r30, r28
    30c0:	e3 5b       	subi	r30, 0xB3	; 179
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	f8 01       	movw	r30, r16
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	80 83       	st	Z, r24
    30da:	de 01       	movw	r26, r28
    30dc:	a9 5b       	subi	r26, 0xB9	; 185
    30de:	bf 4f       	sbci	r27, 0xFF	; 255
    30e0:	fe 01       	movw	r30, r28
    30e2:	e5 5b       	subi	r30, 0xB5	; 181
    30e4:	ff 4f       	sbci	r31, 0xFF	; 255
    30e6:	80 81       	ld	r24, Z
    30e8:	91 81       	ldd	r25, Z+1	; 0x01
    30ea:	8d 93       	st	X+, r24
    30ec:	9c 93       	st	X, r25
    30ee:	fe 01       	movw	r30, r28
    30f0:	e9 5b       	subi	r30, 0xB9	; 185
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	80 81       	ld	r24, Z
    30f6:	91 81       	ldd	r25, Z+1	; 0x01
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	f1 f7       	brne	.-4      	; 0x30f8 <system+0xfb0>
    30fc:	fe 01       	movw	r30, r28
    30fe:	e9 5b       	subi	r30, 0xB9	; 185
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	91 83       	std	Z+1, r25	; 0x01
    3104:	80 83       	st	Z, r24
					_delay_ms(1000);

					PlayMusic( furelise, 20 );
    3106:	85 e7       	ldi	r24, 0x75	; 117
    3108:	93 e0       	ldi	r25, 0x03	; 3
    310a:	64 e1       	ldi	r22, 0x14	; 20
    310c:	0e 94 98 1b 	call	0x3730	; 0x3730 <PlayMusic>
    3110:	fe 01       	movw	r30, r28
    3112:	ed 5b       	subi	r30, 0xBD	; 189
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	aa e7       	ldi	r26, 0x7A	; 122
    311c:	b4 e4       	ldi	r27, 0x44	; 68
    311e:	80 83       	st	Z, r24
    3120:	91 83       	std	Z+1, r25	; 0x01
    3122:	a2 83       	std	Z+2, r26	; 0x02
    3124:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3126:	8e 01       	movw	r16, r28
    3128:	01 5c       	subi	r16, 0xC1	; 193
    312a:	1f 4f       	sbci	r17, 0xFF	; 255
    312c:	fe 01       	movw	r30, r28
    312e:	ed 5b       	subi	r30, 0xBD	; 189
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	60 81       	ld	r22, Z
    3134:	71 81       	ldd	r23, Z+1	; 0x01
    3136:	82 81       	ldd	r24, Z+2	; 0x02
    3138:	93 81       	ldd	r25, Z+3	; 0x03
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	4a ef       	ldi	r20, 0xFA	; 250
    3140:	54 e4       	ldi	r21, 0x44	; 68
    3142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	f8 01       	movw	r30, r16
    314c:	80 83       	st	Z, r24
    314e:	91 83       	std	Z+1, r25	; 0x01
    3150:	a2 83       	std	Z+2, r26	; 0x02
    3152:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3154:	fe 01       	movw	r30, r28
    3156:	ff 96       	adiw	r30, 0x3f	; 63
    3158:	60 81       	ld	r22, Z
    315a:	71 81       	ldd	r23, Z+1	; 0x01
    315c:	82 81       	ldd	r24, Z+2	; 0x02
    315e:	93 81       	ldd	r25, Z+3	; 0x03
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e8       	ldi	r20, 0x80	; 128
    3166:	5f e3       	ldi	r21, 0x3F	; 63
    3168:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    316c:	88 23       	and	r24, r24
    316e:	2c f4       	brge	.+10     	; 0x317a <system+0x1032>
		__ticks = 1;
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	9e af       	std	Y+62, r25	; 0x3e
    3176:	8d af       	std	Y+61, r24	; 0x3d
    3178:	46 c0       	rjmp	.+140    	; 0x3206 <system+0x10be>
	else if (__tmp > 65535)
    317a:	fe 01       	movw	r30, r28
    317c:	ff 96       	adiw	r30, 0x3f	; 63
    317e:	60 81       	ld	r22, Z
    3180:	71 81       	ldd	r23, Z+1	; 0x01
    3182:	82 81       	ldd	r24, Z+2	; 0x02
    3184:	93 81       	ldd	r25, Z+3	; 0x03
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	3f ef       	ldi	r19, 0xFF	; 255
    318a:	4f e7       	ldi	r20, 0x7F	; 127
    318c:	57 e4       	ldi	r21, 0x47	; 71
    318e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3192:	18 16       	cp	r1, r24
    3194:	64 f5       	brge	.+88     	; 0x31ee <system+0x10a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3196:	fe 01       	movw	r30, r28
    3198:	ed 5b       	subi	r30, 0xBD	; 189
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	60 81       	ld	r22, Z
    319e:	71 81       	ldd	r23, Z+1	; 0x01
    31a0:	82 81       	ldd	r24, Z+2	; 0x02
    31a2:	93 81       	ldd	r25, Z+3	; 0x03
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e2       	ldi	r20, 0x20	; 32
    31aa:	51 e4       	ldi	r21, 0x41	; 65
    31ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	9e af       	std	Y+62, r25	; 0x3e
    31c2:	8d af       	std	Y+61, r24	; 0x3d
    31c4:	0f c0       	rjmp	.+30     	; 0x31e4 <system+0x109c>
    31c6:	88 ec       	ldi	r24, 0xC8	; 200
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	9c af       	std	Y+60, r25	; 0x3c
    31cc:	8b af       	std	Y+59, r24	; 0x3b
    31ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    31d0:	9c ad       	ldd	r25, Y+60	; 0x3c
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <system+0x108a>
    31d6:	9c af       	std	Y+60, r25	; 0x3c
    31d8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31da:	8d ad       	ldd	r24, Y+61	; 0x3d
    31dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	9e af       	std	Y+62, r25	; 0x3e
    31e2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    31e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	69 f7       	brne	.-38     	; 0x31c6 <system+0x107e>
    31ec:	16 c0       	rjmp	.+44     	; 0x321a <system+0x10d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ee:	fe 01       	movw	r30, r28
    31f0:	ff 96       	adiw	r30, 0x3f	; 63
    31f2:	60 81       	ld	r22, Z
    31f4:	71 81       	ldd	r23, Z+1	; 0x01
    31f6:	82 81       	ldd	r24, Z+2	; 0x02
    31f8:	93 81       	ldd	r25, Z+3	; 0x03
    31fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	9e af       	std	Y+62, r25	; 0x3e
    3204:	8d af       	std	Y+61, r24	; 0x3d
    3206:	8d ad       	ldd	r24, Y+61	; 0x3d
    3208:	9e ad       	ldd	r25, Y+62	; 0x3e
    320a:	9a af       	std	Y+58, r25	; 0x3a
    320c:	89 af       	std	Y+57, r24	; 0x39
    320e:	89 ad       	ldd	r24, Y+57	; 0x39
    3210:	9a ad       	ldd	r25, Y+58	; 0x3a
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	f1 f7       	brne	.-4      	; 0x3212 <system+0x10ca>
    3216:	9a af       	std	Y+58, r25	; 0x3a
    3218:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(1000);

					PlayMusic( starwars, 17 );
    321a:	83 ee       	ldi	r24, 0xE3	; 227
    321c:	92 e0       	ldi	r25, 0x02	; 2
    321e:	61 e1       	ldi	r22, 0x11	; 17
    3220:	0e 94 98 1b 	call	0x3730	; 0x3730 <PlayMusic>
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	aa e7       	ldi	r26, 0x7A	; 122
    322a:	b4 e4       	ldi	r27, 0x44	; 68
    322c:	8d ab       	std	Y+53, r24	; 0x35
    322e:	9e ab       	std	Y+54, r25	; 0x36
    3230:	af ab       	std	Y+55, r26	; 0x37
    3232:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3234:	6d a9       	ldd	r22, Y+53	; 0x35
    3236:	7e a9       	ldd	r23, Y+54	; 0x36
    3238:	8f a9       	ldd	r24, Y+55	; 0x37
    323a:	98 ad       	ldd	r25, Y+56	; 0x38
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	4a ef       	ldi	r20, 0xFA	; 250
    3242:	54 e4       	ldi	r21, 0x44	; 68
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	89 ab       	std	Y+49, r24	; 0x31
    324e:	9a ab       	std	Y+50, r25	; 0x32
    3250:	ab ab       	std	Y+51, r26	; 0x33
    3252:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3254:	69 a9       	ldd	r22, Y+49	; 0x31
    3256:	7a a9       	ldd	r23, Y+50	; 0x32
    3258:	8b a9       	ldd	r24, Y+51	; 0x33
    325a:	9c a9       	ldd	r25, Y+52	; 0x34
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e8       	ldi	r20, 0x80	; 128
    3262:	5f e3       	ldi	r21, 0x3F	; 63
    3264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3268:	88 23       	and	r24, r24
    326a:	2c f4       	brge	.+10     	; 0x3276 <system+0x112e>
		__ticks = 1;
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	98 ab       	std	Y+48, r25	; 0x30
    3272:	8f a7       	std	Y+47, r24	; 0x2f
    3274:	40 c0       	rjmp	.+128    	; 0x32f6 <system+0x11ae>
	else if (__tmp > 65535)
    3276:	69 a9       	ldd	r22, Y+49	; 0x31
    3278:	7a a9       	ldd	r23, Y+50	; 0x32
    327a:	8b a9       	ldd	r24, Y+51	; 0x33
    327c:	9c a9       	ldd	r25, Y+52	; 0x34
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	3f ef       	ldi	r19, 0xFF	; 255
    3282:	4f e7       	ldi	r20, 0x7F	; 127
    3284:	57 e4       	ldi	r21, 0x47	; 71
    3286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    328a:	18 16       	cp	r1, r24
    328c:	54 f5       	brge	.+84     	; 0x32e2 <system+0x119a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328e:	6d a9       	ldd	r22, Y+53	; 0x35
    3290:	7e a9       	ldd	r23, Y+54	; 0x36
    3292:	8f a9       	ldd	r24, Y+55	; 0x37
    3294:	98 ad       	ldd	r25, Y+56	; 0x38
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e2       	ldi	r20, 0x20	; 32
    329c:	51 e4       	ldi	r21, 0x41	; 65
    329e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	98 ab       	std	Y+48, r25	; 0x30
    32b4:	8f a7       	std	Y+47, r24	; 0x2f
    32b6:	0f c0       	rjmp	.+30     	; 0x32d6 <system+0x118e>
    32b8:	88 ec       	ldi	r24, 0xC8	; 200
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	9e a7       	std	Y+46, r25	; 0x2e
    32be:	8d a7       	std	Y+45, r24	; 0x2d
    32c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    32c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <system+0x117c>
    32c8:	9e a7       	std	Y+46, r25	; 0x2e
    32ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ce:	98 a9       	ldd	r25, Y+48	; 0x30
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	98 ab       	std	Y+48, r25	; 0x30
    32d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    32d8:	98 a9       	ldd	r25, Y+48	; 0x30
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	69 f7       	brne	.-38     	; 0x32b8 <system+0x1170>
    32de:	0c 94 84 11 	jmp	0x2308	; 0x2308 <system+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e2:	69 a9       	ldd	r22, Y+49	; 0x31
    32e4:	7a a9       	ldd	r23, Y+50	; 0x32
    32e6:	8b a9       	ldd	r24, Y+51	; 0x33
    32e8:	9c a9       	ldd	r25, Y+52	; 0x34
    32ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	98 ab       	std	Y+48, r25	; 0x30
    32f4:	8f a7       	std	Y+47, r24	; 0x2f
    32f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    32f8:	98 a9       	ldd	r25, Y+48	; 0x30
    32fa:	9c a7       	std	Y+44, r25	; 0x2c
    32fc:	8b a7       	std	Y+43, r24	; 0x2b
    32fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3300:	9c a5       	ldd	r25, Y+44	; 0x2c
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	f1 f7       	brne	.-4      	; 0x3302 <system+0x11ba>
    3306:	9c a7       	std	Y+44, r25	; 0x2c
    3308:	8b a7       	std	Y+43, r24	; 0x2b
    330a:	0c 94 84 11 	jmp	0x2308	; 0x2308 <system+0x1c0>
					_delay_ms(1000);


				}
				else if(R_num == '4')
    330e:	fe 01       	movw	r30, r28
    3310:	e7 55       	subi	r30, 0x57	; 87
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	80 81       	ld	r24, Z
    3316:	84 33       	cpi	r24, 0x34	; 52
    3318:	09 f0       	breq	.+2      	; 0x331c <system+0x11d4>
    331a:	89 c0       	rjmp	.+274    	; 0x342e <system+0x12e6>
				{
					DIO_SetPinValue(PORTD , PIN6, HIGH);
    331c:	83 e0       	ldi	r24, 0x03	; 3
    331e:	66 e0       	ldi	r22, 0x06	; 6
    3320:	41 e0       	ldi	r20, 0x01	; 1
    3322:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
					 LCD_voidSendCommand(0x01);
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
					 LCD_voidGoToXY(0, 1) ;
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	61 e0       	ldi	r22, 0x01	; 1
    3330:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
					 LCD_Display("Motor On");
    3334:	83 ea       	ldi	r24, 0xA3	; 163
    3336:	92 e0       	ldi	r25, 0x02	; 2
    3338:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
					 USART_voidSendString("Motor On\r");
    333c:	8c ea       	ldi	r24, 0xAC	; 172
    333e:	92 e0       	ldi	r25, 0x02	; 2
    3340:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	90 e4       	ldi	r25, 0x40	; 64
    3348:	ac e1       	ldi	r26, 0x1C	; 28
    334a:	b6 e4       	ldi	r27, 0x46	; 70
    334c:	8f a3       	std	Y+39, r24	; 0x27
    334e:	98 a7       	std	Y+40, r25	; 0x28
    3350:	a9 a7       	std	Y+41, r26	; 0x29
    3352:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3354:	6f a1       	ldd	r22, Y+39	; 0x27
    3356:	78 a5       	ldd	r23, Y+40	; 0x28
    3358:	89 a5       	ldd	r24, Y+41	; 0x29
    335a:	9a a5       	ldd	r25, Y+42	; 0x2a
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	4a ef       	ldi	r20, 0xFA	; 250
    3362:	54 e4       	ldi	r21, 0x44	; 68
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	8b a3       	std	Y+35, r24	; 0x23
    336e:	9c a3       	std	Y+36, r25	; 0x24
    3370:	ad a3       	std	Y+37, r26	; 0x25
    3372:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3374:	6b a1       	ldd	r22, Y+35	; 0x23
    3376:	7c a1       	ldd	r23, Y+36	; 0x24
    3378:	8d a1       	ldd	r24, Y+37	; 0x25
    337a:	9e a1       	ldd	r25, Y+38	; 0x26
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	40 e8       	ldi	r20, 0x80	; 128
    3382:	5f e3       	ldi	r21, 0x3F	; 63
    3384:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3388:	88 23       	and	r24, r24
    338a:	2c f4       	brge	.+10     	; 0x3396 <system+0x124e>
		__ticks = 1;
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	9a a3       	std	Y+34, r25	; 0x22
    3392:	89 a3       	std	Y+33, r24	; 0x21
    3394:	40 c0       	rjmp	.+128    	; 0x3416 <system+0x12ce>
	else if (__tmp > 65535)
    3396:	6b a1       	ldd	r22, Y+35	; 0x23
    3398:	7c a1       	ldd	r23, Y+36	; 0x24
    339a:	8d a1       	ldd	r24, Y+37	; 0x25
    339c:	9e a1       	ldd	r25, Y+38	; 0x26
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	3f ef       	ldi	r19, 0xFF	; 255
    33a2:	4f e7       	ldi	r20, 0x7F	; 127
    33a4:	57 e4       	ldi	r21, 0x47	; 71
    33a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33aa:	18 16       	cp	r1, r24
    33ac:	54 f5       	brge	.+84     	; 0x3402 <system+0x12ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ae:	6f a1       	ldd	r22, Y+39	; 0x27
    33b0:	78 a5       	ldd	r23, Y+40	; 0x28
    33b2:	89 a5       	ldd	r24, Y+41	; 0x29
    33b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	40 e2       	ldi	r20, 0x20	; 32
    33bc:	51 e4       	ldi	r21, 0x41	; 65
    33be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	bc 01       	movw	r22, r24
    33c8:	cd 01       	movw	r24, r26
    33ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	9a a3       	std	Y+34, r25	; 0x22
    33d4:	89 a3       	std	Y+33, r24	; 0x21
    33d6:	0f c0       	rjmp	.+30     	; 0x33f6 <system+0x12ae>
    33d8:	88 ec       	ldi	r24, 0xC8	; 200
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	98 a3       	std	Y+32, r25	; 0x20
    33de:	8f 8f       	std	Y+31, r24	; 0x1f
    33e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33e2:	98 a1       	ldd	r25, Y+32	; 0x20
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	f1 f7       	brne	.-4      	; 0x33e4 <system+0x129c>
    33e8:	98 a3       	std	Y+32, r25	; 0x20
    33ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ec:	89 a1       	ldd	r24, Y+33	; 0x21
    33ee:	9a a1       	ldd	r25, Y+34	; 0x22
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	9a a3       	std	Y+34, r25	; 0x22
    33f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f6:	89 a1       	ldd	r24, Y+33	; 0x21
    33f8:	9a a1       	ldd	r25, Y+34	; 0x22
    33fa:	00 97       	sbiw	r24, 0x00	; 0
    33fc:	69 f7       	brne	.-38     	; 0x33d8 <system+0x1290>
    33fe:	0c 94 84 11 	jmp	0x2308	; 0x2308 <system+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3402:	6b a1       	ldd	r22, Y+35	; 0x23
    3404:	7c a1       	ldd	r23, Y+36	; 0x24
    3406:	8d a1       	ldd	r24, Y+37	; 0x25
    3408:	9e a1       	ldd	r25, Y+38	; 0x26
    340a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	9a a3       	std	Y+34, r25	; 0x22
    3414:	89 a3       	std	Y+33, r24	; 0x21
    3416:	89 a1       	ldd	r24, Y+33	; 0x21
    3418:	9a a1       	ldd	r25, Y+34	; 0x22
    341a:	9e 8f       	std	Y+30, r25	; 0x1e
    341c:	8d 8f       	std	Y+29, r24	; 0x1d
    341e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3420:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	f1 f7       	brne	.-4      	; 0x3422 <system+0x12da>
    3426:	9e 8f       	std	Y+30, r25	; 0x1e
    3428:	8d 8f       	std	Y+29, r24	; 0x1d
    342a:	0c 94 84 11 	jmp	0x2308	; 0x2308 <system+0x1c0>
					_delay_ms(10000);
				}
				else if(R_num == '5')
    342e:	fe 01       	movw	r30, r28
    3430:	e7 55       	subi	r30, 0x57	; 87
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	80 81       	ld	r24, Z
    3436:	85 33       	cpi	r24, 0x35	; 53
    3438:	09 f0       	breq	.+2      	; 0x343c <system+0x12f4>
    343a:	89 c0       	rjmp	.+274    	; 0x354e <system+0x1406>
				{
					DIO_SetPinValue(PORTD , PIN6, LOW);
    343c:	83 e0       	ldi	r24, 0x03	; 3
    343e:	66 e0       	ldi	r22, 0x06	; 6
    3440:	40 e0       	ldi	r20, 0x00	; 0
    3442:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_SetPinValue>
					 LCD_voidSendCommand(0x01);
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
					 LCD_voidGoToXY(0, 1) ;
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	61 e0       	ldi	r22, 0x01	; 1
    3450:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidGoToXY>
					 LCD_Display("Motor Off");
    3454:	86 eb       	ldi	r24, 0xB6	; 182
    3456:	92 e0       	ldi	r25, 0x02	; 2
    3458:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_Display>
					 USART_voidSendString("Motor Off\r");
    345c:	80 ec       	ldi	r24, 0xC0	; 192
    345e:	92 e0       	ldi	r25, 0x02	; 2
    3460:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	90 e4       	ldi	r25, 0x40	; 64
    3468:	ac e1       	ldi	r26, 0x1C	; 28
    346a:	b6 e4       	ldi	r27, 0x46	; 70
    346c:	89 8f       	std	Y+25, r24	; 0x19
    346e:	9a 8f       	std	Y+26, r25	; 0x1a
    3470:	ab 8f       	std	Y+27, r26	; 0x1b
    3472:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3474:	69 8d       	ldd	r22, Y+25	; 0x19
    3476:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3478:	8b 8d       	ldd	r24, Y+27	; 0x1b
    347a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	4a ef       	ldi	r20, 0xFA	; 250
    3482:	54 e4       	ldi	r21, 0x44	; 68
    3484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	8d 8b       	std	Y+21, r24	; 0x15
    348e:	9e 8b       	std	Y+22, r25	; 0x16
    3490:	af 8b       	std	Y+23, r26	; 0x17
    3492:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3494:	6d 89       	ldd	r22, Y+21	; 0x15
    3496:	7e 89       	ldd	r23, Y+22	; 0x16
    3498:	8f 89       	ldd	r24, Y+23	; 0x17
    349a:	98 8d       	ldd	r25, Y+24	; 0x18
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	40 e8       	ldi	r20, 0x80	; 128
    34a2:	5f e3       	ldi	r21, 0x3F	; 63
    34a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34a8:	88 23       	and	r24, r24
    34aa:	2c f4       	brge	.+10     	; 0x34b6 <system+0x136e>
		__ticks = 1;
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	9c 8b       	std	Y+20, r25	; 0x14
    34b2:	8b 8b       	std	Y+19, r24	; 0x13
    34b4:	40 c0       	rjmp	.+128    	; 0x3536 <system+0x13ee>
	else if (__tmp > 65535)
    34b6:	6d 89       	ldd	r22, Y+21	; 0x15
    34b8:	7e 89       	ldd	r23, Y+22	; 0x16
    34ba:	8f 89       	ldd	r24, Y+23	; 0x17
    34bc:	98 8d       	ldd	r25, Y+24	; 0x18
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	3f ef       	ldi	r19, 0xFF	; 255
    34c2:	4f e7       	ldi	r20, 0x7F	; 127
    34c4:	57 e4       	ldi	r21, 0x47	; 71
    34c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34ca:	18 16       	cp	r1, r24
    34cc:	54 f5       	brge	.+84     	; 0x3522 <system+0x13da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ce:	69 8d       	ldd	r22, Y+25	; 0x19
    34d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	40 e2       	ldi	r20, 0x20	; 32
    34dc:	51 e4       	ldi	r21, 0x41	; 65
    34de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	bc 01       	movw	r22, r24
    34e8:	cd 01       	movw	r24, r26
    34ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	9c 8b       	std	Y+20, r25	; 0x14
    34f4:	8b 8b       	std	Y+19, r24	; 0x13
    34f6:	0f c0       	rjmp	.+30     	; 0x3516 <system+0x13ce>
    34f8:	88 ec       	ldi	r24, 0xC8	; 200
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	9a 8b       	std	Y+18, r25	; 0x12
    34fe:	89 8b       	std	Y+17, r24	; 0x11
    3500:	89 89       	ldd	r24, Y+17	; 0x11
    3502:	9a 89       	ldd	r25, Y+18	; 0x12
    3504:	01 97       	sbiw	r24, 0x01	; 1
    3506:	f1 f7       	brne	.-4      	; 0x3504 <system+0x13bc>
    3508:	9a 8b       	std	Y+18, r25	; 0x12
    350a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    350c:	8b 89       	ldd	r24, Y+19	; 0x13
    350e:	9c 89       	ldd	r25, Y+20	; 0x14
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	9c 8b       	std	Y+20, r25	; 0x14
    3514:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3516:	8b 89       	ldd	r24, Y+19	; 0x13
    3518:	9c 89       	ldd	r25, Y+20	; 0x14
    351a:	00 97       	sbiw	r24, 0x00	; 0
    351c:	69 f7       	brne	.-38     	; 0x34f8 <system+0x13b0>
    351e:	0c 94 84 11 	jmp	0x2308	; 0x2308 <system+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3522:	6d 89       	ldd	r22, Y+21	; 0x15
    3524:	7e 89       	ldd	r23, Y+22	; 0x16
    3526:	8f 89       	ldd	r24, Y+23	; 0x17
    3528:	98 8d       	ldd	r25, Y+24	; 0x18
    352a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	9c 8b       	std	Y+20, r25	; 0x14
    3534:	8b 8b       	std	Y+19, r24	; 0x13
    3536:	8b 89       	ldd	r24, Y+19	; 0x13
    3538:	9c 89       	ldd	r25, Y+20	; 0x14
    353a:	98 8b       	std	Y+16, r25	; 0x10
    353c:	8f 87       	std	Y+15, r24	; 0x0f
    353e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3540:	98 89       	ldd	r25, Y+16	; 0x10
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	f1 f7       	brne	.-4      	; 0x3542 <system+0x13fa>
    3546:	98 8b       	std	Y+16, r25	; 0x10
    3548:	8f 87       	std	Y+15, r24	; 0x0f
    354a:	0c 94 84 11 	jmp	0x2308	; 0x2308 <system+0x1c0>
					_delay_ms(10000);
				}

				else if(R_num == '0')
    354e:	fe 01       	movw	r30, r28
    3550:	e7 55       	subi	r30, 0x57	; 87
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	80 81       	ld	r24, Z
    3556:	80 33       	cpi	r24, 0x30	; 48
    3558:	11 f0       	breq	.+4      	; 0x355e <system+0x1416>
    355a:	0c 94 84 11 	jmp	0x2308	; 0x2308 <system+0x1c0>
				{
					 USART_voidSendString("good bye, walaa");
    355e:	8b ec       	ldi	r24, 0xCB	; 203
    3560:	92 e0       	ldi	r25, 0x02	; 2
    3562:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART_voidSendString>
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	90 e8       	ldi	r25, 0x80	; 128
    356a:	ab e3       	ldi	r26, 0x3B	; 59
    356c:	b5 e4       	ldi	r27, 0x45	; 69
    356e:	8b 87       	std	Y+11, r24	; 0x0b
    3570:	9c 87       	std	Y+12, r25	; 0x0c
    3572:	ad 87       	std	Y+13, r26	; 0x0d
    3574:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3576:	6b 85       	ldd	r22, Y+11	; 0x0b
    3578:	7c 85       	ldd	r23, Y+12	; 0x0c
    357a:	8d 85       	ldd	r24, Y+13	; 0x0d
    357c:	9e 85       	ldd	r25, Y+14	; 0x0e
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	4a ef       	ldi	r20, 0xFA	; 250
    3584:	54 e4       	ldi	r21, 0x44	; 68
    3586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	8f 83       	std	Y+7, r24	; 0x07
    3590:	98 87       	std	Y+8, r25	; 0x08
    3592:	a9 87       	std	Y+9, r26	; 0x09
    3594:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3596:	6f 81       	ldd	r22, Y+7	; 0x07
    3598:	78 85       	ldd	r23, Y+8	; 0x08
    359a:	89 85       	ldd	r24, Y+9	; 0x09
    359c:	9a 85       	ldd	r25, Y+10	; 0x0a
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e8       	ldi	r20, 0x80	; 128
    35a4:	5f e3       	ldi	r21, 0x3F	; 63
    35a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35aa:	88 23       	and	r24, r24
    35ac:	2c f4       	brge	.+10     	; 0x35b8 <system+0x1470>
		__ticks = 1;
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	9e 83       	std	Y+6, r25	; 0x06
    35b4:	8d 83       	std	Y+5, r24	; 0x05
    35b6:	3f c0       	rjmp	.+126    	; 0x3636 <system+0x14ee>
	else if (__tmp > 65535)
    35b8:	6f 81       	ldd	r22, Y+7	; 0x07
    35ba:	78 85       	ldd	r23, Y+8	; 0x08
    35bc:	89 85       	ldd	r24, Y+9	; 0x09
    35be:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	3f ef       	ldi	r19, 0xFF	; 255
    35c4:	4f e7       	ldi	r20, 0x7F	; 127
    35c6:	57 e4       	ldi	r21, 0x47	; 71
    35c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35cc:	18 16       	cp	r1, r24
    35ce:	4c f5       	brge	.+82     	; 0x3622 <system+0x14da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	40 e2       	ldi	r20, 0x20	; 32
    35de:	51 e4       	ldi	r21, 0x41	; 65
    35e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	bc 01       	movw	r22, r24
    35ea:	cd 01       	movw	r24, r26
    35ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	9e 83       	std	Y+6, r25	; 0x06
    35f6:	8d 83       	std	Y+5, r24	; 0x05
    35f8:	0f c0       	rjmp	.+30     	; 0x3618 <system+0x14d0>
    35fa:	88 ec       	ldi	r24, 0xC8	; 200
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	9c 83       	std	Y+4, r25	; 0x04
    3600:	8b 83       	std	Y+3, r24	; 0x03
    3602:	8b 81       	ldd	r24, Y+3	; 0x03
    3604:	9c 81       	ldd	r25, Y+4	; 0x04
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <system+0x14be>
    360a:	9c 83       	std	Y+4, r25	; 0x04
    360c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360e:	8d 81       	ldd	r24, Y+5	; 0x05
    3610:	9e 81       	ldd	r25, Y+6	; 0x06
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	9e 83       	std	Y+6, r25	; 0x06
    3616:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3618:	8d 81       	ldd	r24, Y+5	; 0x05
    361a:	9e 81       	ldd	r25, Y+6	; 0x06
    361c:	00 97       	sbiw	r24, 0x00	; 0
    361e:	69 f7       	brne	.-38     	; 0x35fa <system+0x14b2>
    3620:	14 c0       	rjmp	.+40     	; 0x364a <system+0x1502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3622:	6f 81       	ldd	r22, Y+7	; 0x07
    3624:	78 85       	ldd	r23, Y+8	; 0x08
    3626:	89 85       	ldd	r24, Y+9	; 0x09
    3628:	9a 85       	ldd	r25, Y+10	; 0x0a
    362a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	9e 83       	std	Y+6, r25	; 0x06
    3634:	8d 83       	std	Y+5, r24	; 0x05
    3636:	8d 81       	ldd	r24, Y+5	; 0x05
    3638:	9e 81       	ldd	r25, Y+6	; 0x06
    363a:	9a 83       	std	Y+2, r25	; 0x02
    363c:	89 83       	std	Y+1, r24	; 0x01
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	9a 81       	ldd	r25, Y+2	; 0x02
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	f1 f7       	brne	.-4      	; 0x3642 <system+0x14fa>
    3646:	9a 83       	std	Y+2, r25	; 0x02
    3648:	89 83       	std	Y+1, r24	; 0x01
					 _delay_ms(3000);
					 LCD_voidSendCommand(0x01);
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_voidSendCommand>
			 }

		}

	}
}
    3650:	c2 55       	subi	r28, 0x52	; 82
    3652:	df 4f       	sbci	r29, 0xFF	; 255
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	f8 94       	cli
    3658:	de bf       	out	0x3e, r29	; 62
    365a:	0f be       	out	0x3f, r0	; 63
    365c:	cd bf       	out	0x3d, r28	; 61
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	1f 91       	pop	r17
    3664:	0f 91       	pop	r16
    3666:	08 95       	ret

00003668 <id_arr>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// function will convert id number into array of each digit

u8 * id_arr(u16 ID)
{
    3668:	df 93       	push	r29
    366a:	cf 93       	push	r28
    366c:	00 d0       	rcall	.+0      	; 0x366e <id_arr+0x6>
    366e:	0f 92       	push	r0
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
    3674:	9b 83       	std	Y+3, r25	; 0x03
    3676:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	static u8 arr[4] ;

	for(i = 5 ; i>1 ; i--)
    3678:	85 e0       	ldi	r24, 0x05	; 5
    367a:	89 83       	std	Y+1, r24	; 0x01
    367c:	1c c0       	rjmp	.+56     	; 0x36b6 <id_arr+0x4e>
	{
		arr[i-2] = (u8)(ID % 10) ;
    367e:	89 81       	ldd	r24, Y+1	; 0x01
    3680:	88 2f       	mov	r24, r24
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	fc 01       	movw	r30, r24
    3686:	32 97       	sbiw	r30, 0x02	; 2
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	9b 81       	ldd	r25, Y+3	; 0x03
    368c:	2a e0       	ldi	r18, 0x0A	; 10
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	b9 01       	movw	r22, r18
    3692:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    3696:	ed 5a       	subi	r30, 0xAD	; 173
    3698:	fa 4f       	sbci	r31, 0xFA	; 250
    369a:	80 83       	st	Z, r24
		ID = ID /10 ;
    369c:	8a 81       	ldd	r24, Y+2	; 0x02
    369e:	9b 81       	ldd	r25, Y+3	; 0x03
    36a0:	2a e0       	ldi	r18, 0x0A	; 10
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	b9 01       	movw	r22, r18
    36a6:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    36aa:	cb 01       	movw	r24, r22
    36ac:	9b 83       	std	Y+3, r25	; 0x03
    36ae:	8a 83       	std	Y+2, r24	; 0x02
u8 * id_arr(u16 ID)
{
	u8 i;
	static u8 arr[4] ;

	for(i = 5 ; i>1 ; i--)
    36b0:	89 81       	ldd	r24, Y+1	; 0x01
    36b2:	81 50       	subi	r24, 0x01	; 1
    36b4:	89 83       	std	Y+1, r24	; 0x01
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	82 30       	cpi	r24, 0x02	; 2
    36ba:	08 f7       	brcc	.-62     	; 0x367e <id_arr+0x16>
	{
		arr[i-2] = (u8)(ID % 10) ;
		ID = ID /10 ;
	}
	return arr ;
    36bc:	83 e5       	ldi	r24, 0x53	; 83
    36be:	95 e0       	ldi	r25, 0x05	; 5
}
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	cf 91       	pop	r28
    36c8:	df 91       	pop	r29
    36ca:	08 95       	ret

000036cc <pass_arr>:

// function will convert password number into array of each digit number

u8 * pass_arr(u16 password)
{
    36cc:	df 93       	push	r29
    36ce:	cf 93       	push	r28
    36d0:	00 d0       	rcall	.+0      	; 0x36d2 <pass_arr+0x6>
    36d2:	0f 92       	push	r0
    36d4:	cd b7       	in	r28, 0x3d	; 61
    36d6:	de b7       	in	r29, 0x3e	; 62
    36d8:	9b 83       	std	Y+3, r25	; 0x03
    36da:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	static u8 arr1[4] ;

	for(i = 5 ; i>1 ; i--)
    36dc:	85 e0       	ldi	r24, 0x05	; 5
    36de:	89 83       	std	Y+1, r24	; 0x01
    36e0:	1c c0       	rjmp	.+56     	; 0x371a <pass_arr+0x4e>
	{
		arr1[i-2] = (u8)(password % 10) ;
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	88 2f       	mov	r24, r24
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	fc 01       	movw	r30, r24
    36ea:	32 97       	sbiw	r30, 0x02	; 2
    36ec:	8a 81       	ldd	r24, Y+2	; 0x02
    36ee:	9b 81       	ldd	r25, Y+3	; 0x03
    36f0:	2a e0       	ldi	r18, 0x0A	; 10
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	b9 01       	movw	r22, r18
    36f6:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    36fa:	e9 5a       	subi	r30, 0xA9	; 169
    36fc:	fa 4f       	sbci	r31, 0xFA	; 250
    36fe:	80 83       	st	Z, r24
		password = password /10 ;
    3700:	8a 81       	ldd	r24, Y+2	; 0x02
    3702:	9b 81       	ldd	r25, Y+3	; 0x03
    3704:	2a e0       	ldi	r18, 0x0A	; 10
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	b9 01       	movw	r22, r18
    370a:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodhi4>
    370e:	cb 01       	movw	r24, r22
    3710:	9b 83       	std	Y+3, r25	; 0x03
    3712:	8a 83       	std	Y+2, r24	; 0x02
u8 * pass_arr(u16 password)
{
	u8 i;
	static u8 arr1[4] ;

	for(i = 5 ; i>1 ; i--)
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	81 50       	subi	r24, 0x01	; 1
    3718:	89 83       	std	Y+1, r24	; 0x01
    371a:	89 81       	ldd	r24, Y+1	; 0x01
    371c:	82 30       	cpi	r24, 0x02	; 2
    371e:	08 f7       	brcc	.-62     	; 0x36e2 <pass_arr+0x16>
	{
		arr1[i-2] = (u8)(password % 10) ;
		password = password /10 ;
	}
	return arr1 ;
    3720:	87 e5       	ldi	r24, 0x57	; 87
    3722:	95 e0       	ldi	r25, 0x05	; 5
}
    3724:	0f 90       	pop	r0
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	cf 91       	pop	r28
    372c:	df 91       	pop	r29
    372e:	08 95       	ret

00003730 <PlayMusic>:

///////////////////////////////////////////////////////////////////////

void PlayMusic( const int* pMusicNotes /** Pointer to table containing music data */,
				uint8_t tempo /** paying tempo from 0 to 100. Higher value = slower playback*/ )
{
    3730:	df 93       	push	r29
    3732:	cf 93       	push	r28
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
    3738:	65 97       	sbiw	r28, 0x15	; 21
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	f8 94       	cli
    373e:	de bf       	out	0x3e, r29	; 62
    3740:	0f be       	out	0x3f, r0	; 63
    3742:	cd bf       	out	0x3d, r28	; 61
    3744:	9c 8b       	std	Y+20, r25	; 0x14
    3746:	8b 8b       	std	Y+19, r24	; 0x13
    3748:	6d 8b       	std	Y+21, r22	; 0x15
	int duration;
	int note;
	int i;
	uint16_t delay = tempo * 1000;
    374a:	8d 89       	ldd	r24, Y+21	; 0x15
    374c:	28 2f       	mov	r18, r24
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	88 ee       	ldi	r24, 0xE8	; 232
    3752:	93 e0       	ldi	r25, 0x03	; 3
    3754:	ac 01       	movw	r20, r24
    3756:	24 9f       	mul	r18, r20
    3758:	c0 01       	movw	r24, r0
    375a:	25 9f       	mul	r18, r21
    375c:	90 0d       	add	r25, r0
    375e:	34 9f       	mul	r19, r20
    3760:	90 0d       	add	r25, r0
    3762:	11 24       	eor	r1, r1
    3764:	9c 87       	std	Y+12, r25	; 0x0c
    3766:	8b 87       	std	Y+11, r24	; 0x0b
    3768:	75 c0       	rjmp	.+234    	; 0x3854 <PlayMusic+0x124>

	while( *pMusicNotes )
	{
		note = *pMusicNotes;
    376a:	eb 89       	ldd	r30, Y+19	; 0x13
    376c:	fc 89       	ldd	r31, Y+20	; 0x14
    376e:	80 81       	ld	r24, Z
    3770:	91 81       	ldd	r25, Z+1	; 0x01
    3772:	98 8b       	std	Y+16, r25	; 0x10
    3774:	8f 87       	std	Y+15, r24	; 0x0f
		pMusicNotes++;
    3776:	8b 89       	ldd	r24, Y+19	; 0x13
    3778:	9c 89       	ldd	r25, Y+20	; 0x14
    377a:	02 96       	adiw	r24, 0x02	; 2
    377c:	9c 8b       	std	Y+20, r25	; 0x14
    377e:	8b 8b       	std	Y+19, r24	; 0x13

		duration = *pMusicNotes;
    3780:	eb 89       	ldd	r30, Y+19	; 0x13
    3782:	fc 89       	ldd	r31, Y+20	; 0x14
    3784:	80 81       	ld	r24, Z
    3786:	91 81       	ldd	r25, Z+1	; 0x01
    3788:	9a 8b       	std	Y+18, r25	; 0x12
    378a:	89 8b       	std	Y+17, r24	; 0x11
		pMusicNotes++;
    378c:	8b 89       	ldd	r24, Y+19	; 0x13
    378e:	9c 89       	ldd	r25, Y+20	; 0x14
    3790:	02 96       	adiw	r24, 0x02	; 2
    3792:	9c 8b       	std	Y+20, r25	; 0x14
    3794:	8b 8b       	std	Y+19, r24	; 0x13

		if( p == note )
    3796:	8f 85       	ldd	r24, Y+15	; 0x0f
    3798:	98 89       	ldd	r25, Y+16	; 0x10
    379a:	81 30       	cpi	r24, 0x01	; 1
    379c:	91 05       	cpc	r25, r1
    379e:	29 f4       	brne	.+10     	; 0x37aa <PlayMusic+0x7a>
		{
			//pause, do not generate any sound
			OCR1AL = 0;
    37a0:	ea e4       	ldi	r30, 0x4A	; 74
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	11 82       	std	Z+1, r1	; 0x01
    37a6:	10 82       	st	Z, r1
    37a8:	0c c0       	rjmp	.+24     	; 0x37c2 <PlayMusic+0x92>
		}
		else
		{
			//not a pause, generate tone
			OCR1AL = 100 ;
    37aa:	ea e4       	ldi	r30, 0x4A	; 74
    37ac:	f0 e0       	ldi	r31, 0x00	; 0
    37ae:	84 e6       	ldi	r24, 0x64	; 100
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	91 83       	std	Z+1, r25	; 0x01
    37b4:	80 83       	st	Z, r24

			//set frequency
			ICR1L = note;
    37b6:	e6 e4       	ldi	r30, 0x46	; 70
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    37bc:	98 89       	ldd	r25, Y+16	; 0x10
    37be:	91 83       	std	Z+1, r25	; 0x01
    37c0:	80 83       	st	Z, r24
		}

		//wait duration
		for(i=0;i<32/duration;i++)
    37c2:	1e 86       	std	Y+14, r1	; 0x0e
    37c4:	1d 86       	std	Y+13, r1	; 0x0d
    37c6:	37 c0       	rjmp	.+110    	; 0x3836 <PlayMusic+0x106>
    37c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    37ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    37cc:	9a 87       	std	Y+10, r25	; 0x0a
    37ce:	89 87       	std	Y+9, r24	; 0x09
    37d0:	89 85       	ldd	r24, Y+9	; 0x09
    37d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	f1 f7       	brne	.-4      	; 0x37d4 <PlayMusic+0xa4>
    37d8:	9a 87       	std	Y+10, r25	; 0x0a
    37da:	89 87       	std	Y+9, r24	; 0x09
    37dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    37de:	9c 85       	ldd	r25, Y+12	; 0x0c
    37e0:	98 87       	std	Y+8, r25	; 0x08
    37e2:	8f 83       	std	Y+7, r24	; 0x07
    37e4:	8f 81       	ldd	r24, Y+7	; 0x07
    37e6:	98 85       	ldd	r25, Y+8	; 0x08
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	f1 f7       	brne	.-4      	; 0x37e8 <PlayMusic+0xb8>
    37ec:	98 87       	std	Y+8, r25	; 0x08
    37ee:	8f 83       	std	Y+7, r24	; 0x07
    37f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    37f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    37f4:	9e 83       	std	Y+6, r25	; 0x06
    37f6:	8d 83       	std	Y+5, r24	; 0x05
    37f8:	8d 81       	ldd	r24, Y+5	; 0x05
    37fa:	9e 81       	ldd	r25, Y+6	; 0x06
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	f1 f7       	brne	.-4      	; 0x37fc <PlayMusic+0xcc>
    3800:	9e 83       	std	Y+6, r25	; 0x06
    3802:	8d 83       	std	Y+5, r24	; 0x05
    3804:	8b 85       	ldd	r24, Y+11	; 0x0b
    3806:	9c 85       	ldd	r25, Y+12	; 0x0c
    3808:	9c 83       	std	Y+4, r25	; 0x04
    380a:	8b 83       	std	Y+3, r24	; 0x03
    380c:	8b 81       	ldd	r24, Y+3	; 0x03
    380e:	9c 81       	ldd	r25, Y+4	; 0x04
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	f1 f7       	brne	.-4      	; 0x3810 <PlayMusic+0xe0>
    3814:	9c 83       	std	Y+4, r25	; 0x04
    3816:	8b 83       	std	Y+3, r24	; 0x03
    3818:	8b 85       	ldd	r24, Y+11	; 0x0b
    381a:	9c 85       	ldd	r25, Y+12	; 0x0c
    381c:	9a 83       	std	Y+2, r25	; 0x02
    381e:	89 83       	std	Y+1, r24	; 0x01
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	9a 81       	ldd	r25, Y+2	; 0x02
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	f1 f7       	brne	.-4      	; 0x3824 <PlayMusic+0xf4>
    3828:	9a 83       	std	Y+2, r25	; 0x02
    382a:	89 83       	std	Y+1, r24	; 0x01
    382c:	8d 85       	ldd	r24, Y+13	; 0x0d
    382e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3830:	01 96       	adiw	r24, 0x01	; 1
    3832:	9e 87       	std	Y+14, r25	; 0x0e
    3834:	8d 87       	std	Y+13, r24	; 0x0d
    3836:	80 e2       	ldi	r24, 0x20	; 32
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	29 89       	ldd	r18, Y+17	; 0x11
    383c:	3a 89       	ldd	r19, Y+18	; 0x12
    383e:	b9 01       	movw	r22, r18
    3840:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__divmodhi4>
    3844:	cb 01       	movw	r24, r22
    3846:	9c 01       	movw	r18, r24
    3848:	8d 85       	ldd	r24, Y+13	; 0x0d
    384a:	9e 85       	ldd	r25, Y+14	; 0x0e
    384c:	82 17       	cp	r24, r18
    384e:	93 07       	cpc	r25, r19
    3850:	0c f4       	brge	.+2      	; 0x3854 <PlayMusic+0x124>
    3852:	ba cf       	rjmp	.-140    	; 0x37c8 <PlayMusic+0x98>
	int duration;
	int note;
	int i;
	uint16_t delay = tempo * 1000;

	while( *pMusicNotes )
    3854:	eb 89       	ldd	r30, Y+19	; 0x13
    3856:	fc 89       	ldd	r31, Y+20	; 0x14
    3858:	80 81       	ld	r24, Z
    385a:	91 81       	ldd	r25, Z+1	; 0x01
    385c:	00 97       	sbiw	r24, 0x00	; 0
    385e:	09 f0       	breq	.+2      	; 0x3862 <PlayMusic+0x132>
    3860:	84 cf       	rjmp	.-248    	; 0x376a <PlayMusic+0x3a>
		}

	}

	//turn off any sound
	OCR1AL = 0;
    3862:	ea e4       	ldi	r30, 0x4A	; 74
    3864:	f0 e0       	ldi	r31, 0x00	; 0
    3866:	11 82       	std	Z+1, r1	; 0x01
    3868:	10 82       	st	Z, r1
}
    386a:	65 96       	adiw	r28, 0x15	; 21
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
    3876:	cf 91       	pop	r28
    3878:	df 91       	pop	r29
    387a:	08 95       	ret

0000387c <__udivmodhi4>:
    387c:	aa 1b       	sub	r26, r26
    387e:	bb 1b       	sub	r27, r27
    3880:	51 e1       	ldi	r21, 0x11	; 17
    3882:	07 c0       	rjmp	.+14     	; 0x3892 <__udivmodhi4_ep>

00003884 <__udivmodhi4_loop>:
    3884:	aa 1f       	adc	r26, r26
    3886:	bb 1f       	adc	r27, r27
    3888:	a6 17       	cp	r26, r22
    388a:	b7 07       	cpc	r27, r23
    388c:	10 f0       	brcs	.+4      	; 0x3892 <__udivmodhi4_ep>
    388e:	a6 1b       	sub	r26, r22
    3890:	b7 0b       	sbc	r27, r23

00003892 <__udivmodhi4_ep>:
    3892:	88 1f       	adc	r24, r24
    3894:	99 1f       	adc	r25, r25
    3896:	5a 95       	dec	r21
    3898:	a9 f7       	brne	.-22     	; 0x3884 <__udivmodhi4_loop>
    389a:	80 95       	com	r24
    389c:	90 95       	com	r25
    389e:	bc 01       	movw	r22, r24
    38a0:	cd 01       	movw	r24, r26
    38a2:	08 95       	ret

000038a4 <__divmodhi4>:
    38a4:	97 fb       	bst	r25, 7
    38a6:	09 2e       	mov	r0, r25
    38a8:	07 26       	eor	r0, r23
    38aa:	0a d0       	rcall	.+20     	; 0x38c0 <__divmodhi4_neg1>
    38ac:	77 fd       	sbrc	r23, 7
    38ae:	04 d0       	rcall	.+8      	; 0x38b8 <__divmodhi4_neg2>
    38b0:	e5 df       	rcall	.-54     	; 0x387c <__udivmodhi4>
    38b2:	06 d0       	rcall	.+12     	; 0x38c0 <__divmodhi4_neg1>
    38b4:	00 20       	and	r0, r0
    38b6:	1a f4       	brpl	.+6      	; 0x38be <__divmodhi4_exit>

000038b8 <__divmodhi4_neg2>:
    38b8:	70 95       	com	r23
    38ba:	61 95       	neg	r22
    38bc:	7f 4f       	sbci	r23, 0xFF	; 255

000038be <__divmodhi4_exit>:
    38be:	08 95       	ret

000038c0 <__divmodhi4_neg1>:
    38c0:	f6 f7       	brtc	.-4      	; 0x38be <__divmodhi4_exit>
    38c2:	90 95       	com	r25
    38c4:	81 95       	neg	r24
    38c6:	9f 4f       	sbci	r25, 0xFF	; 255
    38c8:	08 95       	ret

000038ca <__prologue_saves__>:
    38ca:	2f 92       	push	r2
    38cc:	3f 92       	push	r3
    38ce:	4f 92       	push	r4
    38d0:	5f 92       	push	r5
    38d2:	6f 92       	push	r6
    38d4:	7f 92       	push	r7
    38d6:	8f 92       	push	r8
    38d8:	9f 92       	push	r9
    38da:	af 92       	push	r10
    38dc:	bf 92       	push	r11
    38de:	cf 92       	push	r12
    38e0:	df 92       	push	r13
    38e2:	ef 92       	push	r14
    38e4:	ff 92       	push	r15
    38e6:	0f 93       	push	r16
    38e8:	1f 93       	push	r17
    38ea:	cf 93       	push	r28
    38ec:	df 93       	push	r29
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
    38f2:	ca 1b       	sub	r28, r26
    38f4:	db 0b       	sbc	r29, r27
    38f6:	0f b6       	in	r0, 0x3f	; 63
    38f8:	f8 94       	cli
    38fa:	de bf       	out	0x3e, r29	; 62
    38fc:	0f be       	out	0x3f, r0	; 63
    38fe:	cd bf       	out	0x3d, r28	; 61
    3900:	09 94       	ijmp

00003902 <__epilogue_restores__>:
    3902:	2a 88       	ldd	r2, Y+18	; 0x12
    3904:	39 88       	ldd	r3, Y+17	; 0x11
    3906:	48 88       	ldd	r4, Y+16	; 0x10
    3908:	5f 84       	ldd	r5, Y+15	; 0x0f
    390a:	6e 84       	ldd	r6, Y+14	; 0x0e
    390c:	7d 84       	ldd	r7, Y+13	; 0x0d
    390e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3910:	9b 84       	ldd	r9, Y+11	; 0x0b
    3912:	aa 84       	ldd	r10, Y+10	; 0x0a
    3914:	b9 84       	ldd	r11, Y+9	; 0x09
    3916:	c8 84       	ldd	r12, Y+8	; 0x08
    3918:	df 80       	ldd	r13, Y+7	; 0x07
    391a:	ee 80       	ldd	r14, Y+6	; 0x06
    391c:	fd 80       	ldd	r15, Y+5	; 0x05
    391e:	0c 81       	ldd	r16, Y+4	; 0x04
    3920:	1b 81       	ldd	r17, Y+3	; 0x03
    3922:	aa 81       	ldd	r26, Y+2	; 0x02
    3924:	b9 81       	ldd	r27, Y+1	; 0x01
    3926:	ce 0f       	add	r28, r30
    3928:	d1 1d       	adc	r29, r1
    392a:	0f b6       	in	r0, 0x3f	; 63
    392c:	f8 94       	cli
    392e:	de bf       	out	0x3e, r29	; 62
    3930:	0f be       	out	0x3f, r0	; 63
    3932:	cd bf       	out	0x3d, r28	; 61
    3934:	ed 01       	movw	r28, r26
    3936:	08 95       	ret

00003938 <_exit>:
    3938:	f8 94       	cli

0000393a <__stop_program>:
    393a:	ff cf       	rjmp	.-2      	; 0x393a <__stop_program>
