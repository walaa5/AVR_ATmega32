
KPD_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000025be  00002652  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007a  0080007a  0000266c  2**0
                  ALLOC
  3 .stab         00001bf0  00000000  00000000  0000266c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cae  00000000  00000000  0000425c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000504a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000051ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007cee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009657  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <main>
      8a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_SetPinValue>:
#include "LIBS\MATH.h"
#include "DIO_INT.h"
#include "DIO_REG.h"

void DIO_SetPinValue (u8 DIO_PORTID , u8 DIO_PINID , u8 DIO_PinValue)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if (DIO_PinValue == HIGH)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_SetPinValue+0x22>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_SetPinValue+0x100>
	{
		switch(DIO_PORTID)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_SetPinValue+0x88>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_SetPinValue+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_SetPinValue+0x60>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_SetPinValue+0x1ee>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_SetPinValue+0xb0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_SetPinValue+0xd8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <DIO_SetPinValue+0x1ee>
		{
		case PORTA:
			set_bit(PORTA_REG , DIO_PINID);
     ba6:	ab e3       	ldi	r26, 0x3B	; 59
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	eb e3       	ldi	r30, 0x3B	; 59
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_SetPinValue+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_SetPinValue+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTB:
			set_bit(PORTB_REG , DIO_PINID) ;
     bce:	a8 e3       	ldi	r26, 0x38	; 56
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e8 e3       	ldi	r30, 0x38	; 56
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_SetPinValue+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_SetPinValue+0xa2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTC:
			set_bit(PORTC_REG , DIO_PINID) ;
     bf6:	a5 e3       	ldi	r26, 0x35	; 53
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e3       	ldi	r30, 0x35	; 53
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_SetPinValue+0xce>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_SetPinValue+0xca>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTD:
			set_bit(PORTD_REG , DIO_PINID) ;
     c1e:	a2 e3       	ldi	r26, 0x32	; 50
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e2 e3       	ldi	r30, 0x32	; 50
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_SetPinValue+0xf6>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_SetPinValue+0xf2>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_SetPinValue+0x1ee>

		}

	}

	else if (DIO_PinValue == LOW)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_SetPinValue+0x108>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <DIO_SetPinValue+0x1ee>
	{
		switch(DIO_PORTID)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_SetPinValue+0x172>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_SetPinValue+0x130>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_SetPinValue+0x148>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <DIO_SetPinValue+0x1ee>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_SetPinValue+0x19c>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_SetPinValue+0x146>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_SetPinValue+0x1c6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <DIO_SetPinValue+0x1ee>
		{
		case PORTA:
			clr_bit(PORTA_REG , DIO_PINID) ;
     c8e:	ab e3       	ldi	r26, 0x3B	; 59
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	eb e3       	ldi	r30, 0x3B	; 59
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_SetPinValue+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_SetPinValue+0x162>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTB:
			clr_bit(PORTB_REG , DIO_PINID) ;
     cb8:	a8 e3       	ldi	r26, 0x38	; 56
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_SetPinValue+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_SetPinValue+0x18c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTC:
			clr_bit(PORTC_REG , DIO_PINID) ;
     ce2:	a5 e3       	ldi	r26, 0x35	; 53
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e3       	ldi	r30, 0x35	; 53
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_SetPinValue+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_SetPinValue+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTD:
			clr_bit(PORTD_REG , DIO_PINID) ;
     d0c:	a2 e3       	ldi	r26, 0x32	; 50
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e2 e3       	ldi	r30, 0x32	; 50
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_SetPinValue+0x1e4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_SetPinValue+0x1e0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
		break;

			}

		}
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 DIO_DDRID , u8 DIO_PINID, u8 DIO_PINIO)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if (DIO_PINIO == OUTPUT)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <DIO_SetPinDirection+0x22>
     d66:	6f c0       	rjmp	.+222    	; 0xe46 <DIO_SetPinDirection+0x100>
	{
		switch(DIO_DDRID)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	85 30       	cpi	r24, 0x05	; 5
     d78:	91 05       	cpc	r25, r1
     d7a:	51 f1       	breq	.+84     	; 0xdd0 <DIO_SetPinDirection+0x8a>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	26 30       	cpi	r18, 0x06	; 6
     d82:	31 05       	cpc	r19, r1
     d84:	34 f4       	brge	.+12     	; 0xd92 <DIO_SetPinDirection+0x4c>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	91 05       	cpc	r25, r1
     d8e:	61 f0       	breq	.+24     	; 0xda8 <DIO_SetPinDirection+0x62>
     d90:	5a c0       	rjmp	.+180    	; 0xe46 <DIO_SetPinDirection+0x100>
     d92:	2e 81       	ldd	r18, Y+6	; 0x06
     d94:	3f 81       	ldd	r19, Y+7	; 0x07
     d96:	26 30       	cpi	r18, 0x06	; 6
     d98:	31 05       	cpc	r19, r1
     d9a:	71 f1       	breq	.+92     	; 0xdf8 <DIO_SetPinDirection+0xb2>
     d9c:	8e 81       	ldd	r24, Y+6	; 0x06
     d9e:	9f 81       	ldd	r25, Y+7	; 0x07
     da0:	87 30       	cpi	r24, 0x07	; 7
     da2:	91 05       	cpc	r25, r1
     da4:	e9 f1       	breq	.+122    	; 0xe20 <DIO_SetPinDirection+0xda>
     da6:	4f c0       	rjmp	.+158    	; 0xe46 <DIO_SetPinDirection+0x100>
		{
		case DDRA:
			set_bit(DDRA_REG , DIO_PINID);
     da8:	aa e3       	ldi	r26, 0x3A	; 58
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea e3       	ldi	r30, 0x3A	; 58
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_SetPinDirection+0x80>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_SetPinDirection+0x7c>
     dca:	84 2b       	or	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	3b c0       	rjmp	.+118    	; 0xe46 <DIO_SetPinDirection+0x100>
		break;

		case DDRB:
			set_bit(DDRB_REG , DIO_PINID) ;
     dd0:	a7 e3       	ldi	r26, 0x37	; 55
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e7 e3       	ldi	r30, 0x37	; 55
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 2e       	mov	r0, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_SetPinDirection+0xa8>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_SetPinDirection+0xa4>
     df2:	84 2b       	or	r24, r20
     df4:	8c 93       	st	X, r24
     df6:	27 c0       	rjmp	.+78     	; 0xe46 <DIO_SetPinDirection+0x100>
		break;

		case DDRC:
			set_bit(DDRC_REG , DIO_PINID) ;
     df8:	a4 e3       	ldi	r26, 0x34	; 52
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e4 e3       	ldi	r30, 0x34	; 52
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <DIO_SetPinDirection+0xd0>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <DIO_SetPinDirection+0xcc>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	13 c0       	rjmp	.+38     	; 0xe46 <DIO_SetPinDirection+0x100>
		break;

		case DDRD:
			set_bit(DDRD_REG , DIO_PINID) ;
     e20:	a1 e3       	ldi	r26, 0x31	; 49
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e1 e3       	ldi	r30, 0x31	; 49
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_SetPinDirection+0xf8>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_SetPinDirection+0xf4>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24

		}

	}

	if (DIO_PINIO == INPUT)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	09 f0       	breq	.+2      	; 0xe4e <DIO_SetPinDirection+0x108>
     e4c:	74 c0       	rjmp	.+232    	; 0xf36 <DIO_SetPinDirection+0x1f0>
	{
		switch(DIO_DDRID)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	85 30       	cpi	r24, 0x05	; 5
     e5e:	91 05       	cpc	r25, r1
     e60:	61 f1       	breq	.+88     	; 0xeba <DIO_SetPinDirection+0x174>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	26 30       	cpi	r18, 0x06	; 6
     e68:	31 05       	cpc	r19, r1
     e6a:	34 f4       	brge	.+12     	; 0xe78 <DIO_SetPinDirection+0x132>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	84 30       	cpi	r24, 0x04	; 4
     e72:	91 05       	cpc	r25, r1
     e74:	69 f0       	breq	.+26     	; 0xe90 <DIO_SetPinDirection+0x14a>
     e76:	5f c0       	rjmp	.+190    	; 0xf36 <DIO_SetPinDirection+0x1f0>
     e78:	2c 81       	ldd	r18, Y+4	; 0x04
     e7a:	3d 81       	ldd	r19, Y+5	; 0x05
     e7c:	26 30       	cpi	r18, 0x06	; 6
     e7e:	31 05       	cpc	r19, r1
     e80:	89 f1       	breq	.+98     	; 0xee4 <DIO_SetPinDirection+0x19e>
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	9d 81       	ldd	r25, Y+5	; 0x05
     e86:	87 30       	cpi	r24, 0x07	; 7
     e88:	91 05       	cpc	r25, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <DIO_SetPinDirection+0x148>
     e8c:	40 c0       	rjmp	.+128    	; 0xf0e <DIO_SetPinDirection+0x1c8>
     e8e:	53 c0       	rjmp	.+166    	; 0xf36 <DIO_SetPinDirection+0x1f0>
		{
			case DDRA:
				clr_bit(DDRA_REG , DIO_PINID);
     e90:	aa e3       	ldi	r26, 0x3A	; 58
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ea e3       	ldi	r30, 0x3A	; 58
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_SetPinDirection+0x168>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_SetPinDirection+0x164>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	3e c0       	rjmp	.+124    	; 0xf36 <DIO_SetPinDirection+0x1f0>
			break;

			case DDRB:
				clr_bit(DDRB_REG , DIO_PINID) ;
     eba:	a7 e3       	ldi	r26, 0x37	; 55
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e7 e3       	ldi	r30, 0x37	; 55
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_SetPinDirection+0x192>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_SetPinDirection+0x18e>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	29 c0       	rjmp	.+82     	; 0xf36 <DIO_SetPinDirection+0x1f0>
			break;

			case DDRC:
				clr_bit(DDRC_REG , DIO_PINID) ;
     ee4:	a4 e3       	ldi	r26, 0x34	; 52
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e4 e3       	ldi	r30, 0x34	; 52
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_SetPinDirection+0x1bc>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_SetPinDirection+0x1b8>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <DIO_SetPinDirection+0x1f0>
			break;

			case DDRD:
				clr_bit(DDRD_REG , DIO_PINID) ;
     f0e:	a1 e3       	ldi	r26, 0x31	; 49
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_SetPinDirection+0x1e6>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_SetPinDirection+0x1e2>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
			break;

		}

	}
}
     f36:	27 96       	adiw	r28, 0x07	; 7
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <DIO_GetPinValue>:

u8 DIO_GetPinValue (u8 DIO_PIN , u8 DIO_PINID)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <DIO_GetPinValue+0x6>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <DIO_GetPinValue+0x8>
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	8a 83       	std	Y+2, r24	; 0x02
     f58:	6b 83       	std	Y+3, r22	; 0x03
	u8 value_read ;

	switch(DIO_PIN)
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	4c 81       	ldd	r20, Y+4	; 0x04
     f66:	5d 81       	ldd	r21, Y+5	; 0x05
     f68:	41 30       	cpi	r20, 0x01	; 1
     f6a:	51 05       	cpc	r21, r1
     f6c:	41 f1       	breq	.+80     	; 0xfbe <DIO_GetPinValue+0x76>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	34 f4       	brge	.+12     	; 0xf84 <DIO_GetPinValue+0x3c>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	61 f0       	breq	.+24     	; 0xf9a <DIO_GetPinValue+0x52>
     f82:	52 c0       	rjmp	.+164    	; 0x1028 <DIO_GetPinValue+0xe0>
     f84:	4c 81       	ldd	r20, Y+4	; 0x04
     f86:	5d 81       	ldd	r21, Y+5	; 0x05
     f88:	42 30       	cpi	r20, 0x02	; 2
     f8a:	51 05       	cpc	r21, r1
     f8c:	51 f1       	breq	.+84     	; 0xfe2 <DIO_GetPinValue+0x9a>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	b9 f1       	breq	.+110    	; 0x1006 <DIO_GetPinValue+0xbe>
     f98:	47 c0       	rjmp	.+142    	; 0x1028 <DIO_GetPinValue+0xe0>
	{

	case PINA :
		value_read = read_bit(PINA_REG , DIO_PINID);
     f9a:	e9 e3       	ldi	r30, 0x39	; 57
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_GetPinValue+0x6a>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_GetPinValue+0x66>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	35 c0       	rjmp	.+106    	; 0x1028 <DIO_GetPinValue+0xe0>
	break;

	case PINB :
	value_read = read_bit(PINB_REG , DIO_PINID) ;
     fbe:	e6 e3       	ldi	r30, 0x36	; 54
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_GetPinValue+0x8e>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_GetPinValue+0x8a>
     fda:	ca 01       	movw	r24, r20
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <DIO_GetPinValue+0xe0>

	break;

	case PINC:
	value_read = read_bit(PINC_REG , DIO_PINID) ;
     fe2:	e3 e3       	ldi	r30, 0x33	; 51
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a9 01       	movw	r20, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_GetPinValue+0xb2>
     ff6:	55 95       	asr	r21
     ff8:	47 95       	ror	r20
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_GetPinValue+0xae>
     ffe:	ca 01       	movw	r24, r20
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <DIO_GetPinValue+0xe0>
	break;

	case PIND:
	value_read = read_bit(PIND_REG ,DIO_PINID) ;
    1006:	e0 e3       	ldi	r30, 0x30	; 48
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_GetPinValue+0xd6>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_GetPinValue+0xd2>
    1022:	ca 01       	movw	r24, r20
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
	break;

	}

	return value_read ;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 DIO_DDRID , u8 DIO_PortValue)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <DIO_SetPortDirection+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_SetPortDirection+0x8>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <DIO_SetPortDirection+0xa>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	6a 83       	std	Y+2, r22	; 0x02

		switch(DIO_DDRID)
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3e 83       	std	Y+6, r19	; 0x06
    1054:	2d 83       	std	Y+5, r18	; 0x05
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	85 30       	cpi	r24, 0x05	; 5
    105c:	91 05       	cpc	r25, r1
    105e:	d9 f0       	breq	.+54     	; 0x1096 <DIO_SetPortDirection+0x5c>
    1060:	2d 81       	ldd	r18, Y+5	; 0x05
    1062:	3e 81       	ldd	r19, Y+6	; 0x06
    1064:	26 30       	cpi	r18, 0x06	; 6
    1066:	31 05       	cpc	r19, r1
    1068:	34 f4       	brge	.+12     	; 0x1076 <DIO_SetPortDirection+0x3c>
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	84 30       	cpi	r24, 0x04	; 4
    1070:	91 05       	cpc	r25, r1
    1072:	61 f0       	breq	.+24     	; 0x108c <DIO_SetPortDirection+0x52>
    1074:	1e c0       	rjmp	.+60     	; 0x10b2 <DIO_SetPortDirection+0x78>
    1076:	2d 81       	ldd	r18, Y+5	; 0x05
    1078:	3e 81       	ldd	r19, Y+6	; 0x06
    107a:	26 30       	cpi	r18, 0x06	; 6
    107c:	31 05       	cpc	r19, r1
    107e:	81 f0       	breq	.+32     	; 0x10a0 <DIO_SetPortDirection+0x66>
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	87 30       	cpi	r24, 0x07	; 7
    1086:	91 05       	cpc	r25, r1
    1088:	81 f0       	breq	.+32     	; 0x10aa <DIO_SetPortDirection+0x70>
    108a:	13 c0       	rjmp	.+38     	; 0x10b2 <DIO_SetPortDirection+0x78>
		{
		case DDRA:
			DDRA_REG = DIO_PortValue ;
    108c:	ea e3       	ldi	r30, 0x3A	; 58
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	80 83       	st	Z, r24
    1094:	0e c0       	rjmp	.+28     	; 0x10b2 <DIO_SetPortDirection+0x78>
		break ;

		case DDRB:
			DDRB_REG = DIO_PortValue ;
    1096:	e7 e3       	ldi	r30, 0x37	; 55
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	80 83       	st	Z, r24
    109e:	09 c0       	rjmp	.+18     	; 0x10b2 <DIO_SetPortDirection+0x78>
		break ;

		case DDRC:
			DDRC_REG = DIO_PortValue ;
    10a0:	e4 e3       	ldi	r30, 0x34	; 52
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	80 83       	st	Z, r24
    10a8:	04 c0       	rjmp	.+8      	; 0x10b2 <DIO_SetPortDirection+0x78>
		break ;

		case DDRD:
			DDRD_REG = DIO_PortValue ;
    10aa:	e1 e3       	ldi	r30, 0x31	; 49
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	80 83       	st	Z, r24
		break ;

		}

		switch(DIO_DDRID)
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	3c 83       	std	Y+4, r19	; 0x04
    10ba:	2b 83       	std	Y+3, r18	; 0x03
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	85 30       	cpi	r24, 0x05	; 5
    10c2:	91 05       	cpc	r25, r1
    10c4:	d9 f0       	breq	.+54     	; 0x10fc <DIO_SetPortDirection+0xc2>
    10c6:	2b 81       	ldd	r18, Y+3	; 0x03
    10c8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ca:	26 30       	cpi	r18, 0x06	; 6
    10cc:	31 05       	cpc	r19, r1
    10ce:	34 f4       	brge	.+12     	; 0x10dc <DIO_SetPortDirection+0xa2>
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	91 05       	cpc	r25, r1
    10d8:	61 f0       	breq	.+24     	; 0x10f2 <DIO_SetPortDirection+0xb8>
    10da:	1e c0       	rjmp	.+60     	; 0x1118 <DIO_SetPortDirection+0xde>
    10dc:	2b 81       	ldd	r18, Y+3	; 0x03
    10de:	3c 81       	ldd	r19, Y+4	; 0x04
    10e0:	26 30       	cpi	r18, 0x06	; 6
    10e2:	31 05       	cpc	r19, r1
    10e4:	81 f0       	breq	.+32     	; 0x1106 <DIO_SetPortDirection+0xcc>
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	87 30       	cpi	r24, 0x07	; 7
    10ec:	91 05       	cpc	r25, r1
    10ee:	81 f0       	breq	.+32     	; 0x1110 <DIO_SetPortDirection+0xd6>
    10f0:	13 c0       	rjmp	.+38     	; 0x1118 <DIO_SetPortDirection+0xde>
		{
		case DDRA:
			DDRA_REG =DIO_PortValue ;
    10f2:	ea e3       	ldi	r30, 0x3A	; 58
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	80 83       	st	Z, r24
    10fa:	0e c0       	rjmp	.+28     	; 0x1118 <DIO_SetPortDirection+0xde>
		break ;

		case DDRB:
			DDRB_REG = DIO_PortValue ;
    10fc:	e7 e3       	ldi	r30, 0x37	; 55
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	80 83       	st	Z, r24
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <DIO_SetPortDirection+0xde>
		break ;

		case DDRC:
			DDRC_REG = DIO_PortValue ;
    1106:	e4 e3       	ldi	r30, 0x34	; 52
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	80 83       	st	Z, r24
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <DIO_SetPortDirection+0xde>
		break ;

		case DDRD:
			DDRD_REG = DIO_PortValue ;
    1110:	e1 e3       	ldi	r30, 0x31	; 49
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	80 83       	st	Z, r24
		break ;
	   }
}
    1118:	26 96       	adiw	r28, 0x06	; 6
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <DIO_SetPortValue>:

void DIO_SetPortValue(u8 DIO_PORTID , u8 DIO_PortValue)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_SetPortValue+0x6>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_SetPortValue+0x8>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	6a 83       	std	Y+2, r22	; 0x02

		switch(DIO_PORTID)
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3c 83       	std	Y+4, r19	; 0x04
    1142:	2b 83       	std	Y+3, r18	; 0x03
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	91 05       	cpc	r25, r1
    114c:	d1 f0       	breq	.+52     	; 0x1182 <DIO_SetPortValue+0x58>
    114e:	2b 81       	ldd	r18, Y+3	; 0x03
    1150:	3c 81       	ldd	r19, Y+4	; 0x04
    1152:	22 30       	cpi	r18, 0x02	; 2
    1154:	31 05       	cpc	r19, r1
    1156:	2c f4       	brge	.+10     	; 0x1162 <DIO_SetPortValue+0x38>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	61 f0       	breq	.+24     	; 0x1178 <DIO_SetPortValue+0x4e>
    1160:	1e c0       	rjmp	.+60     	; 0x119e <DIO_SetPortValue+0x74>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <DIO_SetPortValue+0x62>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	83 30       	cpi	r24, 0x03	; 3
    1172:	91 05       	cpc	r25, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <DIO_SetPortValue+0x6c>
    1176:	13 c0       	rjmp	.+38     	; 0x119e <DIO_SetPortValue+0x74>
		{

		case PORTA:
			PORTA_REG = DIO_PortValue ;
    1178:	eb e3       	ldi	r30, 0x3B	; 59
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	0e c0       	rjmp	.+28     	; 0x119e <DIO_SetPortValue+0x74>
		break ;

		case PORTB:
			PORTB_REG = DIO_PortValue ;
    1182:	e8 e3       	ldi	r30, 0x38	; 56
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	09 c0       	rjmp	.+18     	; 0x119e <DIO_SetPortValue+0x74>
		break ;

		case PORTC:
			PORTC_REG = DIO_PortValue ;
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
    1194:	04 c0       	rjmp	.+8      	; 0x119e <DIO_SetPortValue+0x74>
		break ;

		case PORTD:
			PORTD_REG = DIO_PortValue ;
    1196:	e2 e3       	ldi	r30, 0x32	; 50
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
		}




}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <KPD_u8GetPressedKey>:
		 {9, 10, 11, 12},
		 {13, 14, 15, 16}
		} ;

u8 KPD_u8GetPressedKey (void)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <KPD_u8GetPressedKey+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <KPD_u8GetPressedKey+0x8>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ColIDX ;
	u8 local_u8RowIDX ;
	u8 local_u8PinState ;
	u8 local_u8PreassedKey = 0 ;
    11b8:	19 82       	std	Y+1, r1	; 0x01

	// loop to go for every column in he kpd
	for(local_u8ColIDX = 0; local_u8ColIDX < 4 ; local_u8ColIDX++)
    11ba:	1c 82       	std	Y+4, r1	; 0x04
    11bc:	3e c0       	rjmp	.+124    	; 0x123a <KPD_u8GetPressedKey+0x8e>
	{
		// activate current column
		DIO_SetPinValue(KPD_PORT , local_u8ColIDX , LOW);
    11be:	83 e0       	ldi	r24, 0x03	; 3
    11c0:	6c 81       	ldd	r22, Y+4	; 0x04
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

		// loop to go for every row in the kpd
		for(local_u8RowIDX = 0; local_u8RowIDX < 4 ; local_u8RowIDX++)
    11c8:	1b 82       	std	Y+3, r1	; 0x03
    11ca:	2c c0       	rjmp	.+88     	; 0x1224 <KPD_u8GetPressedKey+0x78>
		{
			//get the row pin state9
			local_u8PinState = DIO_GetPinValue(KPD_PIN , (local_u8RowIDX + 4)) ;
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	98 2f       	mov	r25, r24
    11d0:	9c 5f       	subi	r25, 0xFC	; 252
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	69 2f       	mov	r22, r25
    11d6:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_GetPinValue>
    11da:	8a 83       	std	Y+2, r24	; 0x02

			if(local_u8PinState == LOW)
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	88 23       	and	r24, r24
    11e0:	f1 f4       	brne	.+60     	; 0x121e <KPD_u8GetPressedKey+0x72>
			{
				local_u8PreassedKey = KPD_u8ARR [local_u8RowIDX][local_u8ColIDX];
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	48 2f       	mov	r20, r24
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	ca 01       	movw	r24, r20
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	82 0f       	add	r24, r18
    11fa:	93 1f       	adc	r25, r19
    11fc:	fc 01       	movw	r30, r24
    11fe:	e8 59       	subi	r30, 0x98	; 152
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	80 81       	ld	r24, Z
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	08 c0       	rjmp	.+16     	; 0x1218 <KPD_u8GetPressedKey+0x6c>

				while(local_u8PinState == LOW)
				{
					// get the row pin state
					local_u8PinState = DIO_GetPinValue(KPD_PIN , (local_u8RowIDX + 4)) ;
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	98 2f       	mov	r25, r24
    120c:	9c 5f       	subi	r25, 0xFC	; 252
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	69 2f       	mov	r22, r25
    1212:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_GetPinValue>
    1216:	8a 83       	std	Y+2, r24	; 0x02

			if(local_u8PinState == LOW)
			{
				local_u8PreassedKey = KPD_u8ARR [local_u8RowIDX][local_u8ColIDX];

				while(local_u8PinState == LOW)
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	88 23       	and	r24, r24
    121c:	a9 f3       	breq	.-22     	; 0x1208 <KPD_u8GetPressedKey+0x5c>
	{
		// activate current column
		DIO_SetPinValue(KPD_PORT , local_u8ColIDX , LOW);

		// loop to go for every row in the kpd
		for(local_u8RowIDX = 0; local_u8RowIDX < 4 ; local_u8RowIDX++)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	8f 5f       	subi	r24, 0xFF	; 255
    1222:	8b 83       	std	Y+3, r24	; 0x03
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	88 f2       	brcs	.-94     	; 0x11cc <KPD_u8GetPressedKey+0x20>
				}
			}
		}

		// deactivate the current column
		DIO_SetPinValue(KPD_PORT , local_u8ColIDX , HIGH);
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	6c 81       	ldd	r22, Y+4	; 0x04
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	u8 local_u8RowIDX ;
	u8 local_u8PinState ;
	u8 local_u8PreassedKey = 0 ;

	// loop to go for every column in he kpd
	for(local_u8ColIDX = 0; local_u8ColIDX < 4 ; local_u8ColIDX++)
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	8c 83       	std	Y+4, r24	; 0x04
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	08 f4       	brcc	.+2      	; 0x1242 <KPD_u8GetPressedKey+0x96>
    1240:	be cf       	rjmp	.-132    	; 0x11be <KPD_u8GetPressedKey+0x12>

		// deactivate the current column
		DIO_SetPinValue(KPD_PORT , local_u8ColIDX , HIGH);
	}

	return local_u8PreassedKey;
    1242:	89 81       	ldd	r24, Y+1	; 0x01
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <LCD_voidInit>:
#include <avr\delay.h>


// initialization function : use it in the beginning of any lcd program
void LCD_voidInit(void)
{
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	c6 54       	subi	r28, 0x46	; 70
    1260:	d0 40       	sbci	r29, 0x00	; 0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	fe 01       	movw	r30, r28
    126e:	ed 5b       	subi	r30, 0xBD	; 189
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	a0 e2       	ldi	r26, 0x20	; 32
    1278:	b2 e4       	ldi	r27, 0x42	; 66
    127a:	80 83       	st	Z, r24
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	a2 83       	std	Z+2, r26	; 0x02
    1280:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1282:	8e 01       	movw	r16, r28
    1284:	01 5c       	subi	r16, 0xC1	; 193
    1286:	1f 4f       	sbci	r17, 0xFF	; 255
    1288:	fe 01       	movw	r30, r28
    128a:	ed 5b       	subi	r30, 0xBD	; 189
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	60 81       	ld	r22, Z
    1290:	71 81       	ldd	r23, Z+1	; 0x01
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	93 81       	ldd	r25, Z+3	; 0x03
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	4a e7       	ldi	r20, 0x7A	; 122
    129c:	53 e4       	ldi	r21, 0x43	; 67
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	f8 01       	movw	r30, r16
    12a8:	80 83       	st	Z, r24
    12aa:	91 83       	std	Z+1, r25	; 0x01
    12ac:	a2 83       	std	Z+2, r26	; 0x02
    12ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12b0:	fe 01       	movw	r30, r28
    12b2:	ff 96       	adiw	r30, 0x3f	; 63
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e8       	ldi	r20, 0x80	; 128
    12c2:	5f e3       	ldi	r21, 0x3F	; 63
    12c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c8:	88 23       	and	r24, r24
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <LCD_voidInit+0x84>
		__ticks = 1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9e af       	std	Y+62, r25	; 0x3e
    12d2:	8d af       	std	Y+61, r24	; 0x3d
    12d4:	46 c0       	rjmp	.+140    	; 0x1362 <LCD_voidInit+0x110>
	else if (__tmp > 65535)
    12d6:	fe 01       	movw	r30, r28
    12d8:	ff 96       	adiw	r30, 0x3f	; 63
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	3f ef       	ldi	r19, 0xFF	; 255
    12e6:	4f e7       	ldi	r20, 0x7F	; 127
    12e8:	57 e4       	ldi	r21, 0x47	; 71
    12ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ee:	18 16       	cp	r1, r24
    12f0:	64 f5       	brge	.+88     	; 0x134a <LCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f2:	fe 01       	movw	r30, r28
    12f4:	ed 5b       	subi	r30, 0xBD	; 189
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	60 81       	ld	r22, Z
    12fa:	71 81       	ldd	r23, Z+1	; 0x01
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e2       	ldi	r20, 0x20	; 32
    1306:	51 e4       	ldi	r21, 0x41	; 65
    1308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	9e af       	std	Y+62, r25	; 0x3e
    131e:	8d af       	std	Y+61, r24	; 0x3d
    1320:	0f c0       	rjmp	.+30     	; 0x1340 <LCD_voidInit+0xee>
    1322:	89 e1       	ldi	r24, 0x19	; 25
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9c af       	std	Y+60, r25	; 0x3c
    1328:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    132a:	8b ad       	ldd	r24, Y+59	; 0x3b
    132c:	9c ad       	ldd	r25, Y+60	; 0x3c
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <LCD_voidInit+0xdc>
    1332:	9c af       	std	Y+60, r25	; 0x3c
    1334:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1336:	8d ad       	ldd	r24, Y+61	; 0x3d
    1338:	9e ad       	ldd	r25, Y+62	; 0x3e
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	9e af       	std	Y+62, r25	; 0x3e
    133e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1340:	8d ad       	ldd	r24, Y+61	; 0x3d
    1342:	9e ad       	ldd	r25, Y+62	; 0x3e
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	69 f7       	brne	.-38     	; 0x1322 <LCD_voidInit+0xd0>
    1348:	16 c0       	rjmp	.+44     	; 0x1376 <LCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134a:	fe 01       	movw	r30, r28
    134c:	ff 96       	adiw	r30, 0x3f	; 63
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9e af       	std	Y+62, r25	; 0x3e
    1360:	8d af       	std	Y+61, r24	; 0x3d
    1362:	8d ad       	ldd	r24, Y+61	; 0x3d
    1364:	9e ad       	ldd	r25, Y+62	; 0x3e
    1366:	9a af       	std	Y+58, r25	; 0x3a
    1368:	89 af       	std	Y+57, r24	; 0x39
    136a:	89 ad       	ldd	r24, Y+57	; 0x39
    136c:	9a ad       	ldd	r25, Y+58	; 0x3a
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <LCD_voidInit+0x11c>
    1372:	9a af       	std	Y+58, r25	; 0x3a
    1374:	89 af       	std	Y+57, r24	; 0x39
	// wait for more than 30 ms
	_delay_ms(40);

	// function set command (8bit mode -- 2 lines -- 5*7)
	LCD_voidSendCommand (0b00111000);
    1376:	88 e3       	ldi	r24, 0x38	; 56
    1378:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_voidSendCommand>
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a0 e8       	ldi	r26, 0x80	; 128
    1382:	bf e3       	ldi	r27, 0x3F	; 63
    1384:	8d ab       	std	Y+53, r24	; 0x35
    1386:	9e ab       	std	Y+54, r25	; 0x36
    1388:	af ab       	std	Y+55, r26	; 0x37
    138a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138c:	6d a9       	ldd	r22, Y+53	; 0x35
    138e:	7e a9       	ldd	r23, Y+54	; 0x36
    1390:	8f a9       	ldd	r24, Y+55	; 0x37
    1392:	98 ad       	ldd	r25, Y+56	; 0x38
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	4a e7       	ldi	r20, 0x7A	; 122
    139a:	53 e4       	ldi	r21, 0x43	; 67
    139c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	89 ab       	std	Y+49, r24	; 0x31
    13a6:	9a ab       	std	Y+50, r25	; 0x32
    13a8:	ab ab       	std	Y+51, r26	; 0x33
    13aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13ac:	69 a9       	ldd	r22, Y+49	; 0x31
    13ae:	7a a9       	ldd	r23, Y+50	; 0x32
    13b0:	8b a9       	ldd	r24, Y+51	; 0x33
    13b2:	9c a9       	ldd	r25, Y+52	; 0x34
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e8       	ldi	r20, 0x80	; 128
    13ba:	5f e3       	ldi	r21, 0x3F	; 63
    13bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c0:	88 23       	and	r24, r24
    13c2:	2c f4       	brge	.+10     	; 0x13ce <LCD_voidInit+0x17c>
		__ticks = 1;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	98 ab       	std	Y+48, r25	; 0x30
    13ca:	8f a7       	std	Y+47, r24	; 0x2f
    13cc:	3f c0       	rjmp	.+126    	; 0x144c <LCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    13ce:	69 a9       	ldd	r22, Y+49	; 0x31
    13d0:	7a a9       	ldd	r23, Y+50	; 0x32
    13d2:	8b a9       	ldd	r24, Y+51	; 0x33
    13d4:	9c a9       	ldd	r25, Y+52	; 0x34
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	3f ef       	ldi	r19, 0xFF	; 255
    13da:	4f e7       	ldi	r20, 0x7F	; 127
    13dc:	57 e4       	ldi	r21, 0x47	; 71
    13de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e2:	18 16       	cp	r1, r24
    13e4:	4c f5       	brge	.+82     	; 0x1438 <LCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e6:	6d a9       	ldd	r22, Y+53	; 0x35
    13e8:	7e a9       	ldd	r23, Y+54	; 0x36
    13ea:	8f a9       	ldd	r24, Y+55	; 0x37
    13ec:	98 ad       	ldd	r25, Y+56	; 0x38
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e2       	ldi	r20, 0x20	; 32
    13f4:	51 e4       	ldi	r21, 0x41	; 65
    13f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	bc 01       	movw	r22, r24
    1400:	cd 01       	movw	r24, r26
    1402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	98 ab       	std	Y+48, r25	; 0x30
    140c:	8f a7       	std	Y+47, r24	; 0x2f
    140e:	0f c0       	rjmp	.+30     	; 0x142e <LCD_voidInit+0x1dc>
    1410:	89 e1       	ldi	r24, 0x19	; 25
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9e a7       	std	Y+46, r25	; 0x2e
    1416:	8d a7       	std	Y+45, r24	; 0x2d
    1418:	8d a5       	ldd	r24, Y+45	; 0x2d
    141a:	9e a5       	ldd	r25, Y+46	; 0x2e
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <LCD_voidInit+0x1ca>
    1420:	9e a7       	std	Y+46, r25	; 0x2e
    1422:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1424:	8f a5       	ldd	r24, Y+47	; 0x2f
    1426:	98 a9       	ldd	r25, Y+48	; 0x30
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	98 ab       	std	Y+48, r25	; 0x30
    142c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1430:	98 a9       	ldd	r25, Y+48	; 0x30
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	69 f7       	brne	.-38     	; 0x1410 <LCD_voidInit+0x1be>
    1436:	14 c0       	rjmp	.+40     	; 0x1460 <LCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1438:	69 a9       	ldd	r22, Y+49	; 0x31
    143a:	7a a9       	ldd	r23, Y+50	; 0x32
    143c:	8b a9       	ldd	r24, Y+51	; 0x33
    143e:	9c a9       	ldd	r25, Y+52	; 0x34
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	98 ab       	std	Y+48, r25	; 0x30
    144a:	8f a7       	std	Y+47, r24	; 0x2f
    144c:	8f a5       	ldd	r24, Y+47	; 0x2f
    144e:	98 a9       	ldd	r25, Y+48	; 0x30
    1450:	9c a7       	std	Y+44, r25	; 0x2c
    1452:	8b a7       	std	Y+43, r24	; 0x2b
    1454:	8b a5       	ldd	r24, Y+43	; 0x2b
    1456:	9c a5       	ldd	r25, Y+44	; 0x2c
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <LCD_voidInit+0x206>
    145c:	9c a7       	std	Y+44, r25	; 0x2c
    145e:	8b a7       	std	Y+43, r24	; 0x2b

	//wait for more than 39 us
	_delay_ms(1);

	//display on/off control command (cursor on/off -- cursor blink/not blink)
	LCD_voidSendCommand (0x0c);
    1460:	8c e0       	ldi	r24, 0x0C	; 12
    1462:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_voidSendCommand>
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a0 e8       	ldi	r26, 0x80	; 128
    146c:	bf e3       	ldi	r27, 0x3F	; 63
    146e:	8f a3       	std	Y+39, r24	; 0x27
    1470:	98 a7       	std	Y+40, r25	; 0x28
    1472:	a9 a7       	std	Y+41, r26	; 0x29
    1474:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1476:	6f a1       	ldd	r22, Y+39	; 0x27
    1478:	78 a5       	ldd	r23, Y+40	; 0x28
    147a:	89 a5       	ldd	r24, Y+41	; 0x29
    147c:	9a a5       	ldd	r25, Y+42	; 0x2a
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	4a e7       	ldi	r20, 0x7A	; 122
    1484:	53 e4       	ldi	r21, 0x43	; 67
    1486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	8b a3       	std	Y+35, r24	; 0x23
    1490:	9c a3       	std	Y+36, r25	; 0x24
    1492:	ad a3       	std	Y+37, r26	; 0x25
    1494:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1496:	6b a1       	ldd	r22, Y+35	; 0x23
    1498:	7c a1       	ldd	r23, Y+36	; 0x24
    149a:	8d a1       	ldd	r24, Y+37	; 0x25
    149c:	9e a1       	ldd	r25, Y+38	; 0x26
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e8       	ldi	r20, 0x80	; 128
    14a4:	5f e3       	ldi	r21, 0x3F	; 63
    14a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14aa:	88 23       	and	r24, r24
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <LCD_voidInit+0x266>
		__ticks = 1;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	9a a3       	std	Y+34, r25	; 0x22
    14b4:	89 a3       	std	Y+33, r24	; 0x21
    14b6:	3f c0       	rjmp	.+126    	; 0x1536 <LCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    14b8:	6b a1       	ldd	r22, Y+35	; 0x23
    14ba:	7c a1       	ldd	r23, Y+36	; 0x24
    14bc:	8d a1       	ldd	r24, Y+37	; 0x25
    14be:	9e a1       	ldd	r25, Y+38	; 0x26
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	3f ef       	ldi	r19, 0xFF	; 255
    14c4:	4f e7       	ldi	r20, 0x7F	; 127
    14c6:	57 e4       	ldi	r21, 0x47	; 71
    14c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14cc:	18 16       	cp	r1, r24
    14ce:	4c f5       	brge	.+82     	; 0x1522 <LCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d0:	6f a1       	ldd	r22, Y+39	; 0x27
    14d2:	78 a5       	ldd	r23, Y+40	; 0x28
    14d4:	89 a5       	ldd	r24, Y+41	; 0x29
    14d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e2       	ldi	r20, 0x20	; 32
    14de:	51 e4       	ldi	r21, 0x41	; 65
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	9a a3       	std	Y+34, r25	; 0x22
    14f6:	89 a3       	std	Y+33, r24	; 0x21
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <LCD_voidInit+0x2c6>
    14fa:	89 e1       	ldi	r24, 0x19	; 25
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	98 a3       	std	Y+32, r25	; 0x20
    1500:	8f 8f       	std	Y+31, r24	; 0x1f
    1502:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1504:	98 a1       	ldd	r25, Y+32	; 0x20
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <LCD_voidInit+0x2b4>
    150a:	98 a3       	std	Y+32, r25	; 0x20
    150c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150e:	89 a1       	ldd	r24, Y+33	; 0x21
    1510:	9a a1       	ldd	r25, Y+34	; 0x22
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	9a a3       	std	Y+34, r25	; 0x22
    1516:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1518:	89 a1       	ldd	r24, Y+33	; 0x21
    151a:	9a a1       	ldd	r25, Y+34	; 0x22
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	69 f7       	brne	.-38     	; 0x14fa <LCD_voidInit+0x2a8>
    1520:	14 c0       	rjmp	.+40     	; 0x154a <LCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1522:	6b a1       	ldd	r22, Y+35	; 0x23
    1524:	7c a1       	ldd	r23, Y+36	; 0x24
    1526:	8d a1       	ldd	r24, Y+37	; 0x25
    1528:	9e a1       	ldd	r25, Y+38	; 0x26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9a a3       	std	Y+34, r25	; 0x22
    1534:	89 a3       	std	Y+33, r24	; 0x21
    1536:	89 a1       	ldd	r24, Y+33	; 0x21
    1538:	9a a1       	ldd	r25, Y+34	; 0x22
    153a:	9e 8f       	std	Y+30, r25	; 0x1e
    153c:	8d 8f       	std	Y+29, r24	; 0x1d
    153e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1540:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_voidInit+0x2f0>
    1546:	9e 8f       	std	Y+30, r25	; 0x1e
    1548:	8d 8f       	std	Y+29, r24	; 0x1d

	// wait for more than 39 us
	_delay_ms(1);

	//lcd clear : to clear any data on the lcd
	LCD_voidSendCommand (0x01);
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_voidSendCommand>
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a0 e0       	ldi	r26, 0x00	; 0
    1556:	b0 e4       	ldi	r27, 0x40	; 64
    1558:	89 8f       	std	Y+25, r24	; 0x19
    155a:	9a 8f       	std	Y+26, r25	; 0x1a
    155c:	ab 8f       	std	Y+27, r26	; 0x1b
    155e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1560:	69 8d       	ldd	r22, Y+25	; 0x19
    1562:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1564:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1566:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	4a e7       	ldi	r20, 0x7A	; 122
    156e:	53 e4       	ldi	r21, 0x43	; 67
    1570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	8d 8b       	std	Y+21, r24	; 0x15
    157a:	9e 8b       	std	Y+22, r25	; 0x16
    157c:	af 8b       	std	Y+23, r26	; 0x17
    157e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1580:	6d 89       	ldd	r22, Y+21	; 0x15
    1582:	7e 89       	ldd	r23, Y+22	; 0x16
    1584:	8f 89       	ldd	r24, Y+23	; 0x17
    1586:	98 8d       	ldd	r25, Y+24	; 0x18
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e8       	ldi	r20, 0x80	; 128
    158e:	5f e3       	ldi	r21, 0x3F	; 63
    1590:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1594:	88 23       	and	r24, r24
    1596:	2c f4       	brge	.+10     	; 0x15a2 <LCD_voidInit+0x350>
		__ticks = 1;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9c 8b       	std	Y+20, r25	; 0x14
    159e:	8b 8b       	std	Y+19, r24	; 0x13
    15a0:	3f c0       	rjmp	.+126    	; 0x1620 <LCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    15a2:	6d 89       	ldd	r22, Y+21	; 0x15
    15a4:	7e 89       	ldd	r23, Y+22	; 0x16
    15a6:	8f 89       	ldd	r24, Y+23	; 0x17
    15a8:	98 8d       	ldd	r25, Y+24	; 0x18
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	3f ef       	ldi	r19, 0xFF	; 255
    15ae:	4f e7       	ldi	r20, 0x7F	; 127
    15b0:	57 e4       	ldi	r21, 0x47	; 71
    15b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b6:	18 16       	cp	r1, r24
    15b8:	4c f5       	brge	.+82     	; 0x160c <LCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ba:	69 8d       	ldd	r22, Y+25	; 0x19
    15bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e2       	ldi	r20, 0x20	; 32
    15c8:	51 e4       	ldi	r21, 0x41	; 65
    15ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	9c 8b       	std	Y+20, r25	; 0x14
    15e0:	8b 8b       	std	Y+19, r24	; 0x13
    15e2:	0f c0       	rjmp	.+30     	; 0x1602 <LCD_voidInit+0x3b0>
    15e4:	89 e1       	ldi	r24, 0x19	; 25
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	9a 8b       	std	Y+18, r25	; 0x12
    15ea:	89 8b       	std	Y+17, r24	; 0x11
    15ec:	89 89       	ldd	r24, Y+17	; 0x11
    15ee:	9a 89       	ldd	r25, Y+18	; 0x12
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <LCD_voidInit+0x39e>
    15f4:	9a 8b       	std	Y+18, r25	; 0x12
    15f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f8:	8b 89       	ldd	r24, Y+19	; 0x13
    15fa:	9c 89       	ldd	r25, Y+20	; 0x14
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	9c 8b       	std	Y+20, r25	; 0x14
    1600:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1602:	8b 89       	ldd	r24, Y+19	; 0x13
    1604:	9c 89       	ldd	r25, Y+20	; 0x14
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	69 f7       	brne	.-38     	; 0x15e4 <LCD_voidInit+0x392>
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <LCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160c:	6d 89       	ldd	r22, Y+21	; 0x15
    160e:	7e 89       	ldd	r23, Y+22	; 0x16
    1610:	8f 89       	ldd	r24, Y+23	; 0x17
    1612:	98 8d       	ldd	r25, Y+24	; 0x18
    1614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9c 8b       	std	Y+20, r25	; 0x14
    161e:	8b 8b       	std	Y+19, r24	; 0x13
    1620:	8b 89       	ldd	r24, Y+19	; 0x13
    1622:	9c 89       	ldd	r25, Y+20	; 0x14
    1624:	98 8b       	std	Y+16, r25	; 0x10
    1626:	8f 87       	std	Y+15, r24	; 0x0f
    1628:	8f 85       	ldd	r24, Y+15	; 0x0f
    162a:	98 89       	ldd	r25, Y+16	; 0x10
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <LCD_voidInit+0x3da>
    1630:	98 8b       	std	Y+16, r25	; 0x10
    1632:	8f 87       	std	Y+15, r24	; 0x0f

	// delay for more than 1.53 ms
	_delay_ms(2);

	// entry mode set
	LCD_voidSendCommand(0x0A);
    1634:	8a e0       	ldi	r24, 0x0A	; 10
    1636:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_voidSendCommand>
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a0 e8       	ldi	r26, 0x80	; 128
    1640:	bf e3       	ldi	r27, 0x3F	; 63
    1642:	8b 87       	std	Y+11, r24	; 0x0b
    1644:	9c 87       	std	Y+12, r25	; 0x0c
    1646:	ad 87       	std	Y+13, r26	; 0x0d
    1648:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164a:	6b 85       	ldd	r22, Y+11	; 0x0b
    164c:	7c 85       	ldd	r23, Y+12	; 0x0c
    164e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1650:	9e 85       	ldd	r25, Y+14	; 0x0e
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	4a e7       	ldi	r20, 0x7A	; 122
    1658:	53 e4       	ldi	r21, 0x43	; 67
    165a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	8f 83       	std	Y+7, r24	; 0x07
    1664:	98 87       	std	Y+8, r25	; 0x08
    1666:	a9 87       	std	Y+9, r26	; 0x09
    1668:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    166a:	6f 81       	ldd	r22, Y+7	; 0x07
    166c:	78 85       	ldd	r23, Y+8	; 0x08
    166e:	89 85       	ldd	r24, Y+9	; 0x09
    1670:	9a 85       	ldd	r25, Y+10	; 0x0a
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e8       	ldi	r20, 0x80	; 128
    1678:	5f e3       	ldi	r21, 0x3F	; 63
    167a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167e:	88 23       	and	r24, r24
    1680:	2c f4       	brge	.+10     	; 0x168c <LCD_voidInit+0x43a>
		__ticks = 1;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	8d 83       	std	Y+5, r24	; 0x05
    168a:	3f c0       	rjmp	.+126    	; 0x170a <LCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    168c:	6f 81       	ldd	r22, Y+7	; 0x07
    168e:	78 85       	ldd	r23, Y+8	; 0x08
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	57 e4       	ldi	r21, 0x47	; 71
    169c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a0:	18 16       	cp	r1, r24
    16a2:	4c f5       	brge	.+82     	; 0x16f6 <LCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e2       	ldi	r20, 0x20	; 32
    16b2:	51 e4       	ldi	r21, 0x41	; 65
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	bc 01       	movw	r22, r24
    16be:	cd 01       	movw	r24, r26
    16c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 83       	std	Y+5, r24	; 0x05
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <LCD_voidInit+0x49a>
    16ce:	89 e1       	ldi	r24, 0x19	; 25
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9c 83       	std	Y+4, r25	; 0x04
    16d4:	8b 83       	std	Y+3, r24	; 0x03
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	9c 81       	ldd	r25, Y+4	; 0x04
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <LCD_voidInit+0x488>
    16de:	9c 83       	std	Y+4, r25	; 0x04
    16e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	9e 81       	ldd	r25, Y+6	; 0x06
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	69 f7       	brne	.-38     	; 0x16ce <LCD_voidInit+0x47c>
    16f4:	14 c0       	rjmp	.+40     	; 0x171e <LCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f6:	6f 81       	ldd	r22, Y+7	; 0x07
    16f8:	78 85       	ldd	r23, Y+8	; 0x08
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <LCD_voidInit+0x4c4>
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	89 83       	std	Y+1, r24	; 0x01

	//delay for more than 1 ms
	_delay_ms(1);

}
    171e:	ca 5b       	subi	r28, 0xBA	; 186
    1720:	df 4f       	sbci	r29, 0xFF	; 255
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	08 95       	ret

00001736 <LCD_voidSendCommand>:


void LCD_voidSendCommand (u8 COPY_LCD_CMD)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	6d 97       	sbiw	r28, 0x1d	; 29
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	8d 8f       	std	Y+29, r24	; 0x1d
	// disable Enable bin
	DIO_SetPinValue (LCD_CTRL_PORT,LCD_EN,LOW);
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	62 e0       	ldi	r22, 0x02	; 2
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//RS COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RS , LOW) ;
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	//_delay_ms(1) ;

	//RW COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RW , LOW) ;
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	61 e0       	ldi	r22, 0x01	; 1
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	//_delay_ms(1) ;

	// SEND THE COMMAND
	DIO_SetPortValue (LCD_DATA_PORT ,COPY_LCD_CMD) ;
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    176e:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e8       	ldi	r26, 0x80	; 128
    1778:	bf e3       	ldi	r27, 0x3F	; 63
    177a:	89 8f       	std	Y+25, r24	; 0x19
    177c:	9a 8f       	std	Y+26, r25	; 0x1a
    177e:	ab 8f       	std	Y+27, r26	; 0x1b
    1780:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1782:	69 8d       	ldd	r22, Y+25	; 0x19
    1784:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1786:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1788:	9c 8d       	ldd	r25, Y+28	; 0x1c
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	4a e7       	ldi	r20, 0x7A	; 122
    1790:	53 e4       	ldi	r21, 0x43	; 67
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8d 8b       	std	Y+21, r24	; 0x15
    179c:	9e 8b       	std	Y+22, r25	; 0x16
    179e:	af 8b       	std	Y+23, r26	; 0x17
    17a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17a2:	6d 89       	ldd	r22, Y+21	; 0x15
    17a4:	7e 89       	ldd	r23, Y+22	; 0x16
    17a6:	8f 89       	ldd	r24, Y+23	; 0x17
    17a8:	98 8d       	ldd	r25, Y+24	; 0x18
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e8       	ldi	r20, 0x80	; 128
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9c 8b       	std	Y+20, r25	; 0x14
    17c0:	8b 8b       	std	Y+19, r24	; 0x13
    17c2:	3f c0       	rjmp	.+126    	; 0x1842 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    17c4:	6d 89       	ldd	r22, Y+21	; 0x15
    17c6:	7e 89       	ldd	r23, Y+22	; 0x16
    17c8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ca:	98 8d       	ldd	r25, Y+24	; 0x18
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d8:	18 16       	cp	r1, r24
    17da:	4c f5       	brge	.+82     	; 0x182e <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17dc:	69 8d       	ldd	r22, Y+25	; 0x19
    17de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e2       	ldi	r20, 0x20	; 32
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	9c 8b       	std	Y+20, r25	; 0x14
    1802:	8b 8b       	std	Y+19, r24	; 0x13
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <LCD_voidSendCommand+0xee>
    1806:	89 e1       	ldi	r24, 0x19	; 25
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	9a 8b       	std	Y+18, r25	; 0x12
    180c:	89 8b       	std	Y+17, r24	; 0x11
    180e:	89 89       	ldd	r24, Y+17	; 0x11
    1810:	9a 89       	ldd	r25, Y+18	; 0x12
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <LCD_voidSendCommand+0xdc>
    1816:	9a 8b       	std	Y+18, r25	; 0x12
    1818:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181a:	8b 89       	ldd	r24, Y+19	; 0x13
    181c:	9c 89       	ldd	r25, Y+20	; 0x14
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	9c 8b       	std	Y+20, r25	; 0x14
    1822:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1824:	8b 89       	ldd	r24, Y+19	; 0x13
    1826:	9c 89       	ldd	r25, Y+20	; 0x14
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	69 f7       	brne	.-38     	; 0x1806 <LCD_voidSendCommand+0xd0>
    182c:	14 c0       	rjmp	.+40     	; 0x1856 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182e:	6d 89       	ldd	r22, Y+21	; 0x15
    1830:	7e 89       	ldd	r23, Y+22	; 0x16
    1832:	8f 89       	ldd	r24, Y+23	; 0x17
    1834:	98 8d       	ldd	r25, Y+24	; 0x18
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	9c 8b       	std	Y+20, r25	; 0x14
    1840:	8b 8b       	std	Y+19, r24	; 0x13
    1842:	8b 89       	ldd	r24, Y+19	; 0x13
    1844:	9c 89       	ldd	r25, Y+20	; 0x14
    1846:	98 8b       	std	Y+16, r25	; 0x10
    1848:	8f 87       	std	Y+15, r24	; 0x0f
    184a:	8f 85       	ldd	r24, Y+15	; 0x0f
    184c:	98 89       	ldd	r25, Y+16	; 0x10
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCD_voidSendCommand+0x118>
    1852:	98 8b       	std	Y+16, r25	; 0x10
    1854:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , HIGH) ;
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	62 e0       	ldi	r22, 0x02	; 2
    185a:	41 e0       	ldi	r20, 0x01	; 1
    185c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 e8       	ldi	r26, 0x80	; 128
    1866:	bf e3       	ldi	r27, 0x3F	; 63
    1868:	8b 87       	std	Y+11, r24	; 0x0b
    186a:	9c 87       	std	Y+12, r25	; 0x0c
    186c:	ad 87       	std	Y+13, r26	; 0x0d
    186e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	6b 85       	ldd	r22, Y+11	; 0x0b
    1872:	7c 85       	ldd	r23, Y+12	; 0x0c
    1874:	8d 85       	ldd	r24, Y+13	; 0x0d
    1876:	9e 85       	ldd	r25, Y+14	; 0x0e
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4a e7       	ldi	r20, 0x7A	; 122
    187e:	53 e4       	ldi	r21, 0x43	; 67
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	8f 83       	std	Y+7, r24	; 0x07
    188a:	98 87       	std	Y+8, r25	; 0x08
    188c:	a9 87       	std	Y+9, r26	; 0x09
    188e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a4:	88 23       	and	r24, r24
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <LCD_voidSendCommand+0x17c>
		__ticks = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	3f c0       	rjmp	.+126    	; 0x1930 <LCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    18b2:	6f 81       	ldd	r22, Y+7	; 0x07
    18b4:	78 85       	ldd	r23, Y+8	; 0x08
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	4c f5       	brge	.+82     	; 0x191c <LCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    18cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e2       	ldi	r20, 0x20	; 32
    18d8:	51 e4       	ldi	r21, 0x41	; 65
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <LCD_voidSendCommand+0x1dc>
    18f4:	89 e1       	ldi	r24, 0x19	; 25
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	8b 83       	std	Y+3, r24	; 0x03
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <LCD_voidSendCommand+0x1ca>
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	8d 81       	ldd	r24, Y+5	; 0x05
    1914:	9e 81       	ldd	r25, Y+6	; 0x06
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	69 f7       	brne	.-38     	; 0x18f4 <LCD_voidSendCommand+0x1be>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <LCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	6f 81       	ldd	r22, Y+7	; 0x07
    191e:	78 85       	ldd	r23, Y+8	; 0x08
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	9a 85       	ldd	r25, Y+10	; 0x0a
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9e 83       	std	Y+6, r25	; 0x06
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	8d 81       	ldd	r24, Y+5	; 0x05
    1932:	9e 81       	ldd	r25, Y+6	; 0x06
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	9a 81       	ldd	r25, Y+2	; 0x02
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_voidSendCommand+0x206>
    1940:	9a 83       	std	Y+2, r25	; 0x02
    1942:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , LOW) ;
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	62 e0       	ldi	r22, 0x02	; 2
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

}
    194e:	6d 96       	adiw	r28, 0x1d	; 29
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <LCD_voidWriteData>:
void LCD_voidWriteData (u8  COPY_LCD_WRITE)
{
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	6d 97       	sbiw	r28, 0x1d	; 29
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	8d 8f       	std	Y+29, r24	; 0x1d

	// disable Enable bin
	DIO_SetPinValue (LCD_CTRL_PORT,LCD_EN,LOW);
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	62 e0       	ldi	r22, 0x02	; 2
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//RS COMMAND : HIGH
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RS , HIGH) ;
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	//_delay_ms(1) ;

	//RW COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RW , LOW) ;
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	//_delay_ms(1) ;

	// SEND THE COMMAND
	DIO_SetPortValue (LCD_DATA_PORT ,COPY_LCD_WRITE) ;
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1998:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a0 e8       	ldi	r26, 0x80	; 128
    19a2:	bf e3       	ldi	r27, 0x3F	; 63
    19a4:	89 8f       	std	Y+25, r24	; 0x19
    19a6:	9a 8f       	std	Y+26, r25	; 0x1a
    19a8:	ab 8f       	std	Y+27, r26	; 0x1b
    19aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ac:	69 8d       	ldd	r22, Y+25	; 0x19
    19ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a e7       	ldi	r20, 0x7A	; 122
    19ba:	53 e4       	ldi	r21, 0x43	; 67
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	8d 8b       	std	Y+21, r24	; 0x15
    19c6:	9e 8b       	std	Y+22, r25	; 0x16
    19c8:	af 8b       	std	Y+23, r26	; 0x17
    19ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19cc:	6d 89       	ldd	r22, Y+21	; 0x15
    19ce:	7e 89       	ldd	r23, Y+22	; 0x16
    19d0:	8f 89       	ldd	r24, Y+23	; 0x17
    19d2:	98 8d       	ldd	r25, Y+24	; 0x18
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e8       	ldi	r20, 0x80	; 128
    19da:	5f e3       	ldi	r21, 0x3F	; 63
    19dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e0:	88 23       	and	r24, r24
    19e2:	2c f4       	brge	.+10     	; 0x19ee <LCD_voidWriteData+0x8e>
		__ticks = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9c 8b       	std	Y+20, r25	; 0x14
    19ea:	8b 8b       	std	Y+19, r24	; 0x13
    19ec:	3f c0       	rjmp	.+126    	; 0x1a6c <LCD_voidWriteData+0x10c>
	else if (__tmp > 65535)
    19ee:	6d 89       	ldd	r22, Y+21	; 0x15
    19f0:	7e 89       	ldd	r23, Y+22	; 0x16
    19f2:	8f 89       	ldd	r24, Y+23	; 0x17
    19f4:	98 8d       	ldd	r25, Y+24	; 0x18
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	57 e4       	ldi	r21, 0x47	; 71
    19fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	4c f5       	brge	.+82     	; 0x1a58 <LCD_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a06:	69 8d       	ldd	r22, Y+25	; 0x19
    1a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e2       	ldi	r20, 0x20	; 32
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9c 8b       	std	Y+20, r25	; 0x14
    1a2c:	8b 8b       	std	Y+19, r24	; 0x13
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <LCD_voidWriteData+0xee>
    1a30:	89 e1       	ldi	r24, 0x19	; 25
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9a 8b       	std	Y+18, r25	; 0x12
    1a36:	89 8b       	std	Y+17, r24	; 0x11
    1a38:	89 89       	ldd	r24, Y+17	; 0x11
    1a3a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_voidWriteData+0xdc>
    1a40:	9a 8b       	std	Y+18, r25	; 0x12
    1a42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a44:	8b 89       	ldd	r24, Y+19	; 0x13
    1a46:	9c 89       	ldd	r25, Y+20	; 0x14
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	9c 8b       	std	Y+20, r25	; 0x14
    1a4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a50:	9c 89       	ldd	r25, Y+20	; 0x14
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	69 f7       	brne	.-38     	; 0x1a30 <LCD_voidWriteData+0xd0>
    1a56:	14 c0       	rjmp	.+40     	; 0x1a80 <LCD_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a58:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9c 8b       	std	Y+20, r25	; 0x14
    1a6a:	8b 8b       	std	Y+19, r24	; 0x13
    1a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a70:	98 8b       	std	Y+16, r25	; 0x10
    1a72:	8f 87       	std	Y+15, r24	; 0x0f
    1a74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a76:	98 89       	ldd	r25, Y+16	; 0x10
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <LCD_voidWriteData+0x118>
    1a7c:	98 8b       	std	Y+16, r25	; 0x10
    1a7e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , HIGH) ;
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	62 e0       	ldi	r22, 0x02	; 2
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e8       	ldi	r26, 0x80	; 128
    1a90:	bf e3       	ldi	r27, 0x3F	; 63
    1a92:	8b 87       	std	Y+11, r24	; 0x0b
    1a94:	9c 87       	std	Y+12, r25	; 0x0c
    1a96:	ad 87       	std	Y+13, r26	; 0x0d
    1a98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a e7       	ldi	r20, 0x7A	; 122
    1aa8:	53 e4       	ldi	r21, 0x43	; 67
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8f 83       	std	Y+7, r24	; 0x07
    1ab4:	98 87       	std	Y+8, r25	; 0x08
    1ab6:	a9 87       	std	Y+9, r26	; 0x09
    1ab8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aba:	6f 81       	ldd	r22, Y+7	; 0x07
    1abc:	78 85       	ldd	r23, Y+8	; 0x08
    1abe:	89 85       	ldd	r24, Y+9	; 0x09
    1ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <LCD_voidWriteData+0x17c>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <LCD_voidWriteData+0x1fa>
	else if (__tmp > 65535)
    1adc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ade:	78 85       	ldd	r23, Y+8	; 0x08
    1ae0:	89 85       	ldd	r24, Y+9	; 0x09
    1ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	4c f5       	brge	.+82     	; 0x1b46 <LCD_voidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <LCD_voidWriteData+0x1dc>
    1b1e:	89 e1       	ldi	r24, 0x19	; 25
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9c 83       	std	Y+4, r25	; 0x04
    1b24:	8b 83       	std	Y+3, r24	; 0x03
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_voidWriteData+0x1ca>
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <LCD_voidWriteData+0x1be>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <LCD_voidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b46:	6f 81       	ldd	r22, Y+7	; 0x07
    1b48:	78 85       	ldd	r23, Y+8	; 0x08
    1b4a:	89 85       	ldd	r24, Y+9	; 0x09
    1b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_voidWriteData+0x206>
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , LOW) ;
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

}
    1b78:	6d 96       	adiw	r28, 0x1d	; 29
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 LCD_XPOS , u8 LCD_YPOS)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <LCD_voidGoToXY+0x6>
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	6a 83       	std	Y+2, r22	; 0x02
	// SET DD RAM ADRESS
	LCD_voidSendCommand((LCD_XPOS * 0x40 + LCD_YPOS) | 0b10000000);
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	88 2f       	mov	r24, r24
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	00 24       	eor	r0, r0
    1ba0:	96 95       	lsr	r25
    1ba2:	87 95       	ror	r24
    1ba4:	07 94       	ror	r0
    1ba6:	96 95       	lsr	r25
    1ba8:	87 95       	ror	r24
    1baa:	07 94       	ror	r0
    1bac:	98 2f       	mov	r25, r24
    1bae:	80 2d       	mov	r24, r0
    1bb0:	98 2f       	mov	r25, r24
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	89 0f       	add	r24, r25
    1bb6:	80 68       	ori	r24, 0x80	; 128
    1bb8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_voidSendCommand>

}
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <LCD_voidWriteSpecialChar>:

void LCD_voidWriteSpecialChar(u8 *pattern , u8 block_no, u8 x, u8 y)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	27 97       	sbiw	r28, 0x07	; 7
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	9c 83       	std	Y+4, r25	; 0x04
    1bdc:	8b 83       	std	Y+3, r24	; 0x03
    1bde:	6d 83       	std	Y+5, r22	; 0x05
    1be0:	4e 83       	std	Y+6, r20	; 0x06
    1be2:	2f 83       	std	Y+7, r18	; 0x07
	// variable for loop
	u8 i;

	// every block is 8 bytes so calculate address by multiply it with 8
	u8 address = 8 * block_no ;
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	89 83       	std	Y+1, r24	; 0x01

	// set CG RAM address from data sheet (00 01 A5-A0)
	LCD_voidSendCommand(address | 0b01000000);
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	80 64       	ori	r24, 0x40	; 64
    1bfc:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_voidSendCommand>

	// LOOP to write data from CGRAM to DDRAM (array of 8 bytes)
	for(i = 0 ; i< 8; i++)
    1c00:	1a 82       	std	Y+2, r1	; 0x02
    1c02:	0e c0       	rjmp	.+28     	; 0x1c20 <LCD_voidWriteSpecialChar+0x5a>
	{
		LCD_voidWriteData(pattern[i]);
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	fc 01       	movw	r30, r24
    1c10:	e2 0f       	add	r30, r18
    1c12:	f3 1f       	adc	r31, r19
    1c14:	80 81       	ld	r24, Z
    1c16:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>

	// set CG RAM address from data sheet (00 01 A5-A0)
	LCD_voidSendCommand(address | 0b01000000);

	// LOOP to write data from CGRAM to DDRAM (array of 8 bytes)
	for(i = 0 ; i< 8; i++)
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	8a 83       	std	Y+2, r24	; 0x02
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	88 30       	cpi	r24, 0x08	; 8
    1c24:	78 f3       	brcs	.-34     	; 0x1c04 <LCD_voidWriteSpecialChar+0x3e>
	{
		LCD_voidWriteData(pattern[i]);
	}
	// set DDRAM to write on LCD by using GO TO XY
	LCD_voidGoToXY(x , y);
    1c26:	8e 81       	ldd	r24, Y+6	; 0x06
    1c28:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_voidGoToXY>

	//display block number from CGRAM
	LCD_voidWriteData(block_no);
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
}
    1c34:	27 96       	adiw	r28, 0x07	; 7
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <LCD_voidWriteNumber>:
void LCD_voidWriteNumber(u16 Number)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	2e 97       	sbiw	r28, 0x0e	; 14
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	98 87       	std	Y+8, r25	; 0x08
    1c5c:	8f 83       	std	Y+7, r24	; 0x07
	for(i = 0 ; i<num_digit ; i++)
	{
		LCD_voidWriteData(arr[i]) ;
	}

}
    1c5e:	2d b7       	in	r18, 0x3d	; 61
    1c60:	3e b7       	in	r19, 0x3e	; 62
    1c62:	3e 87       	std	Y+14, r19	; 0x0e
    1c64:	2d 87       	std	Y+13, r18	; 0x0d

	//display block number from CGRAM
	LCD_voidWriteData(block_no);
}
void LCD_voidWriteNumber(u16 Number)
{
    1c66:	8d b7       	in	r24, 0x3d	; 61
    1c68:	9e b7       	in	r25, 0x3e	; 62
    1c6a:	9a 87       	std	Y+10, r25	; 0x0a
    1c6c:	89 87       	std	Y+9, r24	; 0x09
	u8 num_digit = 0 ;
    1c6e:	1c 82       	std	Y+4, r1	; 0x04
	u8 i;
	u16 copy_number = Number;
    1c70:	8f 81       	ldd	r24, Y+7	; 0x07
    1c72:	98 85       	ldd	r25, Y+8	; 0x08
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	0d c0       	rjmp	.+26     	; 0x1c94 <LCD_voidWriteNumber+0x4e>

	while(copy_number != 0)
	{
		copy_number /= 10 ;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7e:	2a e0       	ldi	r18, 0x0A	; 10
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	b9 01       	movw	r22, r18
    1c84:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodhi4>
    1c88:	cb 01       	movw	r24, r22
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	89 83       	std	Y+1, r24	; 0x01
		num_digit += 1;
    1c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c90:	8f 5f       	subi	r24, 0xFF	; 255
    1c92:	8c 83       	std	Y+4, r24	; 0x04
{
	u8 num_digit = 0 ;
	u8 i;
	u16 copy_number = Number;

	while(copy_number != 0)
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	79 f7       	brne	.-34     	; 0x1c7a <LCD_voidWriteNumber+0x34>
	{
		copy_number /= 10 ;
		num_digit += 1;
	}

	u8 arr[num_digit] ;
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	88 2f       	mov	r24, r24
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	2d b7       	in	r18, 0x3d	; 61
    1ca4:	3e b7       	in	r19, 0x3e	; 62
    1ca6:	28 1b       	sub	r18, r24
    1ca8:	39 0b       	sbc	r19, r25
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	3e bf       	out	0x3e, r19	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	2d bf       	out	0x3d, r18	; 61
    1cb4:	8d b7       	in	r24, 0x3d	; 61
    1cb6:	9e b7       	in	r25, 0x3e	; 62
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	9c 87       	std	Y+12, r25	; 0x0c
    1cbc:	8b 87       	std	Y+11, r24	; 0x0b
    1cbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cc0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cc2:	00 96       	adiw	r24, 0x00	; 0
    1cc4:	9c 87       	std	Y+12, r25	; 0x0c
    1cc6:	8b 87       	std	Y+11, r24	; 0x0b
    1cc8:	2b 85       	ldd	r18, Y+11	; 0x0b
    1cca:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ccc:	3e 83       	std	Y+6, r19	; 0x06
    1cce:	2d 83       	std	Y+5, r18	; 0x05

	for(i = num_digit ; i> 0 ; i--)
    1cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
    1cd4:	20 c0       	rjmp	.+64     	; 0x1d16 <LCD_voidWriteNumber+0xd0>
	{
		arr[i-1] = (u8)((Number % 10) +'0') ;
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	88 2f       	mov	r24, r24
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	fc 01       	movw	r30, r24
    1cde:	31 97       	sbiw	r30, 0x01	; 1
    1ce0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce2:	98 85       	ldd	r25, Y+8	; 0x08
    1ce4:	2a e0       	ldi	r18, 0x0A	; 10
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	b9 01       	movw	r22, r18
    1cea:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodhi4>
    1cee:	28 2f       	mov	r18, r24
    1cf0:	20 5d       	subi	r18, 0xD0	; 208
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	e8 0f       	add	r30, r24
    1cf8:	f9 1f       	adc	r31, r25
    1cfa:	20 83       	st	Z, r18
		Number = Number /10 ;
    1cfc:	8f 81       	ldd	r24, Y+7	; 0x07
    1cfe:	98 85       	ldd	r25, Y+8	; 0x08
    1d00:	2a e0       	ldi	r18, 0x0A	; 10
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	b9 01       	movw	r22, r18
    1d06:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodhi4>
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	98 87       	std	Y+8, r25	; 0x08
    1d0e:	8f 83       	std	Y+7, r24	; 0x07
		num_digit += 1;
	}

	u8 arr[num_digit] ;

	for(i = num_digit ; i> 0 ; i--)
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	81 50       	subi	r24, 0x01	; 1
    1d14:	8b 83       	std	Y+3, r24	; 0x03
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	88 23       	and	r24, r24
    1d1a:	e9 f6       	brne	.-70     	; 0x1cd6 <LCD_voidWriteNumber+0x90>
		arr[i-1] = (u8)((Number % 10) +'0') ;
		Number = Number /10 ;
	}


	for(i = 0 ; i<num_digit ; i++)
    1d1c:	1b 82       	std	Y+3, r1	; 0x03
    1d1e:	0e c0       	rjmp	.+28     	; 0x1d3c <LCD_voidWriteNumber+0xf6>
	{
		LCD_voidWriteData(arr[i]) ;
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	e2 0f       	add	r30, r18
    1d2e:	f3 1f       	adc	r31, r19
    1d30:	80 81       	ld	r24, Z
    1d32:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
		arr[i-1] = (u8)((Number % 10) +'0') ;
		Number = Number /10 ;
	}


	for(i = 0 ; i<num_digit ; i++)
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	8f 5f       	subi	r24, 0xFF	; 255
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
    1d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	98 17       	cp	r25, r24
    1d42:	70 f3       	brcs	.-36     	; 0x1d20 <LCD_voidWriteNumber+0xda>
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	9e bf       	out	0x3e, r25	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	8d bf       	out	0x3d, r24	; 61
	{
		LCD_voidWriteData(arr[i]) ;
	}

}
    1d52:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d54:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	3e bf       	out	0x3e, r19	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	2d bf       	out	0x3d, r18	; 61
    1d60:	2e 96       	adiw	r28, 0x0e	; 14
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <LCD_Display>:

void LCD_Display(u8 word[])
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <LCD_Display+0x6>
    1d78:	0f 92       	push	r0
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	9b 83       	std	Y+3, r25	; 0x03
    1d80:	8a 83       	std	Y+2, r24	; 0x02
	u8 i ;

	for(i = 0; word[i]!=0 ;i++)
    1d82:	19 82       	std	Y+1, r1	; 0x01
    1d84:	0e c0       	rjmp	.+28     	; 0x1da2 <LCD_Display+0x30>
	{
		LCD_voidWriteData(word[i]);
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d90:	fc 01       	movw	r30, r24
    1d92:	e2 0f       	add	r30, r18
    1d94:	f3 1f       	adc	r31, r19
    1d96:	80 81       	ld	r24, Z
    1d98:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>

void LCD_Display(u8 word[])
{
	u8 i ;

	for(i = 0; word[i]!=0 ;i++)
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	9b 81       	ldd	r25, Y+3	; 0x03
    1dac:	fc 01       	movw	r30, r24
    1dae:	e2 0f       	add	r30, r18
    1db0:	f3 1f       	adc	r31, r19
    1db2:	80 81       	ld	r24, Z
    1db4:	88 23       	and	r24, r24
    1db6:	39 f7       	brne	.-50     	; 0x1d86 <LCD_Display+0x14>
	{
		LCD_voidWriteData(word[i]);
	}
}
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <main>:
u16 result ;
u16 after_sign = 0 ;
//u8 key = 0;

int main()
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	0f 92       	push	r0
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(DDRA , 0xff);
    1dce:	84 e0       	ldi	r24, 0x04	; 4
    1dd0:	6f ef       	ldi	r22, 0xFF	; 255
    1dd2:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_SetPortDirection>
	DIO_SetPortDirection(DDRC , 0xff);
    1dd6:	86 e0       	ldi	r24, 0x06	; 6
    1dd8:	6f ef       	ldi	r22, 0xFF	; 255
    1dda:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_SetPortDirection>

	LCD_voidInit();
    1dde:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_voidInit>
	LCD_voidSendCommand(0x0c);
    1de2:	8c e0       	ldi	r24, 0x0C	; 12
    1de4:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_voidSendCommand>


	DIO_SetPortDirection(DDRD , 0X0F) ;
    1de8:	87 e0       	ldi	r24, 0x07	; 7
    1dea:	6f e0       	ldi	r22, 0x0F	; 15
    1dec:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_SetPortDirection>
	DIO_SetPortValue(KPD_PORT , 0XFF) ;
    1df0:	83 e0       	ldi	r24, 0x03	; 3
    1df2:	6f ef       	ldi	r22, 0xFF	; 255
    1df4:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>

	DIO_SetPinDirection(DDRA , PIN7 , OUTPUT) ;
    1df8:	84 e0       	ldi	r24, 0x04	; 4
    1dfa:	67 e0       	ldi	r22, 0x07	; 7
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_SetPinDirection>
/*---------------- count from 1 to 16 using kpd and lcd ----------------*/

	u8 key;
	while(1)
	{
		key = 0;
    1e02:	19 82       	std	Y+1, r1	; 0x01
		key = KPD_u8GetPressedKey();
    1e04:	0e 94 d6 08 	call	0x11ac	; 0x11ac <KPD_u8GetPressedKey>
    1e08:	89 83       	std	Y+1, r24	; 0x01

		if(key == 0)
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	88 23       	and	r24, r24
    1e0e:	21 f4       	brne	.+8      	; 0x1e18 <main+0x54>
		{
			key = KPD_u8GetPressedKey();
    1e10:	0e 94 d6 08 	call	0x11ac	; 0x11ac <KPD_u8GetPressedKey>
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	f5 cf       	rjmp	.-22     	; 0x1e02 <main+0x3e>
		}
		else if(key!=0)
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	88 23       	and	r24, r24
    1e1c:	91 f3       	breq	.-28     	; 0x1e02 <main+0x3e>
		{
			//LCD_voidWriteData('0');
			LCD_voidSendCommand(0x01);
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_voidSendCommand>
			LCD_voidGoToXY(0,0);
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_voidGoToXY>
			LCD_voidWriteNumber((u16)key);
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	88 2f       	mov	r24, r24
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
    1e36:	e5 cf       	rjmp	.-54     	; 0x1e02 <main+0x3e>

00001e38 <calculator>:
}



void calculator(u8 key)
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	0f 92       	push	r0
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	89 83       	std	Y+1, r24	; 0x01

	if(key!= 0 && (key == '0' || key == 1 || key == 2 || key == 3 || key == 4 || key == 5 || key == 6 || key == 7 || key == 8 || key == 9))
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	88 23       	and	r24, r24
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <calculator+0x14>
    1e4a:	67 c0       	rjmp	.+206    	; 0x1f1a <calculator+0xe2>
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	80 33       	cpi	r24, 0x30	; 48
    1e50:	e1 f0       	breq	.+56     	; 0x1e8a <calculator+0x52>
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	c9 f0       	breq	.+50     	; 0x1e8a <calculator+0x52>
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	82 30       	cpi	r24, 0x02	; 2
    1e5c:	b1 f0       	breq	.+44     	; 0x1e8a <calculator+0x52>
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	83 30       	cpi	r24, 0x03	; 3
    1e62:	99 f0       	breq	.+38     	; 0x1e8a <calculator+0x52>
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	84 30       	cpi	r24, 0x04	; 4
    1e68:	81 f0       	breq	.+32     	; 0x1e8a <calculator+0x52>
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	85 30       	cpi	r24, 0x05	; 5
    1e6e:	69 f0       	breq	.+26     	; 0x1e8a <calculator+0x52>
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	86 30       	cpi	r24, 0x06	; 6
    1e74:	51 f0       	breq	.+20     	; 0x1e8a <calculator+0x52>
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	87 30       	cpi	r24, 0x07	; 7
    1e7a:	39 f0       	breq	.+14     	; 0x1e8a <calculator+0x52>
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	88 30       	cpi	r24, 0x08	; 8
    1e80:	21 f0       	breq	.+8      	; 0x1e8a <calculator+0x52>
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	89 30       	cpi	r24, 0x09	; 9
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <calculator+0x52>
    1e88:	48 c0       	rjmp	.+144    	; 0x1f1a <calculator+0xe2>
	{
		if(first_num == 1)
    1e8a:	80 91 79 00 	lds	r24, 0x0079
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	e9 f4       	brne	.+58     	; 0x1ecc <calculator+0x94>
		{
			if(key == '0')
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	80 33       	cpi	r24, 0x30	; 48
    1e96:	61 f4       	brne	.+24     	; 0x1eb0 <calculator+0x78>
			{
				num1 = key - '0' ;
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	c0 97       	sbiw	r24, 0x30	; 48
    1ea0:	90 93 7b 00 	sts	0x007B, r25
    1ea4:	80 93 7a 00 	sts	0x007A, r24
				LCD_voidWriteData('0') ;
    1ea8:	80 e3       	ldi	r24, 0x30	; 48
    1eaa:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
    1eae:	35 c0       	rjmp	.+106    	; 0x1f1a <calculator+0xe2>
			}
			else
			{
				num1 = (u16) key ;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	90 93 7b 00 	sts	0x007B, r25
    1eba:	80 93 7a 00 	sts	0x007A, r24
				LCD_voidWriteNumber(num1);
    1ebe:	80 91 7a 00 	lds	r24, 0x007A
    1ec2:	90 91 7b 00 	lds	r25, 0x007B
    1ec6:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
    1eca:	27 c0       	rjmp	.+78     	; 0x1f1a <calculator+0xe2>
			}
		}
		else
		{
			if(key == '0' && operator == '/')
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	80 33       	cpi	r24, 0x30	; 48
    1ed0:	41 f4       	brne	.+16     	; 0x1ee2 <calculator+0xaa>
    1ed2:	80 91 78 00 	lds	r24, 0x0078
    1ed6:	8f 32       	cpi	r24, 0x2F	; 47
    1ed8:	21 f4       	brne	.+8      	; 0x1ee2 <calculator+0xaa>
			{
				key = KPD_u8GetPressedKey();
    1eda:	0e 94 d6 08 	call	0x11ac	; 0x11ac <KPD_u8GetPressedKey>
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	1c c0       	rjmp	.+56     	; 0x1f1a <calculator+0xe2>
				//num2 = key - '0' ;
				//LCD_voidWriteData(key) ;
			}
			else if(key == '0')
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	80 33       	cpi	r24, 0x30	; 48
    1ee6:	61 f4       	brne	.+24     	; 0x1f00 <calculator+0xc8>
			{
				num2 = key - '0' ;
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	c0 97       	sbiw	r24, 0x30	; 48
    1ef0:	90 93 7d 00 	sts	0x007D, r25
    1ef4:	80 93 7c 00 	sts	0x007C, r24
				LCD_voidWriteData('0') ;
    1ef8:	80 e3       	ldi	r24, 0x30	; 48
    1efa:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
    1efe:	0d c0       	rjmp	.+26     	; 0x1f1a <calculator+0xe2>
			}
			else
			{
				num2 = (u16) key;
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	90 93 7d 00 	sts	0x007D, r25
    1f0a:	80 93 7c 00 	sts	0x007C, r24
				LCD_voidWriteNumber(num2);
    1f0e:	80 91 7c 00 	lds	r24, 0x007C
    1f12:	90 91 7d 00 	lds	r25, 0x007D
    1f16:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
			}
		}
	}

	if(key != 0 && (key == '+' || key == '-' || key == '*' || key == '/'))
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	88 23       	and	r24, r24
    1f1e:	a9 f0       	breq	.+42     	; 0x1f4a <calculator+0x112>
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	8b 32       	cpi	r24, 0x2B	; 43
    1f24:	49 f0       	breq	.+18     	; 0x1f38 <calculator+0x100>
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	8d 32       	cpi	r24, 0x2D	; 45
    1f2a:	31 f0       	breq	.+12     	; 0x1f38 <calculator+0x100>
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	8a 32       	cpi	r24, 0x2A	; 42
    1f30:	19 f0       	breq	.+6      	; 0x1f38 <calculator+0x100>
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	8f 32       	cpi	r24, 0x2F	; 47
    1f36:	49 f4       	brne	.+18     	; 0x1f4a <calculator+0x112>
	{
		operator = key ;
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	80 93 78 00 	sts	0x0078, r24
		LCD_voidWriteData(operator) ;
    1f3e:	80 91 78 00 	lds	r24, 0x0078
    1f42:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
		first_num = 0 ;
    1f46:	10 92 79 00 	sts	0x0079, r1
	}

	if(key != 0 && key == '=')
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	88 23       	and	r24, r24
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <calculator+0x11a>
    1f50:	e9 c0       	rjmp	.+466    	; 0x2124 <calculator+0x2ec>
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	8d 33       	cpi	r24, 0x3D	; 61
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <calculator+0x122>
    1f58:	e5 c0       	rjmp	.+458    	; 0x2124 <calculator+0x2ec>
	  {
		LCD_voidWriteData(key) ;
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
	    //LCD_voidGoToXY(1,2) ;

	    if(operator == '+')
    1f60:	80 91 78 00 	lds	r24, 0x0078
    1f64:	8b 32       	cpi	r24, 0x2B	; 43
    1f66:	a9 f4       	brne	.+42     	; 0x1f92 <calculator+0x15a>
	    {
	      result = num1 + num2 ;
    1f68:	20 91 7a 00 	lds	r18, 0x007A
    1f6c:	30 91 7b 00 	lds	r19, 0x007B
    1f70:	80 91 7c 00 	lds	r24, 0x007C
    1f74:	90 91 7d 00 	lds	r25, 0x007D
    1f78:	82 0f       	add	r24, r18
    1f7a:	93 1f       	adc	r25, r19
    1f7c:	90 93 81 00 	sts	0x0081, r25
    1f80:	80 93 80 00 	sts	0x0080, r24
	      LCD_voidWriteNumber(result);
    1f84:	80 91 80 00 	lds	r24, 0x0080
    1f88:	90 91 81 00 	lds	r25, 0x0081
    1f8c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
    1f90:	c7 c0       	rjmp	.+398    	; 0x2120 <calculator+0x2e8>
	    }
	    else if (operator == '-')
    1f92:	80 91 78 00 	lds	r24, 0x0078
    1f96:	8d 32       	cpi	r24, 0x2D	; 45
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <calculator+0x164>
    1f9a:	57 c0       	rjmp	.+174    	; 0x204a <calculator+0x212>
	    {
	    	if(num1 == num2)
    1f9c:	20 91 7a 00 	lds	r18, 0x007A
    1fa0:	30 91 7b 00 	lds	r19, 0x007B
    1fa4:	80 91 7c 00 	lds	r24, 0x007C
    1fa8:	90 91 7d 00 	lds	r25, 0x007D
    1fac:	28 17       	cp	r18, r24
    1fae:	39 07       	cpc	r19, r25
    1fb0:	21 f4       	brne	.+8      	; 0x1fba <calculator+0x182>
	    	{
	    		LCD_voidWriteData('0');
    1fb2:	80 e3       	ldi	r24, 0x30	; 48
    1fb4:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
    1fb8:	b3 c0       	rjmp	.+358    	; 0x2120 <calculator+0x2e8>
	    	}
	    	else if(num1 > num2)
    1fba:	20 91 7a 00 	lds	r18, 0x007A
    1fbe:	30 91 7b 00 	lds	r19, 0x007B
    1fc2:	80 91 7c 00 	lds	r24, 0x007C
    1fc6:	90 91 7d 00 	lds	r25, 0x007D
    1fca:	82 17       	cp	r24, r18
    1fcc:	93 07       	cpc	r25, r19
    1fce:	b8 f4       	brcc	.+46     	; 0x1ffe <calculator+0x1c6>
	    	{
	    		result = num1 - num2 ;
    1fd0:	20 91 7a 00 	lds	r18, 0x007A
    1fd4:	30 91 7b 00 	lds	r19, 0x007B
    1fd8:	80 91 7c 00 	lds	r24, 0x007C
    1fdc:	90 91 7d 00 	lds	r25, 0x007D
    1fe0:	a9 01       	movw	r20, r18
    1fe2:	48 1b       	sub	r20, r24
    1fe4:	59 0b       	sbc	r21, r25
    1fe6:	ca 01       	movw	r24, r20
    1fe8:	90 93 81 00 	sts	0x0081, r25
    1fec:	80 93 80 00 	sts	0x0080, r24
	    		LCD_voidWriteNumber(result);
    1ff0:	80 91 80 00 	lds	r24, 0x0080
    1ff4:	90 91 81 00 	lds	r25, 0x0081
    1ff8:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
    1ffc:	91 c0       	rjmp	.+290    	; 0x2120 <calculator+0x2e8>
	    	}
	    	else if(num1 < num2)
    1ffe:	20 91 7a 00 	lds	r18, 0x007A
    2002:	30 91 7b 00 	lds	r19, 0x007B
    2006:	80 91 7c 00 	lds	r24, 0x007C
    200a:	90 91 7d 00 	lds	r25, 0x007D
    200e:	28 17       	cp	r18, r24
    2010:	39 07       	cpc	r19, r25
    2012:	08 f0       	brcs	.+2      	; 0x2016 <calculator+0x1de>
    2014:	85 c0       	rjmp	.+266    	; 0x2120 <calculator+0x2e8>
	    	{
	    		result = num2 - num1 ;
    2016:	20 91 7c 00 	lds	r18, 0x007C
    201a:	30 91 7d 00 	lds	r19, 0x007D
    201e:	80 91 7a 00 	lds	r24, 0x007A
    2022:	90 91 7b 00 	lds	r25, 0x007B
    2026:	a9 01       	movw	r20, r18
    2028:	48 1b       	sub	r20, r24
    202a:	59 0b       	sbc	r21, r25
    202c:	ca 01       	movw	r24, r20
    202e:	90 93 81 00 	sts	0x0081, r25
    2032:	80 93 80 00 	sts	0x0080, r24
	    		LCD_voidWriteData('-') ;
    2036:	8d e2       	ldi	r24, 0x2D	; 45
    2038:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
	    		LCD_voidWriteNumber(result);
    203c:	80 91 80 00 	lds	r24, 0x0080
    2040:	90 91 81 00 	lds	r25, 0x0081
    2044:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
    2048:	6b c0       	rjmp	.+214    	; 0x2120 <calculator+0x2e8>
	    	}

	    }
	     else if (operator == '*')
    204a:	80 91 78 00 	lds	r24, 0x0078
    204e:	8a 32       	cpi	r24, 0x2A	; 42
    2050:	d9 f4       	brne	.+54     	; 0x2088 <calculator+0x250>
	    {
	      result = num1 * num2 ;
    2052:	20 91 7a 00 	lds	r18, 0x007A
    2056:	30 91 7b 00 	lds	r19, 0x007B
    205a:	80 91 7c 00 	lds	r24, 0x007C
    205e:	90 91 7d 00 	lds	r25, 0x007D
    2062:	ac 01       	movw	r20, r24
    2064:	24 9f       	mul	r18, r20
    2066:	c0 01       	movw	r24, r0
    2068:	25 9f       	mul	r18, r21
    206a:	90 0d       	add	r25, r0
    206c:	34 9f       	mul	r19, r20
    206e:	90 0d       	add	r25, r0
    2070:	11 24       	eor	r1, r1
    2072:	90 93 81 00 	sts	0x0081, r25
    2076:	80 93 80 00 	sts	0x0080, r24
	      LCD_voidWriteNumber(result);
    207a:	80 91 80 00 	lds	r24, 0x0080
    207e:	90 91 81 00 	lds	r25, 0x0081
    2082:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
    2086:	4c c0       	rjmp	.+152    	; 0x2120 <calculator+0x2e8>
	    }
	     else if (operator == '/')
    2088:	80 91 78 00 	lds	r24, 0x0078
    208c:	8f 32       	cpi	r24, 0x2F	; 47
    208e:	09 f0       	breq	.+2      	; 0x2092 <calculator+0x25a>
    2090:	47 c0       	rjmp	.+142    	; 0x2120 <calculator+0x2e8>
	    {

	        result = num1 / num2 ;
    2092:	80 91 7a 00 	lds	r24, 0x007A
    2096:	90 91 7b 00 	lds	r25, 0x007B
    209a:	20 91 7c 00 	lds	r18, 0x007C
    209e:	30 91 7d 00 	lds	r19, 0x007D
    20a2:	b9 01       	movw	r22, r18
    20a4:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodhi4>
    20a8:	cb 01       	movw	r24, r22
    20aa:	90 93 81 00 	sts	0x0081, r25
    20ae:	80 93 80 00 	sts	0x0080, r24
	        after_sign = (100 * (num1 % num2)) / num2 ;
    20b2:	80 91 7a 00 	lds	r24, 0x007A
    20b6:	90 91 7b 00 	lds	r25, 0x007B
    20ba:	20 91 7c 00 	lds	r18, 0x007C
    20be:	30 91 7d 00 	lds	r19, 0x007D
    20c2:	b9 01       	movw	r22, r18
    20c4:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodhi4>
    20c8:	9c 01       	movw	r18, r24
    20ca:	84 e6       	ldi	r24, 0x64	; 100
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	ac 01       	movw	r20, r24
    20d0:	24 9f       	mul	r18, r20
    20d2:	c0 01       	movw	r24, r0
    20d4:	25 9f       	mul	r18, r21
    20d6:	90 0d       	add	r25, r0
    20d8:	34 9f       	mul	r19, r20
    20da:	90 0d       	add	r25, r0
    20dc:	11 24       	eor	r1, r1
    20de:	20 91 7c 00 	lds	r18, 0x007C
    20e2:	30 91 7d 00 	lds	r19, 0x007D
    20e6:	b9 01       	movw	r22, r18
    20e8:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodhi4>
    20ec:	cb 01       	movw	r24, r22
    20ee:	90 93 7f 00 	sts	0x007F, r25
    20f2:	80 93 7e 00 	sts	0x007E, r24
	        LCD_voidWriteNumber(result);
    20f6:	80 91 80 00 	lds	r24, 0x0080
    20fa:	90 91 81 00 	lds	r25, 0x0081
    20fe:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
	        if(after_sign != 0)
    2102:	80 91 7e 00 	lds	r24, 0x007E
    2106:	90 91 7f 00 	lds	r25, 0x007F
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	49 f0       	breq	.+18     	; 0x2120 <calculator+0x2e8>
	        {
	        	  LCD_voidWriteData('.');
    210e:	8e e2       	ldi	r24, 0x2E	; 46
    2110:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
	        	  LCD_voidWriteNumber(after_sign);
    2114:	80 91 7e 00 	lds	r24, 0x007E
    2118:	90 91 7f 00 	lds	r25, 0x007F
    211c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
	       }
 	    }

	    LCD_clearData();
    2120:	0e 94 a5 10 	call	0x214a	; 0x214a <LCD_clearData>
	  }

	if (key!= 0 && key == 'c')
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	88 23       	and	r24, r24
    2128:	61 f0       	breq	.+24     	; 0x2142 <calculator+0x30a>
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	83 36       	cpi	r24, 0x63	; 99
    212e:	49 f4       	brne	.+18     	; 0x2142 <calculator+0x30a>
	  {
	    LCD_voidSendCommand(0x01);
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_voidSendCommand>
	    LCD_voidGoToXY(0,0) ;
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_voidGoToXY>
	    LCD_clearData();
    213e:	0e 94 a5 10 	call	0x214a	; 0x214a <LCD_clearData>
	  }

}
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <LCD_clearData>:
void LCD_clearData()
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
	    first_num = 1 ;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	80 93 79 00 	sts	0x0079, r24
	    num1    = 0  ;
    2158:	10 92 7b 00 	sts	0x007B, r1
    215c:	10 92 7a 00 	sts	0x007A, r1
	    num2    = 0  ;
    2160:	10 92 7d 00 	sts	0x007D, r1
    2164:	10 92 7c 00 	sts	0x007C, r1
	    operator  = ' ' ;
    2168:	80 e2       	ldi	r24, 0x20	; 32
    216a:	80 93 78 00 	sts	0x0078, r24
	    result   = 0 ;
    216e:	10 92 81 00 	sts	0x0081, r1
    2172:	10 92 80 00 	sts	0x0080, r1
	    after_sign = 0;
    2176:	10 92 7f 00 	sts	0x007F, r1
    217a:	10 92 7e 00 	sts	0x007E, r1

}
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <allCalculator>:

/////////////////////////////////////////////////////////////////////////////////////////

void allCalculator(u8 key)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	0f 92       	push	r0
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	89 83       	std	Y+1, r24	; 0x01
	//u8 count1 = 0;

	if(key!= 0 && (key == '0' || key == 1 || key == 2 || key == 3 || key == 4 || key == 5 || key == 6 || key == 7 || key == 8 || key == 9))
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	88 23       	and	r24, r24
    2194:	09 f4       	brne	.+2      	; 0x2198 <allCalculator+0x14>
    2196:	a5 c0       	rjmp	.+330    	; 0x22e2 <allCalculator+0x15e>
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	80 33       	cpi	r24, 0x30	; 48
    219c:	e1 f0       	breq	.+56     	; 0x21d6 <allCalculator+0x52>
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	c9 f0       	breq	.+50     	; 0x21d6 <allCalculator+0x52>
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	82 30       	cpi	r24, 0x02	; 2
    21a8:	b1 f0       	breq	.+44     	; 0x21d6 <allCalculator+0x52>
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	83 30       	cpi	r24, 0x03	; 3
    21ae:	99 f0       	breq	.+38     	; 0x21d6 <allCalculator+0x52>
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	84 30       	cpi	r24, 0x04	; 4
    21b4:	81 f0       	breq	.+32     	; 0x21d6 <allCalculator+0x52>
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	85 30       	cpi	r24, 0x05	; 5
    21ba:	69 f0       	breq	.+26     	; 0x21d6 <allCalculator+0x52>
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	86 30       	cpi	r24, 0x06	; 6
    21c0:	51 f0       	breq	.+20     	; 0x21d6 <allCalculator+0x52>
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	87 30       	cpi	r24, 0x07	; 7
    21c6:	39 f0       	breq	.+14     	; 0x21d6 <allCalculator+0x52>
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	88 30       	cpi	r24, 0x08	; 8
    21cc:	21 f0       	breq	.+8      	; 0x21d6 <allCalculator+0x52>
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	89 30       	cpi	r24, 0x09	; 9
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <allCalculator+0x52>
    21d4:	86 c0       	rjmp	.+268    	; 0x22e2 <allCalculator+0x15e>
	{
		if(first_num == 1)
    21d6:	80 91 79 00 	lds	r24, 0x0079
    21da:	81 30       	cpi	r24, 0x01	; 1
    21dc:	e1 f5       	brne	.+120    	; 0x2256 <allCalculator+0xd2>
		{
			if(key == '0')
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	80 33       	cpi	r24, 0x30	; 48
    21e2:	e1 f4       	brne	.+56     	; 0x221c <allCalculator+0x98>
			{
				num1 =  (num1 * 10 ) + (u16) key -'0';
    21e4:	80 91 7a 00 	lds	r24, 0x007A
    21e8:	90 91 7b 00 	lds	r25, 0x007B
    21ec:	9c 01       	movw	r18, r24
    21ee:	22 0f       	add	r18, r18
    21f0:	33 1f       	adc	r19, r19
    21f2:	c9 01       	movw	r24, r18
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	28 0f       	add	r18, r24
    21fe:	39 1f       	adc	r19, r25
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	82 0f       	add	r24, r18
    2208:	93 1f       	adc	r25, r19
    220a:	c0 97       	sbiw	r24, 0x30	; 48
    220c:	90 93 7b 00 	sts	0x007B, r25
    2210:	80 93 7a 00 	sts	0x007A, r24
				LCD_voidWriteData('0') ;
    2214:	80 e3       	ldi	r24, 0x30	; 48
    2216:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
    221a:	63 c0       	rjmp	.+198    	; 0x22e2 <allCalculator+0x15e>
			}
			else
			{
				num1 = (num1 * 10 ) + (u16) key ;
    221c:	80 91 7a 00 	lds	r24, 0x007A
    2220:	90 91 7b 00 	lds	r25, 0x007B
    2224:	9c 01       	movw	r18, r24
    2226:	22 0f       	add	r18, r18
    2228:	33 1f       	adc	r19, r19
    222a:	c9 01       	movw	r24, r18
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	28 0f       	add	r18, r24
    2236:	39 1f       	adc	r19, r25
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	88 2f       	mov	r24, r24
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	82 0f       	add	r24, r18
    2240:	93 1f       	adc	r25, r19
    2242:	90 93 7b 00 	sts	0x007B, r25
    2246:	80 93 7a 00 	sts	0x007A, r24
				LCD_voidWriteNumber((u16)key);
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
    2254:	46 c0       	rjmp	.+140    	; 0x22e2 <allCalculator+0x15e>
			}
		}
		else
		{
			if(key == '0' && operator == '/')
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	80 33       	cpi	r24, 0x30	; 48
    225a:	41 f4       	brne	.+16     	; 0x226c <allCalculator+0xe8>
    225c:	80 91 78 00 	lds	r24, 0x0078
    2260:	8f 32       	cpi	r24, 0x2F	; 47
    2262:	21 f4       	brne	.+8      	; 0x226c <allCalculator+0xe8>
			{
				key = KPD_u8GetPressedKey();
    2264:	0e 94 d6 08 	call	0x11ac	; 0x11ac <KPD_u8GetPressedKey>
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	3b c0       	rjmp	.+118    	; 0x22e2 <allCalculator+0x15e>
				//num2 = key - '0' ;
				//LCD_voidWriteData(key) ;
			}
			else if(key == '0')
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	80 33       	cpi	r24, 0x30	; 48
    2270:	e1 f4       	brne	.+56     	; 0x22aa <allCalculator+0x126>
			{
				num2 = (num2 * 10 ) + (u16) key -'0' ;
    2272:	80 91 7c 00 	lds	r24, 0x007C
    2276:	90 91 7d 00 	lds	r25, 0x007D
    227a:	9c 01       	movw	r18, r24
    227c:	22 0f       	add	r18, r18
    227e:	33 1f       	adc	r19, r19
    2280:	c9 01       	movw	r24, r18
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	28 0f       	add	r18, r24
    228c:	39 1f       	adc	r19, r25
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	82 0f       	add	r24, r18
    2296:	93 1f       	adc	r25, r19
    2298:	c0 97       	sbiw	r24, 0x30	; 48
    229a:	90 93 7d 00 	sts	0x007D, r25
    229e:	80 93 7c 00 	sts	0x007C, r24
				LCD_voidWriteData('0') ;
    22a2:	80 e3       	ldi	r24, 0x30	; 48
    22a4:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
    22a8:	1c c0       	rjmp	.+56     	; 0x22e2 <allCalculator+0x15e>
			}
			else
			{
				num2 = (num2 * 10 ) + (u16) key ;
    22aa:	80 91 7c 00 	lds	r24, 0x007C
    22ae:	90 91 7d 00 	lds	r25, 0x007D
    22b2:	9c 01       	movw	r18, r24
    22b4:	22 0f       	add	r18, r18
    22b6:	33 1f       	adc	r19, r19
    22b8:	c9 01       	movw	r24, r18
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	28 0f       	add	r18, r24
    22c4:	39 1f       	adc	r19, r25
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	82 0f       	add	r24, r18
    22ce:	93 1f       	adc	r25, r19
    22d0:	90 93 7d 00 	sts	0x007D, r25
    22d4:	80 93 7c 00 	sts	0x007C, r24
				LCD_voidWriteNumber((u16)key);
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	88 2f       	mov	r24, r24
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
			}
		}
	}

	if(key != 0 && (key == '+' || key == '-' || key == '*' || key == '/'))
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	88 23       	and	r24, r24
    22e6:	a9 f0       	breq	.+42     	; 0x2312 <allCalculator+0x18e>
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	8b 32       	cpi	r24, 0x2B	; 43
    22ec:	49 f0       	breq	.+18     	; 0x2300 <allCalculator+0x17c>
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	8d 32       	cpi	r24, 0x2D	; 45
    22f2:	31 f0       	breq	.+12     	; 0x2300 <allCalculator+0x17c>
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	8a 32       	cpi	r24, 0x2A	; 42
    22f8:	19 f0       	breq	.+6      	; 0x2300 <allCalculator+0x17c>
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	8f 32       	cpi	r24, 0x2F	; 47
    22fe:	49 f4       	brne	.+18     	; 0x2312 <allCalculator+0x18e>
	{
		operator = key ;
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	80 93 78 00 	sts	0x0078, r24
		LCD_voidWriteData(operator) ;
    2306:	80 91 78 00 	lds	r24, 0x0078
    230a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
		first_num = 0 ;
    230e:	10 92 79 00 	sts	0x0079, r1
	}

	if(key != 0 && key == '=')
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	88 23       	and	r24, r24
    2316:	09 f4       	brne	.+2      	; 0x231a <allCalculator+0x196>
    2318:	f2 c0       	rjmp	.+484    	; 0x24fe <allCalculator+0x37a>
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	8d 33       	cpi	r24, 0x3D	; 61
    231e:	09 f0       	breq	.+2      	; 0x2322 <allCalculator+0x19e>
    2320:	ee c0       	rjmp	.+476    	; 0x24fe <allCalculator+0x37a>
	  {
		LCD_voidWriteData(key) ;
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
	    //LCD_voidGoToXY(1,2) ;

	    if(operator == '+')
    2328:	80 91 78 00 	lds	r24, 0x0078
    232c:	8b 32       	cpi	r24, 0x2B	; 43
    232e:	a9 f4       	brne	.+42     	; 0x235a <allCalculator+0x1d6>
	    {
	      result = num1 + num2 ;
    2330:	20 91 7a 00 	lds	r18, 0x007A
    2334:	30 91 7b 00 	lds	r19, 0x007B
    2338:	80 91 7c 00 	lds	r24, 0x007C
    233c:	90 91 7d 00 	lds	r25, 0x007D
    2340:	82 0f       	add	r24, r18
    2342:	93 1f       	adc	r25, r19
    2344:	90 93 81 00 	sts	0x0081, r25
    2348:	80 93 80 00 	sts	0x0080, r24
	      LCD_voidWriteNumber(result);
    234c:	80 91 80 00 	lds	r24, 0x0080
    2350:	90 91 81 00 	lds	r25, 0x0081
    2354:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
    2358:	d0 c0       	rjmp	.+416    	; 0x24fa <allCalculator+0x376>
	    }
	    else if (operator == '-')
    235a:	80 91 78 00 	lds	r24, 0x0078
    235e:	8d 32       	cpi	r24, 0x2D	; 45
    2360:	09 f0       	breq	.+2      	; 0x2364 <allCalculator+0x1e0>
    2362:	57 c0       	rjmp	.+174    	; 0x2412 <allCalculator+0x28e>
	    {
	    	if(num1 == num2)
    2364:	20 91 7a 00 	lds	r18, 0x007A
    2368:	30 91 7b 00 	lds	r19, 0x007B
    236c:	80 91 7c 00 	lds	r24, 0x007C
    2370:	90 91 7d 00 	lds	r25, 0x007D
    2374:	28 17       	cp	r18, r24
    2376:	39 07       	cpc	r19, r25
    2378:	21 f4       	brne	.+8      	; 0x2382 <allCalculator+0x1fe>
	    	{
	    		LCD_voidWriteData('0') ;
    237a:	80 e3       	ldi	r24, 0x30	; 48
    237c:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
    2380:	bc c0       	rjmp	.+376    	; 0x24fa <allCalculator+0x376>
	    	}
	    	else if(num1 >= num2)
    2382:	20 91 7a 00 	lds	r18, 0x007A
    2386:	30 91 7b 00 	lds	r19, 0x007B
    238a:	80 91 7c 00 	lds	r24, 0x007C
    238e:	90 91 7d 00 	lds	r25, 0x007D
    2392:	28 17       	cp	r18, r24
    2394:	39 07       	cpc	r19, r25
    2396:	b8 f0       	brcs	.+46     	; 0x23c6 <allCalculator+0x242>
	    	{
	    		result = num1 - num2 ;
    2398:	20 91 7a 00 	lds	r18, 0x007A
    239c:	30 91 7b 00 	lds	r19, 0x007B
    23a0:	80 91 7c 00 	lds	r24, 0x007C
    23a4:	90 91 7d 00 	lds	r25, 0x007D
    23a8:	a9 01       	movw	r20, r18
    23aa:	48 1b       	sub	r20, r24
    23ac:	59 0b       	sbc	r21, r25
    23ae:	ca 01       	movw	r24, r20
    23b0:	90 93 81 00 	sts	0x0081, r25
    23b4:	80 93 80 00 	sts	0x0080, r24
	    		LCD_voidWriteNumber(result);
    23b8:	80 91 80 00 	lds	r24, 0x0080
    23bc:	90 91 81 00 	lds	r25, 0x0081
    23c0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
    23c4:	9a c0       	rjmp	.+308    	; 0x24fa <allCalculator+0x376>
	    	}
	    	else if(num1 < num2)
    23c6:	20 91 7a 00 	lds	r18, 0x007A
    23ca:	30 91 7b 00 	lds	r19, 0x007B
    23ce:	80 91 7c 00 	lds	r24, 0x007C
    23d2:	90 91 7d 00 	lds	r25, 0x007D
    23d6:	28 17       	cp	r18, r24
    23d8:	39 07       	cpc	r19, r25
    23da:	08 f0       	brcs	.+2      	; 0x23de <allCalculator+0x25a>
    23dc:	8e c0       	rjmp	.+284    	; 0x24fa <allCalculator+0x376>
	    	{
	    		result = num2 - num1 ;
    23de:	20 91 7c 00 	lds	r18, 0x007C
    23e2:	30 91 7d 00 	lds	r19, 0x007D
    23e6:	80 91 7a 00 	lds	r24, 0x007A
    23ea:	90 91 7b 00 	lds	r25, 0x007B
    23ee:	a9 01       	movw	r20, r18
    23f0:	48 1b       	sub	r20, r24
    23f2:	59 0b       	sbc	r21, r25
    23f4:	ca 01       	movw	r24, r20
    23f6:	90 93 81 00 	sts	0x0081, r25
    23fa:	80 93 80 00 	sts	0x0080, r24
	    		LCD_voidWriteData('-') ;
    23fe:	8d e2       	ldi	r24, 0x2D	; 45
    2400:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
	    		LCD_voidWriteNumber(result);
    2404:	80 91 80 00 	lds	r24, 0x0080
    2408:	90 91 81 00 	lds	r25, 0x0081
    240c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
    2410:	74 c0       	rjmp	.+232    	; 0x24fa <allCalculator+0x376>
	    	}
	    }
	     else if (operator == '*')
    2412:	80 91 78 00 	lds	r24, 0x0078
    2416:	8a 32       	cpi	r24, 0x2A	; 42
    2418:	d9 f4       	brne	.+54     	; 0x2450 <allCalculator+0x2cc>
	    {
	      result = num1 * num2 ;
    241a:	20 91 7a 00 	lds	r18, 0x007A
    241e:	30 91 7b 00 	lds	r19, 0x007B
    2422:	80 91 7c 00 	lds	r24, 0x007C
    2426:	90 91 7d 00 	lds	r25, 0x007D
    242a:	ac 01       	movw	r20, r24
    242c:	24 9f       	mul	r18, r20
    242e:	c0 01       	movw	r24, r0
    2430:	25 9f       	mul	r18, r21
    2432:	90 0d       	add	r25, r0
    2434:	34 9f       	mul	r19, r20
    2436:	90 0d       	add	r25, r0
    2438:	11 24       	eor	r1, r1
    243a:	90 93 81 00 	sts	0x0081, r25
    243e:	80 93 80 00 	sts	0x0080, r24
	      LCD_voidWriteNumber(result);
    2442:	80 91 80 00 	lds	r24, 0x0080
    2446:	90 91 81 00 	lds	r25, 0x0081
    244a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
    244e:	55 c0       	rjmp	.+170    	; 0x24fa <allCalculator+0x376>
	    }
	     else if (operator == '/')
    2450:	80 91 78 00 	lds	r24, 0x0078
    2454:	8f 32       	cpi	r24, 0x2F	; 47
    2456:	09 f0       	breq	.+2      	; 0x245a <allCalculator+0x2d6>
    2458:	50 c0       	rjmp	.+160    	; 0x24fa <allCalculator+0x376>
	    {

	        result = num1 / num2 ;
    245a:	80 91 7a 00 	lds	r24, 0x007A
    245e:	90 91 7b 00 	lds	r25, 0x007B
    2462:	20 91 7c 00 	lds	r18, 0x007C
    2466:	30 91 7d 00 	lds	r19, 0x007D
    246a:	b9 01       	movw	r22, r18
    246c:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodhi4>
    2470:	cb 01       	movw	r24, r22
    2472:	90 93 81 00 	sts	0x0081, r25
    2476:	80 93 80 00 	sts	0x0080, r24
	        after_sign = (100 * (num1 % num2)) / num2 ;
    247a:	80 91 7a 00 	lds	r24, 0x007A
    247e:	90 91 7b 00 	lds	r25, 0x007B
    2482:	20 91 7c 00 	lds	r18, 0x007C
    2486:	30 91 7d 00 	lds	r19, 0x007D
    248a:	b9 01       	movw	r22, r18
    248c:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodhi4>
    2490:	9c 01       	movw	r18, r24
    2492:	84 e6       	ldi	r24, 0x64	; 100
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	ac 01       	movw	r20, r24
    2498:	24 9f       	mul	r18, r20
    249a:	c0 01       	movw	r24, r0
    249c:	25 9f       	mul	r18, r21
    249e:	90 0d       	add	r25, r0
    24a0:	34 9f       	mul	r19, r20
    24a2:	90 0d       	add	r25, r0
    24a4:	11 24       	eor	r1, r1
    24a6:	20 91 7c 00 	lds	r18, 0x007C
    24aa:	30 91 7d 00 	lds	r19, 0x007D
    24ae:	b9 01       	movw	r22, r18
    24b0:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodhi4>
    24b4:	cb 01       	movw	r24, r22
    24b6:	90 93 7f 00 	sts	0x007F, r25
    24ba:	80 93 7e 00 	sts	0x007E, r24
	        LCD_voidWriteNumber(result);
    24be:	80 91 80 00 	lds	r24, 0x0080
    24c2:	90 91 81 00 	lds	r25, 0x0081
    24c6:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
	        if(result == 0)
    24ca:	80 91 80 00 	lds	r24, 0x0080
    24ce:	90 91 81 00 	lds	r25, 0x0081
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	19 f4       	brne	.+6      	; 0x24dc <allCalculator+0x358>
	        {
	        	LCD_voidWriteData('0') ;
    24d6:	80 e3       	ldi	r24, 0x30	; 48
    24d8:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
	        }
	        if(after_sign != 0)
    24dc:	80 91 7e 00 	lds	r24, 0x007E
    24e0:	90 91 7f 00 	lds	r25, 0x007F
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	49 f0       	breq	.+18     	; 0x24fa <allCalculator+0x376>
	        {
	        	  LCD_voidWriteData('.');
    24e8:	8e e2       	ldi	r24, 0x2E	; 46
    24ea:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidWriteData>
	        	  LCD_voidWriteNumber(after_sign);
    24ee:	80 91 7e 00 	lds	r24, 0x007E
    24f2:	90 91 7f 00 	lds	r25, 0x007F
    24f6:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidWriteNumber>
	       }
 	    }

	    LCD_clearData();
    24fa:	0e 94 a5 10 	call	0x214a	; 0x214a <LCD_clearData>
	  }

	if (key!= 0 && key == 'c')
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	88 23       	and	r24, r24
    2502:	61 f0       	breq	.+24     	; 0x251c <allCalculator+0x398>
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	83 36       	cpi	r24, 0x63	; 99
    2508:	49 f4       	brne	.+18     	; 0x251c <allCalculator+0x398>
	  {
	    LCD_voidSendCommand(0x01);
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_voidSendCommand>
	    LCD_voidGoToXY(0,0) ;
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_voidGoToXY>
	    LCD_clearData();
    2518:	0e 94 a5 10 	call	0x214a	; 0x214a <LCD_clearData>
	  }

}
    251c:	0f 90       	pop	r0
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <__udivmodhi4>:
    2524:	aa 1b       	sub	r26, r26
    2526:	bb 1b       	sub	r27, r27
    2528:	51 e1       	ldi	r21, 0x11	; 17
    252a:	07 c0       	rjmp	.+14     	; 0x253a <__udivmodhi4_ep>

0000252c <__udivmodhi4_loop>:
    252c:	aa 1f       	adc	r26, r26
    252e:	bb 1f       	adc	r27, r27
    2530:	a6 17       	cp	r26, r22
    2532:	b7 07       	cpc	r27, r23
    2534:	10 f0       	brcs	.+4      	; 0x253a <__udivmodhi4_ep>
    2536:	a6 1b       	sub	r26, r22
    2538:	b7 0b       	sbc	r27, r23

0000253a <__udivmodhi4_ep>:
    253a:	88 1f       	adc	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	5a 95       	dec	r21
    2540:	a9 f7       	brne	.-22     	; 0x252c <__udivmodhi4_loop>
    2542:	80 95       	com	r24
    2544:	90 95       	com	r25
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	08 95       	ret

0000254c <__prologue_saves__>:
    254c:	2f 92       	push	r2
    254e:	3f 92       	push	r3
    2550:	4f 92       	push	r4
    2552:	5f 92       	push	r5
    2554:	6f 92       	push	r6
    2556:	7f 92       	push	r7
    2558:	8f 92       	push	r8
    255a:	9f 92       	push	r9
    255c:	af 92       	push	r10
    255e:	bf 92       	push	r11
    2560:	cf 92       	push	r12
    2562:	df 92       	push	r13
    2564:	ef 92       	push	r14
    2566:	ff 92       	push	r15
    2568:	0f 93       	push	r16
    256a:	1f 93       	push	r17
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	ca 1b       	sub	r28, r26
    2576:	db 0b       	sbc	r29, r27
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	09 94       	ijmp

00002584 <__epilogue_restores__>:
    2584:	2a 88       	ldd	r2, Y+18	; 0x12
    2586:	39 88       	ldd	r3, Y+17	; 0x11
    2588:	48 88       	ldd	r4, Y+16	; 0x10
    258a:	5f 84       	ldd	r5, Y+15	; 0x0f
    258c:	6e 84       	ldd	r6, Y+14	; 0x0e
    258e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2590:	8c 84       	ldd	r8, Y+12	; 0x0c
    2592:	9b 84       	ldd	r9, Y+11	; 0x0b
    2594:	aa 84       	ldd	r10, Y+10	; 0x0a
    2596:	b9 84       	ldd	r11, Y+9	; 0x09
    2598:	c8 84       	ldd	r12, Y+8	; 0x08
    259a:	df 80       	ldd	r13, Y+7	; 0x07
    259c:	ee 80       	ldd	r14, Y+6	; 0x06
    259e:	fd 80       	ldd	r15, Y+5	; 0x05
    25a0:	0c 81       	ldd	r16, Y+4	; 0x04
    25a2:	1b 81       	ldd	r17, Y+3	; 0x03
    25a4:	aa 81       	ldd	r26, Y+2	; 0x02
    25a6:	b9 81       	ldd	r27, Y+1	; 0x01
    25a8:	ce 0f       	add	r28, r30
    25aa:	d1 1d       	adc	r29, r1
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	ed 01       	movw	r28, r26
    25b8:	08 95       	ret

000025ba <_exit>:
    25ba:	f8 94       	cli

000025bc <__stop_program>:
    25bc:	ff cf       	rjmp	.-2      	; 0x25bc <__stop_program>
