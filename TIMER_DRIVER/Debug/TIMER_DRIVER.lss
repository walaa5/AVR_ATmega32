
TIMER_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000270  00800060  00002c40  00002cd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008002d0  008002d0  00002f44  2**0
                  ALLOC
  3 .stab         0000291c  00000000  00000000  00002f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010dd  00000000  00000000  00005860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000693d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008836  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009721  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a4d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a630  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a8bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b08b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__vector_10>
      2c:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3e       	cpi	r26, 0xE9	; 233
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <main>
      8a:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_SetPinValue>:
#include "LIBS\MATH.h"
#include "DIO_REG.h"
#include "DIO_INT.h"

void DIO_SetPinValue (u8 DIO_PORTID , u8 DIO_PINID , u8 DIO_PinValue)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if (DIO_PinValue == HIGH)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_SetPinValue+0x22>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_SetPinValue+0x100>
	{
		switch(DIO_PORTID)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_SetPinValue+0x88>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_SetPinValue+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_SetPinValue+0x60>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_SetPinValue+0x1ee>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_SetPinValue+0xb0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_SetPinValue+0xd8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <DIO_SetPinValue+0x1ee>
		{
		case PORTA:
			set_bit(PORTA_REG , DIO_PINID);
     ba6:	ab e3       	ldi	r26, 0x3B	; 59
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	eb e3       	ldi	r30, 0x3B	; 59
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_SetPinValue+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_SetPinValue+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTB:
			set_bit(PORTB_REG , DIO_PINID) ;
     bce:	a8 e3       	ldi	r26, 0x38	; 56
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e8 e3       	ldi	r30, 0x38	; 56
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_SetPinValue+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_SetPinValue+0xa2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTC:
			set_bit(PORTC_REG , DIO_PINID) ;
     bf6:	a5 e3       	ldi	r26, 0x35	; 53
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e3       	ldi	r30, 0x35	; 53
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_SetPinValue+0xce>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_SetPinValue+0xca>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTD:
			set_bit(PORTD_REG , DIO_PINID) ;
     c1e:	a2 e3       	ldi	r26, 0x32	; 50
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e2 e3       	ldi	r30, 0x32	; 50
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_SetPinValue+0xf6>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_SetPinValue+0xf2>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_SetPinValue+0x1ee>

		}

	}

	else if (DIO_PinValue == LOW)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_SetPinValue+0x108>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <DIO_SetPinValue+0x1ee>
	{
		switch(DIO_PORTID)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_SetPinValue+0x172>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_SetPinValue+0x130>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_SetPinValue+0x148>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <DIO_SetPinValue+0x1ee>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_SetPinValue+0x19c>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_SetPinValue+0x146>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_SetPinValue+0x1c6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <DIO_SetPinValue+0x1ee>
		{
		case PORTA:
			clr_bit(PORTA_REG , DIO_PINID) ;
     c8e:	ab e3       	ldi	r26, 0x3B	; 59
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	eb e3       	ldi	r30, 0x3B	; 59
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_SetPinValue+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_SetPinValue+0x162>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTB:
			clr_bit(PORTB_REG , DIO_PINID) ;
     cb8:	a8 e3       	ldi	r26, 0x38	; 56
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_SetPinValue+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_SetPinValue+0x18c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTC:
			clr_bit(PORTC_REG , DIO_PINID) ;
     ce2:	a5 e3       	ldi	r26, 0x35	; 53
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e3       	ldi	r30, 0x35	; 53
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_SetPinValue+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_SetPinValue+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTD:
			clr_bit(PORTD_REG , DIO_PINID) ;
     d0c:	a2 e3       	ldi	r26, 0x32	; 50
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e2 e3       	ldi	r30, 0x32	; 50
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_SetPinValue+0x1e4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_SetPinValue+0x1e0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
		break;

			}

		}
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 DIO_DDRID , u8 DIO_PINID, u8 DIO_PINIO)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if (DIO_PINIO == OUTPUT)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <DIO_SetPinDirection+0x22>
     d66:	6f c0       	rjmp	.+222    	; 0xe46 <DIO_SetPinDirection+0x100>
	{
		switch(DIO_DDRID)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	85 30       	cpi	r24, 0x05	; 5
     d78:	91 05       	cpc	r25, r1
     d7a:	51 f1       	breq	.+84     	; 0xdd0 <DIO_SetPinDirection+0x8a>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	26 30       	cpi	r18, 0x06	; 6
     d82:	31 05       	cpc	r19, r1
     d84:	34 f4       	brge	.+12     	; 0xd92 <DIO_SetPinDirection+0x4c>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	91 05       	cpc	r25, r1
     d8e:	61 f0       	breq	.+24     	; 0xda8 <DIO_SetPinDirection+0x62>
     d90:	5a c0       	rjmp	.+180    	; 0xe46 <DIO_SetPinDirection+0x100>
     d92:	2e 81       	ldd	r18, Y+6	; 0x06
     d94:	3f 81       	ldd	r19, Y+7	; 0x07
     d96:	26 30       	cpi	r18, 0x06	; 6
     d98:	31 05       	cpc	r19, r1
     d9a:	71 f1       	breq	.+92     	; 0xdf8 <DIO_SetPinDirection+0xb2>
     d9c:	8e 81       	ldd	r24, Y+6	; 0x06
     d9e:	9f 81       	ldd	r25, Y+7	; 0x07
     da0:	87 30       	cpi	r24, 0x07	; 7
     da2:	91 05       	cpc	r25, r1
     da4:	e9 f1       	breq	.+122    	; 0xe20 <DIO_SetPinDirection+0xda>
     da6:	4f c0       	rjmp	.+158    	; 0xe46 <DIO_SetPinDirection+0x100>
		{
		case DDRA:
			set_bit(DDRA_REG , DIO_PINID);
     da8:	aa e3       	ldi	r26, 0x3A	; 58
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea e3       	ldi	r30, 0x3A	; 58
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_SetPinDirection+0x80>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_SetPinDirection+0x7c>
     dca:	84 2b       	or	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	3b c0       	rjmp	.+118    	; 0xe46 <DIO_SetPinDirection+0x100>
		break;

		case DDRB:
			set_bit(DDRB_REG , DIO_PINID) ;
     dd0:	a7 e3       	ldi	r26, 0x37	; 55
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e7 e3       	ldi	r30, 0x37	; 55
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 2e       	mov	r0, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_SetPinDirection+0xa8>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_SetPinDirection+0xa4>
     df2:	84 2b       	or	r24, r20
     df4:	8c 93       	st	X, r24
     df6:	27 c0       	rjmp	.+78     	; 0xe46 <DIO_SetPinDirection+0x100>
		break;

		case DDRC:
			set_bit(DDRC_REG , DIO_PINID) ;
     df8:	a4 e3       	ldi	r26, 0x34	; 52
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e4 e3       	ldi	r30, 0x34	; 52
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <DIO_SetPinDirection+0xd0>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <DIO_SetPinDirection+0xcc>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	13 c0       	rjmp	.+38     	; 0xe46 <DIO_SetPinDirection+0x100>
		break;

		case DDRD:
			set_bit(DDRD_REG , DIO_PINID) ;
     e20:	a1 e3       	ldi	r26, 0x31	; 49
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e1 e3       	ldi	r30, 0x31	; 49
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_SetPinDirection+0xf8>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_SetPinDirection+0xf4>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24

		}

	}

	if (DIO_PINIO == INPUT)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	09 f0       	breq	.+2      	; 0xe4e <DIO_SetPinDirection+0x108>
     e4c:	74 c0       	rjmp	.+232    	; 0xf36 <DIO_SetPinDirection+0x1f0>
	{
		switch(DIO_DDRID)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	85 30       	cpi	r24, 0x05	; 5
     e5e:	91 05       	cpc	r25, r1
     e60:	61 f1       	breq	.+88     	; 0xeba <DIO_SetPinDirection+0x174>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	26 30       	cpi	r18, 0x06	; 6
     e68:	31 05       	cpc	r19, r1
     e6a:	34 f4       	brge	.+12     	; 0xe78 <DIO_SetPinDirection+0x132>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	84 30       	cpi	r24, 0x04	; 4
     e72:	91 05       	cpc	r25, r1
     e74:	69 f0       	breq	.+26     	; 0xe90 <DIO_SetPinDirection+0x14a>
     e76:	5f c0       	rjmp	.+190    	; 0xf36 <DIO_SetPinDirection+0x1f0>
     e78:	2c 81       	ldd	r18, Y+4	; 0x04
     e7a:	3d 81       	ldd	r19, Y+5	; 0x05
     e7c:	26 30       	cpi	r18, 0x06	; 6
     e7e:	31 05       	cpc	r19, r1
     e80:	89 f1       	breq	.+98     	; 0xee4 <DIO_SetPinDirection+0x19e>
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	9d 81       	ldd	r25, Y+5	; 0x05
     e86:	87 30       	cpi	r24, 0x07	; 7
     e88:	91 05       	cpc	r25, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <DIO_SetPinDirection+0x148>
     e8c:	40 c0       	rjmp	.+128    	; 0xf0e <DIO_SetPinDirection+0x1c8>
     e8e:	53 c0       	rjmp	.+166    	; 0xf36 <DIO_SetPinDirection+0x1f0>
		{
			case DDRA:
				clr_bit(DDRA_REG , DIO_PINID);
     e90:	aa e3       	ldi	r26, 0x3A	; 58
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ea e3       	ldi	r30, 0x3A	; 58
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_SetPinDirection+0x168>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_SetPinDirection+0x164>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	3e c0       	rjmp	.+124    	; 0xf36 <DIO_SetPinDirection+0x1f0>
			break;

			case DDRB:
				clr_bit(DDRB_REG , DIO_PINID) ;
     eba:	a7 e3       	ldi	r26, 0x37	; 55
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e7 e3       	ldi	r30, 0x37	; 55
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_SetPinDirection+0x192>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_SetPinDirection+0x18e>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	29 c0       	rjmp	.+82     	; 0xf36 <DIO_SetPinDirection+0x1f0>
			break;

			case DDRC:
				clr_bit(DDRC_REG , DIO_PINID) ;
     ee4:	a4 e3       	ldi	r26, 0x34	; 52
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e4 e3       	ldi	r30, 0x34	; 52
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_SetPinDirection+0x1bc>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_SetPinDirection+0x1b8>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <DIO_SetPinDirection+0x1f0>
			break;

			case DDRD:
				clr_bit(DDRD_REG , DIO_PINID) ;
     f0e:	a1 e3       	ldi	r26, 0x31	; 49
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_SetPinDirection+0x1e6>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_SetPinDirection+0x1e2>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
			break;

		}

	}
}
     f36:	27 96       	adiw	r28, 0x07	; 7
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <DIO_GetPinValue>:

u8 DIO_GetPinValue (u8 DIO_PIN , u8 DIO_PINID)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <DIO_GetPinValue+0x6>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <DIO_GetPinValue+0x8>
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	8a 83       	std	Y+2, r24	; 0x02
     f58:	6b 83       	std	Y+3, r22	; 0x03
	u8 value_read ;

	switch(DIO_PIN)
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	4c 81       	ldd	r20, Y+4	; 0x04
     f66:	5d 81       	ldd	r21, Y+5	; 0x05
     f68:	41 30       	cpi	r20, 0x01	; 1
     f6a:	51 05       	cpc	r21, r1
     f6c:	41 f1       	breq	.+80     	; 0xfbe <DIO_GetPinValue+0x76>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	34 f4       	brge	.+12     	; 0xf84 <DIO_GetPinValue+0x3c>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	61 f0       	breq	.+24     	; 0xf9a <DIO_GetPinValue+0x52>
     f82:	52 c0       	rjmp	.+164    	; 0x1028 <DIO_GetPinValue+0xe0>
     f84:	4c 81       	ldd	r20, Y+4	; 0x04
     f86:	5d 81       	ldd	r21, Y+5	; 0x05
     f88:	42 30       	cpi	r20, 0x02	; 2
     f8a:	51 05       	cpc	r21, r1
     f8c:	51 f1       	breq	.+84     	; 0xfe2 <DIO_GetPinValue+0x9a>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	b9 f1       	breq	.+110    	; 0x1006 <DIO_GetPinValue+0xbe>
     f98:	47 c0       	rjmp	.+142    	; 0x1028 <DIO_GetPinValue+0xe0>
	{

	case PINA :
		value_read = read_bit(PINA_REG , DIO_PINID);
     f9a:	e9 e3       	ldi	r30, 0x39	; 57
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_GetPinValue+0x6a>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_GetPinValue+0x66>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	35 c0       	rjmp	.+106    	; 0x1028 <DIO_GetPinValue+0xe0>
	break;

	case PINB :
	value_read = read_bit(PINB_REG , DIO_PINID) ;
     fbe:	e6 e3       	ldi	r30, 0x36	; 54
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_GetPinValue+0x8e>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_GetPinValue+0x8a>
     fda:	ca 01       	movw	r24, r20
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <DIO_GetPinValue+0xe0>

	break;

	case PINC:
	value_read = read_bit(PINC_REG , DIO_PINID) ;
     fe2:	e3 e3       	ldi	r30, 0x33	; 51
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a9 01       	movw	r20, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_GetPinValue+0xb2>
     ff6:	55 95       	asr	r21
     ff8:	47 95       	ror	r20
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_GetPinValue+0xae>
     ffe:	ca 01       	movw	r24, r20
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <DIO_GetPinValue+0xe0>
	break;

	case PIND:
	value_read = read_bit(PIND_REG ,DIO_PINID) ;
    1006:	e0 e3       	ldi	r30, 0x30	; 48
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_GetPinValue+0xd6>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_GetPinValue+0xd2>
    1022:	ca 01       	movw	r24, r20
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
	break;

	}

	return value_read ;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 DIO_DDRID , u8 DIO_PortValue)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <DIO_SetPortDirection+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_SetPortDirection+0x8>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <DIO_SetPortDirection+0xa>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	6a 83       	std	Y+2, r22	; 0x02

		switch(DIO_DDRID)
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3e 83       	std	Y+6, r19	; 0x06
    1054:	2d 83       	std	Y+5, r18	; 0x05
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	85 30       	cpi	r24, 0x05	; 5
    105c:	91 05       	cpc	r25, r1
    105e:	d9 f0       	breq	.+54     	; 0x1096 <DIO_SetPortDirection+0x5c>
    1060:	2d 81       	ldd	r18, Y+5	; 0x05
    1062:	3e 81       	ldd	r19, Y+6	; 0x06
    1064:	26 30       	cpi	r18, 0x06	; 6
    1066:	31 05       	cpc	r19, r1
    1068:	34 f4       	brge	.+12     	; 0x1076 <DIO_SetPortDirection+0x3c>
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	84 30       	cpi	r24, 0x04	; 4
    1070:	91 05       	cpc	r25, r1
    1072:	61 f0       	breq	.+24     	; 0x108c <DIO_SetPortDirection+0x52>
    1074:	1e c0       	rjmp	.+60     	; 0x10b2 <DIO_SetPortDirection+0x78>
    1076:	2d 81       	ldd	r18, Y+5	; 0x05
    1078:	3e 81       	ldd	r19, Y+6	; 0x06
    107a:	26 30       	cpi	r18, 0x06	; 6
    107c:	31 05       	cpc	r19, r1
    107e:	81 f0       	breq	.+32     	; 0x10a0 <DIO_SetPortDirection+0x66>
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	87 30       	cpi	r24, 0x07	; 7
    1086:	91 05       	cpc	r25, r1
    1088:	81 f0       	breq	.+32     	; 0x10aa <DIO_SetPortDirection+0x70>
    108a:	13 c0       	rjmp	.+38     	; 0x10b2 <DIO_SetPortDirection+0x78>
		{
		case DDRA:
			DDRA_REG = DIO_PortValue ;
    108c:	ea e3       	ldi	r30, 0x3A	; 58
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	80 83       	st	Z, r24
    1094:	0e c0       	rjmp	.+28     	; 0x10b2 <DIO_SetPortDirection+0x78>
		break ;

		case DDRB:
			DDRB_REG = DIO_PortValue ;
    1096:	e7 e3       	ldi	r30, 0x37	; 55
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	80 83       	st	Z, r24
    109e:	09 c0       	rjmp	.+18     	; 0x10b2 <DIO_SetPortDirection+0x78>
		break ;

		case DDRC:
			DDRC_REG = DIO_PortValue ;
    10a0:	e4 e3       	ldi	r30, 0x34	; 52
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	80 83       	st	Z, r24
    10a8:	04 c0       	rjmp	.+8      	; 0x10b2 <DIO_SetPortDirection+0x78>
		break ;

		case DDRD:
			DDRD_REG = DIO_PortValue ;
    10aa:	e1 e3       	ldi	r30, 0x31	; 49
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	80 83       	st	Z, r24
		break ;

		}

		switch(DIO_DDRID)
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	3c 83       	std	Y+4, r19	; 0x04
    10ba:	2b 83       	std	Y+3, r18	; 0x03
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	85 30       	cpi	r24, 0x05	; 5
    10c2:	91 05       	cpc	r25, r1
    10c4:	d9 f0       	breq	.+54     	; 0x10fc <DIO_SetPortDirection+0xc2>
    10c6:	2b 81       	ldd	r18, Y+3	; 0x03
    10c8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ca:	26 30       	cpi	r18, 0x06	; 6
    10cc:	31 05       	cpc	r19, r1
    10ce:	34 f4       	brge	.+12     	; 0x10dc <DIO_SetPortDirection+0xa2>
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	91 05       	cpc	r25, r1
    10d8:	61 f0       	breq	.+24     	; 0x10f2 <DIO_SetPortDirection+0xb8>
    10da:	1e c0       	rjmp	.+60     	; 0x1118 <DIO_SetPortDirection+0xde>
    10dc:	2b 81       	ldd	r18, Y+3	; 0x03
    10de:	3c 81       	ldd	r19, Y+4	; 0x04
    10e0:	26 30       	cpi	r18, 0x06	; 6
    10e2:	31 05       	cpc	r19, r1
    10e4:	81 f0       	breq	.+32     	; 0x1106 <DIO_SetPortDirection+0xcc>
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	87 30       	cpi	r24, 0x07	; 7
    10ec:	91 05       	cpc	r25, r1
    10ee:	81 f0       	breq	.+32     	; 0x1110 <DIO_SetPortDirection+0xd6>
    10f0:	13 c0       	rjmp	.+38     	; 0x1118 <DIO_SetPortDirection+0xde>
		{
		case DDRA:
			DDRA_REG =DIO_PortValue ;
    10f2:	ea e3       	ldi	r30, 0x3A	; 58
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	80 83       	st	Z, r24
    10fa:	0e c0       	rjmp	.+28     	; 0x1118 <DIO_SetPortDirection+0xde>
		break ;

		case DDRB:
			DDRB_REG = DIO_PortValue ;
    10fc:	e7 e3       	ldi	r30, 0x37	; 55
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	80 83       	st	Z, r24
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <DIO_SetPortDirection+0xde>
		break ;

		case DDRC:
			DDRC_REG = DIO_PortValue ;
    1106:	e4 e3       	ldi	r30, 0x34	; 52
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	80 83       	st	Z, r24
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <DIO_SetPortDirection+0xde>
		break ;

		case DDRD:
			DDRD_REG = DIO_PortValue ;
    1110:	e1 e3       	ldi	r30, 0x31	; 49
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	80 83       	st	Z, r24
		break ;
	   }
}
    1118:	26 96       	adiw	r28, 0x06	; 6
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <DIO_SetPortValue>:

void DIO_SetPortValue(u8 DIO_PORTID , u8 DIO_PortValue)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_SetPortValue+0x6>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_SetPortValue+0x8>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	6a 83       	std	Y+2, r22	; 0x02

		switch(DIO_PORTID)
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3c 83       	std	Y+4, r19	; 0x04
    1142:	2b 83       	std	Y+3, r18	; 0x03
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	91 05       	cpc	r25, r1
    114c:	d1 f0       	breq	.+52     	; 0x1182 <DIO_SetPortValue+0x58>
    114e:	2b 81       	ldd	r18, Y+3	; 0x03
    1150:	3c 81       	ldd	r19, Y+4	; 0x04
    1152:	22 30       	cpi	r18, 0x02	; 2
    1154:	31 05       	cpc	r19, r1
    1156:	2c f4       	brge	.+10     	; 0x1162 <DIO_SetPortValue+0x38>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	61 f0       	breq	.+24     	; 0x1178 <DIO_SetPortValue+0x4e>
    1160:	1e c0       	rjmp	.+60     	; 0x119e <DIO_SetPortValue+0x74>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <DIO_SetPortValue+0x62>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	83 30       	cpi	r24, 0x03	; 3
    1172:	91 05       	cpc	r25, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <DIO_SetPortValue+0x6c>
    1176:	13 c0       	rjmp	.+38     	; 0x119e <DIO_SetPortValue+0x74>
		{

		case PORTA:
			PORTA_REG = DIO_PortValue ;
    1178:	eb e3       	ldi	r30, 0x3B	; 59
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	0e c0       	rjmp	.+28     	; 0x119e <DIO_SetPortValue+0x74>
		break ;

		case PORTB:
			PORTB_REG = DIO_PortValue ;
    1182:	e8 e3       	ldi	r30, 0x38	; 56
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	09 c0       	rjmp	.+18     	; 0x119e <DIO_SetPortValue+0x74>
		break ;

		case PORTC:
			PORTC_REG = DIO_PortValue ;
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
    1194:	04 c0       	rjmp	.+8      	; 0x119e <DIO_SetPortValue+0x74>
		break ;

		case PORTD:
			PORTD_REG = DIO_PortValue ;
    1196:	e2 e3       	ldi	r30, 0x32	; 50
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
		break ;

		}

}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <EXIT_voidInt1Init>:
#include "AVR_EXTI_REG.h"
#include"EXTI_INT.h"


void EXIT_voidInt1Init(void)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
	// set sense control
	set_bit(MCVCR , MCVCR_ISC01) ;
    11b4:	a5 e5       	ldi	r26, 0x55	; 85
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e5 e5       	ldi	r30, 0x55	; 85
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	82 60       	ori	r24, 0x02	; 2
    11c0:	8c 93       	st	X, r24
	clr_bit(MCVCR , MCVCR_ISC00) ;
    11c2:	a5 e5       	ldi	r26, 0x55	; 85
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e5 e5       	ldi	r30, 0x55	; 85
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8e 7f       	andi	r24, 0xFE	; 254
    11ce:	8c 93       	st	X, r24

	// PIE
	set_bit(GICR , GICR_INT1) ;
    11d0:	ab e5       	ldi	r26, 0x5B	; 91
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	eb e5       	ldi	r30, 0x5B	; 91
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	80 68       	ori	r24, 0x80	; 128
    11dc:	8c 93       	st	X, r24
}
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <EXIT_voidInt0Init>:

void EXIT_voidInt0Init(void)
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
	// set sense control falling edge
	set_bit(MCVCR , MCVCR_ISC01) ;
    11ec:	a5 e5       	ldi	r26, 0x55	; 85
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e5 e5       	ldi	r30, 0x55	; 85
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	82 60       	ori	r24, 0x02	; 2
    11f8:	8c 93       	st	X, r24
	clr_bit(MCVCR , MCVCR_ISC00) ;
    11fa:	a5 e5       	ldi	r26, 0x55	; 85
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e5 e5       	ldi	r30, 0x55	; 85
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8e 7f       	andi	r24, 0xFE	; 254
    1206:	8c 93       	st	X, r24

	// PIE
	set_bit(GICR , GICR_INT0) ;
    1208:	ab e5       	ldi	r26, 0x5B	; 91
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	eb e5       	ldi	r30, 0x5B	; 91
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 64       	ori	r24, 0x40	; 64
    1214:	8c 93       	st	X, r24
}
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <EXIT_voidInt00Init>:

void EXIT_voidInt00Init(void)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
	// set sense control falling edge
	set_bit(MCVCR , MCVCR_ISC01) ;
    1224:	a5 e5       	ldi	r26, 0x55	; 85
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e5 e5       	ldi	r30, 0x55	; 85
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	82 60       	ori	r24, 0x02	; 2
    1230:	8c 93       	st	X, r24
	set_bit(MCVCR , MCVCR_ISC00) ;
    1232:	a5 e5       	ldi	r26, 0x55	; 85
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e5       	ldi	r30, 0x55	; 85
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	81 60       	ori	r24, 0x01	; 1
    123e:	8c 93       	st	X, r24

	// PIE
	set_bit(GICR , GICR_INT0) ;
    1240:	ab e5       	ldi	r26, 0x5B	; 91
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	eb e5       	ldi	r30, 0x5B	; 91
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 64       	ori	r24, 0x40	; 64
    124c:	8c 93       	st	X, r24
}
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <EXIT_voidInt2Init>:

void EXIT_voidInt2Init(void)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
	// set sense control
	set_bit(MCVCR , MCVCR_ISC01) ;
    125c:	a5 e5       	ldi	r26, 0x55	; 85
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e5 e5       	ldi	r30, 0x55	; 85
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	82 60       	ori	r24, 0x02	; 2
    1268:	8c 93       	st	X, r24
	clr_bit(MCVCR , MCVCR_ISC00) ;
    126a:	a5 e5       	ldi	r26, 0x55	; 85
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e5 e5       	ldi	r30, 0x55	; 85
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	8e 7f       	andi	r24, 0xFE	; 254
    1276:	8c 93       	st	X, r24

	// PIE
	set_bit(GICR , GICR_INT2) ;
    1278:	ab e5       	ldi	r26, 0x5B	; 91
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	eb e5       	ldi	r30, 0x5B	; 91
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	80 62       	ori	r24, 0x20	; 32
    1284:	8c 93       	st	X, r24
}
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <INT_voidEnableGlobal>:

void INT_voidEnableGlobal(void)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
	// global interrupt enable
	set_bit(SREG , SREG_I) ;
    1294:	af e5       	ldi	r26, 0x5F	; 95
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	ef e5       	ldi	r30, 0x5F	; 95
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	80 68       	ori	r24, 0x80	; 128
    12a0:	8c 93       	st	X, r24

}
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <INT_voidDisableGlobal>:

void INT_voidDisableGlobal(void)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	// global interrupt enable
	clr_bit(SREG , SREG_I) ;
    12b0:	af e5       	ldi	r26, 0x5F	; 95
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	ef e5       	ldi	r30, 0x5F	; 95
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	8f 77       	andi	r24, 0x7F	; 127
    12bc:	8c 93       	st	X, r24

}
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <EXTI_INT0SetCallBack>:



void EXTI_INT0SetCallBack(void (* INT0_ISR)(void))
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <EXTI_INT0SetCallBack+0x6>
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	9a 83       	std	Y+2, r25	; 0x02
    12d0:	89 83       	std	Y+1, r24	; 0x01
	INT0_CallBack = INT0_ISR ;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	90 93 e6 02 	sts	0x02E6, r25
    12da:	80 93 e5 02 	sts	0x02E5, r24

}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <LCD_voidInit>:
#include <avr\delay.h>


// initialization function : use it in the beginning of any lcd program
void LCD_voidInit(void)
{
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	c6 54       	subi	r28, 0x46	; 70
    12f6:	d0 40       	sbci	r29, 0x00	; 0
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	fe 01       	movw	r30, r28
    1304:	ed 5b       	subi	r30, 0xBD	; 189
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a0 e2       	ldi	r26, 0x20	; 32
    130e:	b2 e4       	ldi	r27, 0x42	; 66
    1310:	80 83       	st	Z, r24
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	a2 83       	std	Z+2, r26	; 0x02
    1316:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1318:	8e 01       	movw	r16, r28
    131a:	01 5c       	subi	r16, 0xC1	; 193
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	fe 01       	movw	r30, r28
    1320:	ed 5b       	subi	r30, 0xBD	; 189
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	4a ef       	ldi	r20, 0xFA	; 250
    1332:	54 e4       	ldi	r21, 0x44	; 68
    1334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	f8 01       	movw	r30, r16
    133e:	80 83       	st	Z, r24
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	a2 83       	std	Z+2, r26	; 0x02
    1344:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1346:	fe 01       	movw	r30, r28
    1348:	ff 96       	adiw	r30, 0x3f	; 63
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	93 81       	ldd	r25, Z+3	; 0x03
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	5f e3       	ldi	r21, 0x3F	; 63
    135a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    135e:	88 23       	and	r24, r24
    1360:	2c f4       	brge	.+10     	; 0x136c <LCD_voidInit+0x84>
		__ticks = 1;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9e af       	std	Y+62, r25	; 0x3e
    1368:	8d af       	std	Y+61, r24	; 0x3d
    136a:	46 c0       	rjmp	.+140    	; 0x13f8 <LCD_voidInit+0x110>
	else if (__tmp > 65535)
    136c:	fe 01       	movw	r30, r28
    136e:	ff 96       	adiw	r30, 0x3f	; 63
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	82 81       	ldd	r24, Z+2	; 0x02
    1376:	93 81       	ldd	r25, Z+3	; 0x03
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	3f ef       	ldi	r19, 0xFF	; 255
    137c:	4f e7       	ldi	r20, 0x7F	; 127
    137e:	57 e4       	ldi	r21, 0x47	; 71
    1380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1384:	18 16       	cp	r1, r24
    1386:	64 f5       	brge	.+88     	; 0x13e0 <LCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1388:	fe 01       	movw	r30, r28
    138a:	ed 5b       	subi	r30, 0xBD	; 189
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	60 81       	ld	r22, Z
    1390:	71 81       	ldd	r23, Z+1	; 0x01
    1392:	82 81       	ldd	r24, Z+2	; 0x02
    1394:	93 81       	ldd	r25, Z+3	; 0x03
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e2       	ldi	r20, 0x20	; 32
    139c:	51 e4       	ldi	r21, 0x41	; 65
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	9e af       	std	Y+62, r25	; 0x3e
    13b4:	8d af       	std	Y+61, r24	; 0x3d
    13b6:	0f c0       	rjmp	.+30     	; 0x13d6 <LCD_voidInit+0xee>
    13b8:	88 ec       	ldi	r24, 0xC8	; 200
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9c af       	std	Y+60, r25	; 0x3c
    13be:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    13c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <LCD_voidInit+0xdc>
    13c8:	9c af       	std	Y+60, r25	; 0x3c
    13ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    13ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	9e af       	std	Y+62, r25	; 0x3e
    13d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    13d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	69 f7       	brne	.-38     	; 0x13b8 <LCD_voidInit+0xd0>
    13de:	16 c0       	rjmp	.+44     	; 0x140c <LCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e0:	fe 01       	movw	r30, r28
    13e2:	ff 96       	adiw	r30, 0x3f	; 63
    13e4:	60 81       	ld	r22, Z
    13e6:	71 81       	ldd	r23, Z+1	; 0x01
    13e8:	82 81       	ldd	r24, Z+2	; 0x02
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	9e af       	std	Y+62, r25	; 0x3e
    13f6:	8d af       	std	Y+61, r24	; 0x3d
    13f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    13fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    13fc:	9a af       	std	Y+58, r25	; 0x3a
    13fe:	89 af       	std	Y+57, r24	; 0x39
    1400:	89 ad       	ldd	r24, Y+57	; 0x39
    1402:	9a ad       	ldd	r25, Y+58	; 0x3a
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <LCD_voidInit+0x11c>
    1408:	9a af       	std	Y+58, r25	; 0x3a
    140a:	89 af       	std	Y+57, r24	; 0x39
	// wait for more than 30 ms
	_delay_ms(40);

	// function set command (8bit mode -- 2 lines -- 5*7)
	LCD_voidSendCommand (0b00111000);
    140c:	88 e3       	ldi	r24, 0x38	; 56
    140e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <LCD_voidSendCommand>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a0 e8       	ldi	r26, 0x80	; 128
    1418:	bf e3       	ldi	r27, 0x3F	; 63
    141a:	8d ab       	std	Y+53, r24	; 0x35
    141c:	9e ab       	std	Y+54, r25	; 0x36
    141e:	af ab       	std	Y+55, r26	; 0x37
    1420:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1422:	6d a9       	ldd	r22, Y+53	; 0x35
    1424:	7e a9       	ldd	r23, Y+54	; 0x36
    1426:	8f a9       	ldd	r24, Y+55	; 0x37
    1428:	98 ad       	ldd	r25, Y+56	; 0x38
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a ef       	ldi	r20, 0xFA	; 250
    1430:	54 e4       	ldi	r21, 0x44	; 68
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	89 ab       	std	Y+49, r24	; 0x31
    143c:	9a ab       	std	Y+50, r25	; 0x32
    143e:	ab ab       	std	Y+51, r26	; 0x33
    1440:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1442:	69 a9       	ldd	r22, Y+49	; 0x31
    1444:	7a a9       	ldd	r23, Y+50	; 0x32
    1446:	8b a9       	ldd	r24, Y+51	; 0x33
    1448:	9c a9       	ldd	r25, Y+52	; 0x34
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1456:	88 23       	and	r24, r24
    1458:	2c f4       	brge	.+10     	; 0x1464 <LCD_voidInit+0x17c>
		__ticks = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	98 ab       	std	Y+48, r25	; 0x30
    1460:	8f a7       	std	Y+47, r24	; 0x2f
    1462:	3f c0       	rjmp	.+126    	; 0x14e2 <LCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    1464:	69 a9       	ldd	r22, Y+49	; 0x31
    1466:	7a a9       	ldd	r23, Y+50	; 0x32
    1468:	8b a9       	ldd	r24, Y+51	; 0x33
    146a:	9c a9       	ldd	r25, Y+52	; 0x34
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	4f e7       	ldi	r20, 0x7F	; 127
    1472:	57 e4       	ldi	r21, 0x47	; 71
    1474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1478:	18 16       	cp	r1, r24
    147a:	4c f5       	brge	.+82     	; 0x14ce <LCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147c:	6d a9       	ldd	r22, Y+53	; 0x35
    147e:	7e a9       	ldd	r23, Y+54	; 0x36
    1480:	8f a9       	ldd	r24, Y+55	; 0x37
    1482:	98 ad       	ldd	r25, Y+56	; 0x38
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e2       	ldi	r20, 0x20	; 32
    148a:	51 e4       	ldi	r21, 0x41	; 65
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	98 ab       	std	Y+48, r25	; 0x30
    14a2:	8f a7       	std	Y+47, r24	; 0x2f
    14a4:	0f c0       	rjmp	.+30     	; 0x14c4 <LCD_voidInit+0x1dc>
    14a6:	88 ec       	ldi	r24, 0xC8	; 200
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	9e a7       	std	Y+46, r25	; 0x2e
    14ac:	8d a7       	std	Y+45, r24	; 0x2d
    14ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    14b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <LCD_voidInit+0x1ca>
    14b6:	9e a7       	std	Y+46, r25	; 0x2e
    14b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    14bc:	98 a9       	ldd	r25, Y+48	; 0x30
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	98 ab       	std	Y+48, r25	; 0x30
    14c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c6:	98 a9       	ldd	r25, Y+48	; 0x30
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	69 f7       	brne	.-38     	; 0x14a6 <LCD_voidInit+0x1be>
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <LCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ce:	69 a9       	ldd	r22, Y+49	; 0x31
    14d0:	7a a9       	ldd	r23, Y+50	; 0x32
    14d2:	8b a9       	ldd	r24, Y+51	; 0x33
    14d4:	9c a9       	ldd	r25, Y+52	; 0x34
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	98 ab       	std	Y+48, r25	; 0x30
    14e0:	8f a7       	std	Y+47, r24	; 0x2f
    14e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e4:	98 a9       	ldd	r25, Y+48	; 0x30
    14e6:	9c a7       	std	Y+44, r25	; 0x2c
    14e8:	8b a7       	std	Y+43, r24	; 0x2b
    14ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <LCD_voidInit+0x206>
    14f2:	9c a7       	std	Y+44, r25	; 0x2c
    14f4:	8b a7       	std	Y+43, r24	; 0x2b

	//wait for more than 39 us
	_delay_ms(1);

	//display on/off control command (cursor on/off -- cursor blink/not blink)
	LCD_voidSendCommand (0x0c);
    14f6:	8c e0       	ldi	r24, 0x0C	; 12
    14f8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <LCD_voidSendCommand>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a0 e8       	ldi	r26, 0x80	; 128
    1502:	bf e3       	ldi	r27, 0x3F	; 63
    1504:	8f a3       	std	Y+39, r24	; 0x27
    1506:	98 a7       	std	Y+40, r25	; 0x28
    1508:	a9 a7       	std	Y+41, r26	; 0x29
    150a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150c:	6f a1       	ldd	r22, Y+39	; 0x27
    150e:	78 a5       	ldd	r23, Y+40	; 0x28
    1510:	89 a5       	ldd	r24, Y+41	; 0x29
    1512:	9a a5       	ldd	r25, Y+42	; 0x2a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	4a ef       	ldi	r20, 0xFA	; 250
    151a:	54 e4       	ldi	r21, 0x44	; 68
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	8b a3       	std	Y+35, r24	; 0x23
    1526:	9c a3       	std	Y+36, r25	; 0x24
    1528:	ad a3       	std	Y+37, r26	; 0x25
    152a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    152c:	6b a1       	ldd	r22, Y+35	; 0x23
    152e:	7c a1       	ldd	r23, Y+36	; 0x24
    1530:	8d a1       	ldd	r24, Y+37	; 0x25
    1532:	9e a1       	ldd	r25, Y+38	; 0x26
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	5f e3       	ldi	r21, 0x3F	; 63
    153c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1540:	88 23       	and	r24, r24
    1542:	2c f4       	brge	.+10     	; 0x154e <LCD_voidInit+0x266>
		__ticks = 1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9a a3       	std	Y+34, r25	; 0x22
    154a:	89 a3       	std	Y+33, r24	; 0x21
    154c:	3f c0       	rjmp	.+126    	; 0x15cc <LCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    154e:	6b a1       	ldd	r22, Y+35	; 0x23
    1550:	7c a1       	ldd	r23, Y+36	; 0x24
    1552:	8d a1       	ldd	r24, Y+37	; 0x25
    1554:	9e a1       	ldd	r25, Y+38	; 0x26
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	3f ef       	ldi	r19, 0xFF	; 255
    155a:	4f e7       	ldi	r20, 0x7F	; 127
    155c:	57 e4       	ldi	r21, 0x47	; 71
    155e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1562:	18 16       	cp	r1, r24
    1564:	4c f5       	brge	.+82     	; 0x15b8 <LCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1566:	6f a1       	ldd	r22, Y+39	; 0x27
    1568:	78 a5       	ldd	r23, Y+40	; 0x28
    156a:	89 a5       	ldd	r24, Y+41	; 0x29
    156c:	9a a5       	ldd	r25, Y+42	; 0x2a
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e2       	ldi	r20, 0x20	; 32
    1574:	51 e4       	ldi	r21, 0x41	; 65
    1576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	9a a3       	std	Y+34, r25	; 0x22
    158c:	89 a3       	std	Y+33, r24	; 0x21
    158e:	0f c0       	rjmp	.+30     	; 0x15ae <LCD_voidInit+0x2c6>
    1590:	88 ec       	ldi	r24, 0xC8	; 200
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	98 a3       	std	Y+32, r25	; 0x20
    1596:	8f 8f       	std	Y+31, r24	; 0x1f
    1598:	8f 8d       	ldd	r24, Y+31	; 0x1f
    159a:	98 a1       	ldd	r25, Y+32	; 0x20
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <LCD_voidInit+0x2b4>
    15a0:	98 a3       	std	Y+32, r25	; 0x20
    15a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a4:	89 a1       	ldd	r24, Y+33	; 0x21
    15a6:	9a a1       	ldd	r25, Y+34	; 0x22
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	9a a3       	std	Y+34, r25	; 0x22
    15ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ae:	89 a1       	ldd	r24, Y+33	; 0x21
    15b0:	9a a1       	ldd	r25, Y+34	; 0x22
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	69 f7       	brne	.-38     	; 0x1590 <LCD_voidInit+0x2a8>
    15b6:	14 c0       	rjmp	.+40     	; 0x15e0 <LCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b8:	6b a1       	ldd	r22, Y+35	; 0x23
    15ba:	7c a1       	ldd	r23, Y+36	; 0x24
    15bc:	8d a1       	ldd	r24, Y+37	; 0x25
    15be:	9e a1       	ldd	r25, Y+38	; 0x26
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9a a3       	std	Y+34, r25	; 0x22
    15ca:	89 a3       	std	Y+33, r24	; 0x21
    15cc:	89 a1       	ldd	r24, Y+33	; 0x21
    15ce:	9a a1       	ldd	r25, Y+34	; 0x22
    15d0:	9e 8f       	std	Y+30, r25	; 0x1e
    15d2:	8d 8f       	std	Y+29, r24	; 0x1d
    15d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <LCD_voidInit+0x2f0>
    15dc:	9e 8f       	std	Y+30, r25	; 0x1e
    15de:	8d 8f       	std	Y+29, r24	; 0x1d

	// wait for more than 39 us
	_delay_ms(1);

	//lcd clear : to clear any data on the lcd
	LCD_voidSendCommand (0x01);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <LCD_voidSendCommand>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a0 e0       	ldi	r26, 0x00	; 0
    15ec:	b0 e4       	ldi	r27, 0x40	; 64
    15ee:	89 8f       	std	Y+25, r24	; 0x19
    15f0:	9a 8f       	std	Y+26, r25	; 0x1a
    15f2:	ab 8f       	std	Y+27, r26	; 0x1b
    15f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f6:	69 8d       	ldd	r22, Y+25	; 0x19
    15f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	4a ef       	ldi	r20, 0xFA	; 250
    1604:	54 e4       	ldi	r21, 0x44	; 68
    1606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	8d 8b       	std	Y+21, r24	; 0x15
    1610:	9e 8b       	std	Y+22, r25	; 0x16
    1612:	af 8b       	std	Y+23, r26	; 0x17
    1614:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1616:	6d 89       	ldd	r22, Y+21	; 0x15
    1618:	7e 89       	ldd	r23, Y+22	; 0x16
    161a:	8f 89       	ldd	r24, Y+23	; 0x17
    161c:	98 8d       	ldd	r25, Y+24	; 0x18
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e8       	ldi	r20, 0x80	; 128
    1624:	5f e3       	ldi	r21, 0x3F	; 63
    1626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162a:	88 23       	and	r24, r24
    162c:	2c f4       	brge	.+10     	; 0x1638 <LCD_voidInit+0x350>
		__ticks = 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9c 8b       	std	Y+20, r25	; 0x14
    1634:	8b 8b       	std	Y+19, r24	; 0x13
    1636:	3f c0       	rjmp	.+126    	; 0x16b6 <LCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1638:	6d 89       	ldd	r22, Y+21	; 0x15
    163a:	7e 89       	ldd	r23, Y+22	; 0x16
    163c:	8f 89       	ldd	r24, Y+23	; 0x17
    163e:	98 8d       	ldd	r25, Y+24	; 0x18
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	4f e7       	ldi	r20, 0x7F	; 127
    1646:	57 e4       	ldi	r21, 0x47	; 71
    1648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    164c:	18 16       	cp	r1, r24
    164e:	4c f5       	brge	.+82     	; 0x16a2 <LCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1650:	69 8d       	ldd	r22, Y+25	; 0x19
    1652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e2       	ldi	r20, 0x20	; 32
    165e:	51 e4       	ldi	r21, 0x41	; 65
    1660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	bc 01       	movw	r22, r24
    166a:	cd 01       	movw	r24, r26
    166c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9c 8b       	std	Y+20, r25	; 0x14
    1676:	8b 8b       	std	Y+19, r24	; 0x13
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <LCD_voidInit+0x3b0>
    167a:	88 ec       	ldi	r24, 0xC8	; 200
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9a 8b       	std	Y+18, r25	; 0x12
    1680:	89 8b       	std	Y+17, r24	; 0x11
    1682:	89 89       	ldd	r24, Y+17	; 0x11
    1684:	9a 89       	ldd	r25, Y+18	; 0x12
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <LCD_voidInit+0x39e>
    168a:	9a 8b       	std	Y+18, r25	; 0x12
    168c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	8b 89       	ldd	r24, Y+19	; 0x13
    1690:	9c 89       	ldd	r25, Y+20	; 0x14
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	9c 8b       	std	Y+20, r25	; 0x14
    1696:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1698:	8b 89       	ldd	r24, Y+19	; 0x13
    169a:	9c 89       	ldd	r25, Y+20	; 0x14
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	69 f7       	brne	.-38     	; 0x167a <LCD_voidInit+0x392>
    16a0:	14 c0       	rjmp	.+40     	; 0x16ca <LCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a2:	6d 89       	ldd	r22, Y+21	; 0x15
    16a4:	7e 89       	ldd	r23, Y+22	; 0x16
    16a6:	8f 89       	ldd	r24, Y+23	; 0x17
    16a8:	98 8d       	ldd	r25, Y+24	; 0x18
    16aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9c 8b       	std	Y+20, r25	; 0x14
    16b4:	8b 8b       	std	Y+19, r24	; 0x13
    16b6:	8b 89       	ldd	r24, Y+19	; 0x13
    16b8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ba:	98 8b       	std	Y+16, r25	; 0x10
    16bc:	8f 87       	std	Y+15, r24	; 0x0f
    16be:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c0:	98 89       	ldd	r25, Y+16	; 0x10
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <LCD_voidInit+0x3da>
    16c6:	98 8b       	std	Y+16, r25	; 0x10
    16c8:	8f 87       	std	Y+15, r24	; 0x0f

	// delay for more than 1.53 ms
	_delay_ms(2);

	// entry mode set
	LCD_voidSendCommand(0x0A);
    16ca:	8a e0       	ldi	r24, 0x0A	; 10
    16cc:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <LCD_voidSendCommand>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a0 e8       	ldi	r26, 0x80	; 128
    16d6:	bf e3       	ldi	r27, 0x3F	; 63
    16d8:	8b 87       	std	Y+11, r24	; 0x0b
    16da:	9c 87       	std	Y+12, r25	; 0x0c
    16dc:	ad 87       	std	Y+13, r26	; 0x0d
    16de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	4a ef       	ldi	r20, 0xFA	; 250
    16ee:	54 e4       	ldi	r21, 0x44	; 68
    16f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	8f 83       	std	Y+7, r24	; 0x07
    16fa:	98 87       	std	Y+8, r25	; 0x08
    16fc:	a9 87       	std	Y+9, r26	; 0x09
    16fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1700:	6f 81       	ldd	r22, Y+7	; 0x07
    1702:	78 85       	ldd	r23, Y+8	; 0x08
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e8       	ldi	r20, 0x80	; 128
    170e:	5f e3       	ldi	r21, 0x3F	; 63
    1710:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1714:	88 23       	and	r24, r24
    1716:	2c f4       	brge	.+10     	; 0x1722 <LCD_voidInit+0x43a>
		__ticks = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	3f c0       	rjmp	.+126    	; 0x17a0 <LCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    1722:	6f 81       	ldd	r22, Y+7	; 0x07
    1724:	78 85       	ldd	r23, Y+8	; 0x08
    1726:	89 85       	ldd	r24, Y+9	; 0x09
    1728:	9a 85       	ldd	r25, Y+10	; 0x0a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	4f e7       	ldi	r20, 0x7F	; 127
    1730:	57 e4       	ldi	r21, 0x47	; 71
    1732:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1736:	18 16       	cp	r1, r24
    1738:	4c f5       	brge	.+82     	; 0x178c <LCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173a:	6b 85       	ldd	r22, Y+11	; 0x0b
    173c:	7c 85       	ldd	r23, Y+12	; 0x0c
    173e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1740:	9e 85       	ldd	r25, Y+14	; 0x0e
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e2       	ldi	r20, 0x20	; 32
    1748:	51 e4       	ldi	r21, 0x41	; 65
    174a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <LCD_voidInit+0x49a>
    1764:	88 ec       	ldi	r24, 0xC8	; 200
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	9c 83       	std	Y+4, r25	; 0x04
    176a:	8b 83       	std	Y+3, r24	; 0x03
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <LCD_voidInit+0x488>
    1774:	9c 83       	std	Y+4, r25	; 0x04
    1776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	9e 83       	std	Y+6, r25	; 0x06
    1780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	69 f7       	brne	.-38     	; 0x1764 <LCD_voidInit+0x47c>
    178a:	14 c0       	rjmp	.+40     	; 0x17b4 <LCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <LCD_voidInit+0x4c4>
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01

	//delay for more than 1 ms
	_delay_ms(1);

}
    17b4:	ca 5b       	subi	r28, 0xBA	; 186
    17b6:	df 4f       	sbci	r29, 0xFF	; 255
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	08 95       	ret

000017cc <LCD_voidSendCommand>:


void LCD_voidSendCommand (u8 COPY_LCD_CMD)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	6d 97       	sbiw	r28, 0x1d	; 29
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	8d 8f       	std	Y+29, r24	; 0x1d
	// disable Enable bin
	DIO_SetPinValue (LCD_CTRL_PORT,LCD_EN,LOW);
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	65 e0       	ldi	r22, 0x05	; 5
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//RS COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RS , LOW) ;
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	67 e0       	ldi	r22, 0x07	; 7
    17f0:	40 e0       	ldi	r20, 0x00	; 0
    17f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	//_delay_ms(1) ;

	//RW COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RW , LOW) ;
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	66 e0       	ldi	r22, 0x06	; 6
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	//_delay_ms(1) ;

	// SEND THE COMMAND
	DIO_SetPortValue (LCD_DATA_PORT ,COPY_LCD_CMD) ;
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1804:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	a0 e8       	ldi	r26, 0x80	; 128
    180e:	bf e3       	ldi	r27, 0x3F	; 63
    1810:	89 8f       	std	Y+25, r24	; 0x19
    1812:	9a 8f       	std	Y+26, r25	; 0x1a
    1814:	ab 8f       	std	Y+27, r26	; 0x1b
    1816:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1818:	69 8d       	ldd	r22, Y+25	; 0x19
    181a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    181c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    181e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	4a ef       	ldi	r20, 0xFA	; 250
    1826:	54 e4       	ldi	r21, 0x44	; 68
    1828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	8d 8b       	std	Y+21, r24	; 0x15
    1832:	9e 8b       	std	Y+22, r25	; 0x16
    1834:	af 8b       	std	Y+23, r26	; 0x17
    1836:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1838:	6d 89       	ldd	r22, Y+21	; 0x15
    183a:	7e 89       	ldd	r23, Y+22	; 0x16
    183c:	8f 89       	ldd	r24, Y+23	; 0x17
    183e:	98 8d       	ldd	r25, Y+24	; 0x18
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e8       	ldi	r20, 0x80	; 128
    1846:	5f e3       	ldi	r21, 0x3F	; 63
    1848:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    184c:	88 23       	and	r24, r24
    184e:	2c f4       	brge	.+10     	; 0x185a <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	9c 8b       	std	Y+20, r25	; 0x14
    1856:	8b 8b       	std	Y+19, r24	; 0x13
    1858:	3f c0       	rjmp	.+126    	; 0x18d8 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    185a:	6d 89       	ldd	r22, Y+21	; 0x15
    185c:	7e 89       	ldd	r23, Y+22	; 0x16
    185e:	8f 89       	ldd	r24, Y+23	; 0x17
    1860:	98 8d       	ldd	r25, Y+24	; 0x18
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	3f ef       	ldi	r19, 0xFF	; 255
    1866:	4f e7       	ldi	r20, 0x7F	; 127
    1868:	57 e4       	ldi	r21, 0x47	; 71
    186a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    186e:	18 16       	cp	r1, r24
    1870:	4c f5       	brge	.+82     	; 0x18c4 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1872:	69 8d       	ldd	r22, Y+25	; 0x19
    1874:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1876:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1878:	9c 8d       	ldd	r25, Y+28	; 0x1c
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e2       	ldi	r20, 0x20	; 32
    1880:	51 e4       	ldi	r21, 0x41	; 65
    1882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	bc 01       	movw	r22, r24
    188c:	cd 01       	movw	r24, r26
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	9c 8b       	std	Y+20, r25	; 0x14
    1898:	8b 8b       	std	Y+19, r24	; 0x13
    189a:	0f c0       	rjmp	.+30     	; 0x18ba <LCD_voidSendCommand+0xee>
    189c:	88 ec       	ldi	r24, 0xC8	; 200
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9a 8b       	std	Y+18, r25	; 0x12
    18a2:	89 8b       	std	Y+17, r24	; 0x11
    18a4:	89 89       	ldd	r24, Y+17	; 0x11
    18a6:	9a 89       	ldd	r25, Y+18	; 0x12
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <LCD_voidSendCommand+0xdc>
    18ac:	9a 8b       	std	Y+18, r25	; 0x12
    18ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b0:	8b 89       	ldd	r24, Y+19	; 0x13
    18b2:	9c 89       	ldd	r25, Y+20	; 0x14
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	9c 8b       	std	Y+20, r25	; 0x14
    18b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ba:	8b 89       	ldd	r24, Y+19	; 0x13
    18bc:	9c 89       	ldd	r25, Y+20	; 0x14
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	69 f7       	brne	.-38     	; 0x189c <LCD_voidSendCommand+0xd0>
    18c2:	14 c0       	rjmp	.+40     	; 0x18ec <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c4:	6d 89       	ldd	r22, Y+21	; 0x15
    18c6:	7e 89       	ldd	r23, Y+22	; 0x16
    18c8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ca:	98 8d       	ldd	r25, Y+24	; 0x18
    18cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	9c 8b       	std	Y+20, r25	; 0x14
    18d6:	8b 8b       	std	Y+19, r24	; 0x13
    18d8:	8b 89       	ldd	r24, Y+19	; 0x13
    18da:	9c 89       	ldd	r25, Y+20	; 0x14
    18dc:	98 8b       	std	Y+16, r25	; 0x10
    18de:	8f 87       	std	Y+15, r24	; 0x0f
    18e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e2:	98 89       	ldd	r25, Y+16	; 0x10
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_voidSendCommand+0x118>
    18e8:	98 8b       	std	Y+16, r25	; 0x10
    18ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , HIGH) ;
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	65 e0       	ldi	r22, 0x05	; 5
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e8       	ldi	r26, 0x80	; 128
    18fc:	bf e3       	ldi	r27, 0x3F	; 63
    18fe:	8b 87       	std	Y+11, r24	; 0x0b
    1900:	9c 87       	std	Y+12, r25	; 0x0c
    1902:	ad 87       	std	Y+13, r26	; 0x0d
    1904:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1906:	6b 85       	ldd	r22, Y+11	; 0x0b
    1908:	7c 85       	ldd	r23, Y+12	; 0x0c
    190a:	8d 85       	ldd	r24, Y+13	; 0x0d
    190c:	9e 85       	ldd	r25, Y+14	; 0x0e
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	4a ef       	ldi	r20, 0xFA	; 250
    1914:	54 e4       	ldi	r21, 0x44	; 68
    1916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	8f 83       	std	Y+7, r24	; 0x07
    1920:	98 87       	std	Y+8, r25	; 0x08
    1922:	a9 87       	std	Y+9, r26	; 0x09
    1924:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1926:	6f 81       	ldd	r22, Y+7	; 0x07
    1928:	78 85       	ldd	r23, Y+8	; 0x08
    192a:	89 85       	ldd	r24, Y+9	; 0x09
    192c:	9a 85       	ldd	r25, Y+10	; 0x0a
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193a:	88 23       	and	r24, r24
    193c:	2c f4       	brge	.+10     	; 0x1948 <LCD_voidSendCommand+0x17c>
		__ticks = 1;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	3f c0       	rjmp	.+126    	; 0x19c6 <LCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1948:	6f 81       	ldd	r22, Y+7	; 0x07
    194a:	78 85       	ldd	r23, Y+8	; 0x08
    194c:	89 85       	ldd	r24, Y+9	; 0x09
    194e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	3f ef       	ldi	r19, 0xFF	; 255
    1954:	4f e7       	ldi	r20, 0x7F	; 127
    1956:	57 e4       	ldi	r21, 0x47	; 71
    1958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195c:	18 16       	cp	r1, r24
    195e:	4c f5       	brge	.+82     	; 0x19b2 <LCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1960:	6b 85       	ldd	r22, Y+11	; 0x0b
    1962:	7c 85       	ldd	r23, Y+12	; 0x0c
    1964:	8d 85       	ldd	r24, Y+13	; 0x0d
    1966:	9e 85       	ldd	r25, Y+14	; 0x0e
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e2       	ldi	r20, 0x20	; 32
    196e:	51 e4       	ldi	r21, 0x41	; 65
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	0f c0       	rjmp	.+30     	; 0x19a8 <LCD_voidSendCommand+0x1dc>
    198a:	88 ec       	ldi	r24, 0xC8	; 200
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9c 83       	std	Y+4, r25	; 0x04
    1990:	8b 83       	std	Y+3, r24	; 0x03
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <LCD_voidSendCommand+0x1ca>
    199a:	9c 83       	std	Y+4, r25	; 0x04
    199c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	69 f7       	brne	.-38     	; 0x198a <LCD_voidSendCommand+0x1be>
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <LCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
    19b4:	78 85       	ldd	r23, Y+8	; 0x08
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_voidSendCommand+0x206>
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , LOW) ;
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	65 e0       	ldi	r22, 0x05	; 5
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

}
    19e4:	6d 96       	adiw	r28, 0x1d	; 29
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <LCD_voidWriteData>:
void LCD_voidWriteData (u8  COPY_LCD_WRITE)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	6d 97       	sbiw	r28, 0x1d	; 29
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	8d 8f       	std	Y+29, r24	; 0x1d

	// disable Enable bin
	DIO_SetPinValue (LCD_CTRL_PORT,LCD_EN,LOW);
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	65 e0       	ldi	r22, 0x05	; 5
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//RS COMMAND : HIGH
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RS , HIGH) ;
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	67 e0       	ldi	r22, 0x07	; 7
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	//_delay_ms(1) ;

	//RW COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RW , LOW) ;
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	66 e0       	ldi	r22, 0x06	; 6
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	//_delay_ms(1) ;

	// SEND THE COMMAND
	DIO_SetPortValue (LCD_DATA_PORT ,COPY_LCD_WRITE) ;
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a2e:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a0 e8       	ldi	r26, 0x80	; 128
    1a38:	bf e3       	ldi	r27, 0x3F	; 63
    1a3a:	89 8f       	std	Y+25, r24	; 0x19
    1a3c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a3e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a42:	69 8d       	ldd	r22, Y+25	; 0x19
    1a44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a ef       	ldi	r20, 0xFA	; 250
    1a50:	54 e4       	ldi	r21, 0x44	; 68
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8d 8b       	std	Y+21, r24	; 0x15
    1a5c:	9e 8b       	std	Y+22, r25	; 0x16
    1a5e:	af 8b       	std	Y+23, r26	; 0x17
    1a60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a62:	6d 89       	ldd	r22, Y+21	; 0x15
    1a64:	7e 89       	ldd	r23, Y+22	; 0x16
    1a66:	8f 89       	ldd	r24, Y+23	; 0x17
    1a68:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <LCD_voidWriteData+0x8e>
		__ticks = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9c 8b       	std	Y+20, r25	; 0x14
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <LCD_voidWriteData+0x10c>
	else if (__tmp > 65535)
    1a84:	6d 89       	ldd	r22, Y+21	; 0x15
    1a86:	7e 89       	ldd	r23, Y+22	; 0x16
    1a88:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	4c f5       	brge	.+82     	; 0x1aee <LCD_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	51 e4       	ldi	r21, 0x41	; 65
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9c 8b       	std	Y+20, r25	; 0x14
    1ac2:	8b 8b       	std	Y+19, r24	; 0x13
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <LCD_voidWriteData+0xee>
    1ac6:	88 ec       	ldi	r24, 0xC8	; 200
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9a 8b       	std	Y+18, r25	; 0x12
    1acc:	89 8b       	std	Y+17, r24	; 0x11
    1ace:	89 89       	ldd	r24, Y+17	; 0x11
    1ad0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <LCD_voidWriteData+0xdc>
    1ad6:	9a 8b       	std	Y+18, r25	; 0x12
    1ad8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ada:	8b 89       	ldd	r24, Y+19	; 0x13
    1adc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	9c 8b       	std	Y+20, r25	; 0x14
    1ae2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	69 f7       	brne	.-38     	; 0x1ac6 <LCD_voidWriteData+0xd0>
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <LCD_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aee:	6d 89       	ldd	r22, Y+21	; 0x15
    1af0:	7e 89       	ldd	r23, Y+22	; 0x16
    1af2:	8f 89       	ldd	r24, Y+23	; 0x17
    1af4:	98 8d       	ldd	r25, Y+24	; 0x18
    1af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9c 8b       	std	Y+20, r25	; 0x14
    1b00:	8b 8b       	std	Y+19, r24	; 0x13
    1b02:	8b 89       	ldd	r24, Y+19	; 0x13
    1b04:	9c 89       	ldd	r25, Y+20	; 0x14
    1b06:	98 8b       	std	Y+16, r25	; 0x10
    1b08:	8f 87       	std	Y+15, r24	; 0x0f
    1b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0c:	98 89       	ldd	r25, Y+16	; 0x10
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_voidWriteData+0x118>
    1b12:	98 8b       	std	Y+16, r25	; 0x10
    1b14:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , HIGH) ;
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	65 e0       	ldi	r22, 0x05	; 5
    1b1a:	41 e0       	ldi	r20, 0x01	; 1
    1b1c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a0 e8       	ldi	r26, 0x80	; 128
    1b26:	bf e3       	ldi	r27, 0x3F	; 63
    1b28:	8b 87       	std	Y+11, r24	; 0x0b
    1b2a:	9c 87       	std	Y+12, r25	; 0x0c
    1b2c:	ad 87       	std	Y+13, r26	; 0x0d
    1b2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	4a ef       	ldi	r20, 0xFA	; 250
    1b3e:	54 e4       	ldi	r21, 0x44	; 68
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8f 83       	std	Y+7, r24	; 0x07
    1b4a:	98 87       	std	Y+8, r25	; 0x08
    1b4c:	a9 87       	std	Y+9, r26	; 0x09
    1b4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b50:	6f 81       	ldd	r22, Y+7	; 0x07
    1b52:	78 85       	ldd	r23, Y+8	; 0x08
    1b54:	89 85       	ldd	r24, Y+9	; 0x09
    1b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <LCD_voidWriteData+0x17c>
		__ticks = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
    1b70:	3f c0       	rjmp	.+126    	; 0x1bf0 <LCD_voidWriteData+0x1fa>
	else if (__tmp > 65535)
    1b72:	6f 81       	ldd	r22, Y+7	; 0x07
    1b74:	78 85       	ldd	r23, Y+8	; 0x08
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	3f ef       	ldi	r19, 0xFF	; 255
    1b7e:	4f e7       	ldi	r20, 0x7F	; 127
    1b80:	57 e4       	ldi	r21, 0x47	; 71
    1b82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	4c f5       	brge	.+82     	; 0x1bdc <LCD_voidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e2       	ldi	r20, 0x20	; 32
    1b98:	51 e4       	ldi	r21, 0x41	; 65
    1b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9e 83       	std	Y+6, r25	; 0x06
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <LCD_voidWriteData+0x1dc>
    1bb4:	88 ec       	ldi	r24, 0xC8	; 200
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	9c 83       	std	Y+4, r25	; 0x04
    1bba:	8b 83       	std	Y+3, r24	; 0x03
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_voidWriteData+0x1ca>
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bca:	9e 81       	ldd	r25, Y+6	; 0x06
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	69 f7       	brne	.-38     	; 0x1bb4 <LCD_voidWriteData+0x1be>
    1bda:	14 c0       	rjmp	.+40     	; 0x1c04 <LCD_voidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bde:	78 85       	ldd	r23, Y+8	; 0x08
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD_voidWriteData+0x206>
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , LOW) ;
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	65 e0       	ldi	r22, 0x05	; 5
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

}
    1c0e:	6d 96       	adiw	r28, 0x1d	; 29
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 LCD_XPOS , u8 LCD_YPOS)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <LCD_voidGoToXY+0x6>
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	6a 83       	std	Y+2, r22	; 0x02
	// SET DD RAM ADRESS
	LCD_voidSendCommand((LCD_XPOS * 0x40 + LCD_YPOS) | 0b10000000);
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	00 24       	eor	r0, r0
    1c36:	96 95       	lsr	r25
    1c38:	87 95       	ror	r24
    1c3a:	07 94       	ror	r0
    1c3c:	96 95       	lsr	r25
    1c3e:	87 95       	ror	r24
    1c40:	07 94       	ror	r0
    1c42:	98 2f       	mov	r25, r24
    1c44:	80 2d       	mov	r24, r0
    1c46:	98 2f       	mov	r25, r24
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	89 0f       	add	r24, r25
    1c4c:	80 68       	ori	r24, 0x80	; 128
    1c4e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <LCD_voidSendCommand>

}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <LCD_voidWriteSpecialChar>:

void LCD_voidWriteSpecialChar(u8 *pattern , u8 block_no, u8 x, u8 y)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	27 97       	sbiw	r28, 0x07	; 7
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	9c 83       	std	Y+4, r25	; 0x04
    1c72:	8b 83       	std	Y+3, r24	; 0x03
    1c74:	6d 83       	std	Y+5, r22	; 0x05
    1c76:	4e 83       	std	Y+6, r20	; 0x06
    1c78:	2f 83       	std	Y+7, r18	; 0x07
	// variable for loop
	u8 i;

	// every block is 8 bytes so calculate address by multiply it with 8
	u8 address = 8 * block_no ;
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	89 83       	std	Y+1, r24	; 0x01

	// set CG RAM address from data sheet (00 01 A5-A0)
	LCD_voidSendCommand(address | 0b01000000);
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	80 64       	ori	r24, 0x40	; 64
    1c92:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <LCD_voidSendCommand>

	// LOOP to write data from CGRAM to DDRAM (array of 8 bytes)
	for(i = 0 ; i< 8; i++)
    1c96:	1a 82       	std	Y+2, r1	; 0x02
    1c98:	0e c0       	rjmp	.+28     	; 0x1cb6 <LCD_voidWriteSpecialChar+0x5a>
	{
		LCD_voidWriteData(pattern[i]);
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	e2 0f       	add	r30, r18
    1ca8:	f3 1f       	adc	r31, r19
    1caa:	80 81       	ld	r24, Z
    1cac:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_voidWriteData>

	// set CG RAM address from data sheet (00 01 A5-A0)
	LCD_voidSendCommand(address | 0b01000000);

	// LOOP to write data from CGRAM to DDRAM (array of 8 bytes)
	for(i = 0 ; i< 8; i++)
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	8f 5f       	subi	r24, 0xFF	; 255
    1cb4:	8a 83       	std	Y+2, r24	; 0x02
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	88 30       	cpi	r24, 0x08	; 8
    1cba:	78 f3       	brcs	.-34     	; 0x1c9a <LCD_voidWriteSpecialChar+0x3e>
	{
		LCD_voidWriteData(pattern[i]);
	}
	// set DDRAM to write on LCD by using GO TO XY
	LCD_voidGoToXY(x , y);
    1cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc0:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_voidGoToXY>

	//display block number from CGRAM
	LCD_voidWriteData(block_no);
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_voidWriteData>
}
    1cca:	27 96       	adiw	r28, 0x07	; 7
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <LCD_voidWriteNumber>:
void LCD_voidWriteNumber(u16 Number)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	2e 97       	sbiw	r28, 0x0e	; 14
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	98 87       	std	Y+8, r25	; 0x08
    1cf2:	8f 83       	std	Y+7, r24	; 0x07
	{
		LCD_voidWriteData(arr[i]) ;
	}


}
    1cf4:	2d b7       	in	r18, 0x3d	; 61
    1cf6:	3e b7       	in	r19, 0x3e	; 62
    1cf8:	3e 87       	std	Y+14, r19	; 0x0e
    1cfa:	2d 87       	std	Y+13, r18	; 0x0d

	//display block number from CGRAM
	LCD_voidWriteData(block_no);
}
void LCD_voidWriteNumber(u16 Number)
{
    1cfc:	8d b7       	in	r24, 0x3d	; 61
    1cfe:	9e b7       	in	r25, 0x3e	; 62
    1d00:	9a 87       	std	Y+10, r25	; 0x0a
    1d02:	89 87       	std	Y+9, r24	; 0x09
	u8 num_digit = 0 ;
    1d04:	1c 82       	std	Y+4, r1	; 0x04
	u8 i;
	u16 copy_number = Number;
    1d06:	8f 81       	ldd	r24, Y+7	; 0x07
    1d08:	98 85       	ldd	r25, Y+8	; 0x08
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01

	if(Number == 0)
    1d0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d10:	98 85       	ldd	r25, Y+8	; 0x08
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	89 f4       	brne	.+34     	; 0x1d38 <LCD_voidWriteNumber+0x5c>
	{
		LCD_voidWriteData('0') ;
    1d16:	80 e3       	ldi	r24, 0x30	; 48
    1d18:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_voidWriteData>
    1d1c:	0d c0       	rjmp	.+26     	; 0x1d38 <LCD_voidWriteNumber+0x5c>
	}

	while(copy_number != 0)
	{
		copy_number /= 10 ;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	2a e0       	ldi	r18, 0x0A	; 10
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	b9 01       	movw	r22, r18
    1d28:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__udivmodhi4>
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	89 83       	std	Y+1, r24	; 0x01
		num_digit += 1;
    1d32:	8c 81       	ldd	r24, Y+4	; 0x04
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	8c 83       	std	Y+4, r24	; 0x04
	if(Number == 0)
	{
		LCD_voidWriteData('0') ;
	}

	while(copy_number != 0)
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	79 f7       	brne	.-34     	; 0x1d1e <LCD_voidWriteNumber+0x42>
	{
		copy_number /= 10 ;
		num_digit += 1;
	}

	u8 arr[num_digit] ;
    1d40:	8c 81       	ldd	r24, Y+4	; 0x04
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	2d b7       	in	r18, 0x3d	; 61
    1d48:	3e b7       	in	r19, 0x3e	; 62
    1d4a:	28 1b       	sub	r18, r24
    1d4c:	39 0b       	sbc	r19, r25
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	3e bf       	out	0x3e, r19	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	2d bf       	out	0x3d, r18	; 61
    1d58:	8d b7       	in	r24, 0x3d	; 61
    1d5a:	9e b7       	in	r25, 0x3e	; 62
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	9c 87       	std	Y+12, r25	; 0x0c
    1d60:	8b 87       	std	Y+11, r24	; 0x0b
    1d62:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d64:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d66:	00 96       	adiw	r24, 0x00	; 0
    1d68:	9c 87       	std	Y+12, r25	; 0x0c
    1d6a:	8b 87       	std	Y+11, r24	; 0x0b
    1d6c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d6e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d70:	3e 83       	std	Y+6, r19	; 0x06
    1d72:	2d 83       	std	Y+5, r18	; 0x05

	for(i = num_digit ; i> 0 ; i--)
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	8b 83       	std	Y+3, r24	; 0x03
    1d78:	20 c0       	rjmp	.+64     	; 0x1dba <LCD_voidWriteNumber+0xde>
	{
		arr[i-1] = (u8)((Number % 10) +'0') ;
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	88 2f       	mov	r24, r24
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	fc 01       	movw	r30, r24
    1d82:	31 97       	sbiw	r30, 0x01	; 1
    1d84:	8f 81       	ldd	r24, Y+7	; 0x07
    1d86:	98 85       	ldd	r25, Y+8	; 0x08
    1d88:	2a e0       	ldi	r18, 0x0A	; 10
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	b9 01       	movw	r22, r18
    1d8e:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__udivmodhi4>
    1d92:	28 2f       	mov	r18, r24
    1d94:	20 5d       	subi	r18, 0xD0	; 208
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	e8 0f       	add	r30, r24
    1d9c:	f9 1f       	adc	r31, r25
    1d9e:	20 83       	st	Z, r18
		Number = Number /10 ;
    1da0:	8f 81       	ldd	r24, Y+7	; 0x07
    1da2:	98 85       	ldd	r25, Y+8	; 0x08
    1da4:	2a e0       	ldi	r18, 0x0A	; 10
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	b9 01       	movw	r22, r18
    1daa:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__udivmodhi4>
    1dae:	cb 01       	movw	r24, r22
    1db0:	98 87       	std	Y+8, r25	; 0x08
    1db2:	8f 83       	std	Y+7, r24	; 0x07
		num_digit += 1;
	}

	u8 arr[num_digit] ;

	for(i = num_digit ; i> 0 ; i--)
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	81 50       	subi	r24, 0x01	; 1
    1db8:	8b 83       	std	Y+3, r24	; 0x03
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	88 23       	and	r24, r24
    1dbe:	e9 f6       	brne	.-70     	; 0x1d7a <LCD_voidWriteNumber+0x9e>
		arr[i-1] = (u8)((Number % 10) +'0') ;
		Number = Number /10 ;
	}


	for(i = 0 ; i<num_digit ; i++)
    1dc0:	1b 82       	std	Y+3, r1	; 0x03
    1dc2:	0e c0       	rjmp	.+28     	; 0x1de0 <LCD_voidWriteNumber+0x104>
	{
		LCD_voidWriteData(arr[i]) ;
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	80 81       	ld	r24, Z
    1dd6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_voidWriteData>
		arr[i-1] = (u8)((Number % 10) +'0') ;
		Number = Number /10 ;
	}


	for(i = 0 ; i<num_digit ; i++)
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	8f 5f       	subi	r24, 0xFF	; 255
    1dde:	8b 83       	std	Y+3, r24	; 0x03
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	8c 81       	ldd	r24, Y+4	; 0x04
    1de4:	98 17       	cp	r25, r24
    1de6:	70 f3       	brcs	.-36     	; 0x1dc4 <LCD_voidWriteNumber+0xe8>
    1de8:	89 85       	ldd	r24, Y+9	; 0x09
    1dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	9e bf       	out	0x3e, r25	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	8d bf       	out	0x3d, r24	; 61
	{
		LCD_voidWriteData(arr[i]) ;
	}


}
    1df6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1df8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	3e bf       	out	0x3e, r19	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	2d bf       	out	0x3d, r18	; 61
    1e04:	2e 96       	adiw	r28, 0x0e	; 14
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <LCD_Display>:

void LCD_Display(u8 word[])
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <LCD_Display+0x6>
    1e1c:	0f 92       	push	r0
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	9b 83       	std	Y+3, r25	; 0x03
    1e24:	8a 83       	std	Y+2, r24	; 0x02
	u8 i ;

	for(i = 0; word[i]!=0 ;i++)
    1e26:	19 82       	std	Y+1, r1	; 0x01
    1e28:	0e c0       	rjmp	.+28     	; 0x1e46 <LCD_Display+0x30>
	{
		LCD_voidWriteData(word[i]);
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	9b 81       	ldd	r25, Y+3	; 0x03
    1e34:	fc 01       	movw	r30, r24
    1e36:	e2 0f       	add	r30, r18
    1e38:	f3 1f       	adc	r31, r19
    1e3a:	80 81       	ld	r24, Z
    1e3c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_voidWriteData>

void LCD_Display(u8 word[])
{
	u8 i ;

	for(i = 0; word[i]!=0 ;i++)
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	8f 5f       	subi	r24, 0xFF	; 255
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e50:	fc 01       	movw	r30, r24
    1e52:	e2 0f       	add	r30, r18
    1e54:	f3 1f       	adc	r31, r19
    1e56:	80 81       	ld	r24, Z
    1e58:	88 23       	and	r24, r24
    1e5a:	39 f7       	brne	.-50     	; 0x1e2a <LCD_Display+0x14>
	{
		LCD_voidWriteData(word[i]);
	}
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <main>:
#include"NOTES.h"

void PlayMusic( const int* pMusicNotes /** Pointer to table containing music data */,
				uint8_t tempo /** paying tempo from 0 to 100. Higher value = slower playback*/ );
void main()
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	e9 97       	sbiw	r28, 0x39	; 57
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
	//u16 i;
	Timer1_voidInit();
    1e7c:	0e 94 5d 12 	call	0x24ba	; 0x24ba <Timer1_voidInit>
	DIO_SetPinDirection(DDRD , PIN5 , OUTPUT);
    1e80:	87 e0       	ldi	r24, 0x07	; 7
    1e82:	65 e0       	ldi	r22, 0x05	; 5
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_SetPinDirection>
			 ICR1L =1700 ;
			 OCR1AL = 1000;
			_delay_ms(1000);
		}*/

		    PlayMusic( octave, 40 );
    1e8a:	8e ea       	ldi	r24, 0xAE	; 174
    1e8c:	92 e0       	ldi	r25, 0x02	; 2
    1e8e:	68 e2       	ldi	r22, 0x28	; 40
    1e90:	0e 94 2b 11 	call	0x2256	; 0x2256 <PlayMusic>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	aa e7       	ldi	r26, 0x7A	; 122
    1e9a:	b4 e4       	ldi	r27, 0x44	; 68
    1e9c:	8d ab       	std	Y+53, r24	; 0x35
    1e9e:	9e ab       	std	Y+54, r25	; 0x36
    1ea0:	af ab       	std	Y+55, r26	; 0x37
    1ea2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eaa:	98 ad       	ldd	r25, Y+56	; 0x38
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a ef       	ldi	r20, 0xFA	; 250
    1eb2:	54 e4       	ldi	r21, 0x44	; 68
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	89 ab       	std	Y+49, r24	; 0x31
    1ebe:	9a ab       	std	Y+50, r25	; 0x32
    1ec0:	ab ab       	std	Y+51, r26	; 0x33
    1ec2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ec4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eca:	9c a9       	ldd	r25, Y+52	; 0x34
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <main+0x7e>
		__ticks = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	98 ab       	std	Y+48, r25	; 0x30
    1ee2:	8f a7       	std	Y+47, r24	; 0x2f
    1ee4:	3f c0       	rjmp	.+126    	; 0x1f64 <main+0xfc>
	else if (__tmp > 65535)
    1ee6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eea:	8b a9       	ldd	r24, Y+51	; 0x33
    1eec:	9c a9       	ldd	r25, Y+52	; 0x34
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	3f ef       	ldi	r19, 0xFF	; 255
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	57 e4       	ldi	r21, 0x47	; 71
    1ef6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	4c f5       	brge	.+82     	; 0x1f50 <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	6d a9       	ldd	r22, Y+53	; 0x35
    1f00:	7e a9       	ldd	r23, Y+54	; 0x36
    1f02:	8f a9       	ldd	r24, Y+55	; 0x37
    1f04:	98 ad       	ldd	r25, Y+56	; 0x38
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	51 e4       	ldi	r21, 0x41	; 65
    1f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	98 ab       	std	Y+48, r25	; 0x30
    1f24:	8f a7       	std	Y+47, r24	; 0x2f
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <main+0xde>
    1f28:	88 ec       	ldi	r24, 0xC8	; 200
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9e a7       	std	Y+46, r25	; 0x2e
    1f2e:	8d a7       	std	Y+45, r24	; 0x2d
    1f30:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f32:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <main+0xcc>
    1f38:	9e a7       	std	Y+46, r25	; 0x2e
    1f3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	98 ab       	std	Y+48, r25	; 0x30
    1f44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f48:	98 a9       	ldd	r25, Y+48	; 0x30
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <main+0xc0>
    1f4e:	14 c0       	rjmp	.+40     	; 0x1f78 <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f50:	69 a9       	ldd	r22, Y+49	; 0x31
    1f52:	7a a9       	ldd	r23, Y+50	; 0x32
    1f54:	8b a9       	ldd	r24, Y+51	; 0x33
    1f56:	9c a9       	ldd	r25, Y+52	; 0x34
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	98 ab       	std	Y+48, r25	; 0x30
    1f62:	8f a7       	std	Y+47, r24	; 0x2f
    1f64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f66:	98 a9       	ldd	r25, Y+48	; 0x30
    1f68:	9c a7       	std	Y+44, r25	; 0x2c
    1f6a:	8b a7       	std	Y+43, r24	; 0x2b
    1f6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <main+0x108>
    1f74:	9c a7       	std	Y+44, r25	; 0x2c
    1f76:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);

			PlayMusic( furelise, 20 );
    1f78:	8a ef       	ldi	r24, 0xFA	; 250
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	64 e1       	ldi	r22, 0x14	; 20
    1f7e:	0e 94 2b 11 	call	0x2256	; 0x2256 <PlayMusic>
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	aa e7       	ldi	r26, 0x7A	; 122
    1f88:	b4 e4       	ldi	r27, 0x44	; 68
    1f8a:	8f a3       	std	Y+39, r24	; 0x27
    1f8c:	98 a7       	std	Y+40, r25	; 0x28
    1f8e:	a9 a7       	std	Y+41, r26	; 0x29
    1f90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f92:	6f a1       	ldd	r22, Y+39	; 0x27
    1f94:	78 a5       	ldd	r23, Y+40	; 0x28
    1f96:	89 a5       	ldd	r24, Y+41	; 0x29
    1f98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	4a ef       	ldi	r20, 0xFA	; 250
    1fa0:	54 e4       	ldi	r21, 0x44	; 68
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	8b a3       	std	Y+35, r24	; 0x23
    1fac:	9c a3       	std	Y+36, r25	; 0x24
    1fae:	ad a3       	std	Y+37, r26	; 0x25
    1fb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e8       	ldi	r20, 0x80	; 128
    1fc0:	5f e3       	ldi	r21, 0x3F	; 63
    1fc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc6:	88 23       	and	r24, r24
    1fc8:	2c f4       	brge	.+10     	; 0x1fd4 <main+0x16c>
		__ticks = 1;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	9a a3       	std	Y+34, r25	; 0x22
    1fd0:	89 a3       	std	Y+33, r24	; 0x21
    1fd2:	3f c0       	rjmp	.+126    	; 0x2052 <main+0x1ea>
	else if (__tmp > 65535)
    1fd4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fda:	9e a1       	ldd	r25, Y+38	; 0x26
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	3f ef       	ldi	r19, 0xFF	; 255
    1fe0:	4f e7       	ldi	r20, 0x7F	; 127
    1fe2:	57 e4       	ldi	r21, 0x47	; 71
    1fe4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe8:	18 16       	cp	r1, r24
    1fea:	4c f5       	brge	.+82     	; 0x203e <main+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fec:	6f a1       	ldd	r22, Y+39	; 0x27
    1fee:	78 a5       	ldd	r23, Y+40	; 0x28
    1ff0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ff2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e2       	ldi	r20, 0x20	; 32
    1ffa:	51 e4       	ldi	r21, 0x41	; 65
    1ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	9a a3       	std	Y+34, r25	; 0x22
    2012:	89 a3       	std	Y+33, r24	; 0x21
    2014:	0f c0       	rjmp	.+30     	; 0x2034 <main+0x1cc>
    2016:	88 ec       	ldi	r24, 0xC8	; 200
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	98 a3       	std	Y+32, r25	; 0x20
    201c:	8f 8f       	std	Y+31, r24	; 0x1f
    201e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2020:	98 a1       	ldd	r25, Y+32	; 0x20
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	f1 f7       	brne	.-4      	; 0x2022 <main+0x1ba>
    2026:	98 a3       	std	Y+32, r25	; 0x20
    2028:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202a:	89 a1       	ldd	r24, Y+33	; 0x21
    202c:	9a a1       	ldd	r25, Y+34	; 0x22
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	9a a3       	std	Y+34, r25	; 0x22
    2032:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2034:	89 a1       	ldd	r24, Y+33	; 0x21
    2036:	9a a1       	ldd	r25, Y+34	; 0x22
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	69 f7       	brne	.-38     	; 0x2016 <main+0x1ae>
    203c:	14 c0       	rjmp	.+40     	; 0x2066 <main+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203e:	6b a1       	ldd	r22, Y+35	; 0x23
    2040:	7c a1       	ldd	r23, Y+36	; 0x24
    2042:	8d a1       	ldd	r24, Y+37	; 0x25
    2044:	9e a1       	ldd	r25, Y+38	; 0x26
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9a a3       	std	Y+34, r25	; 0x22
    2050:	89 a3       	std	Y+33, r24	; 0x21
    2052:	89 a1       	ldd	r24, Y+33	; 0x21
    2054:	9a a1       	ldd	r25, Y+34	; 0x22
    2056:	9e 8f       	std	Y+30, r25	; 0x1e
    2058:	8d 8f       	std	Y+29, r24	; 0x1d
    205a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    205c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <main+0x1f6>
    2062:	9e 8f       	std	Y+30, r25	; 0x1e
    2064:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);

			PlayMusic( starwars, 17 );
    2066:	88 e6       	ldi	r24, 0x68	; 104
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	61 e1       	ldi	r22, 0x11	; 17
    206c:	0e 94 2b 11 	call	0x2256	; 0x2256 <PlayMusic>
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	aa e7       	ldi	r26, 0x7A	; 122
    2076:	b4 e4       	ldi	r27, 0x44	; 68
    2078:	89 8f       	std	Y+25, r24	; 0x19
    207a:	9a 8f       	std	Y+26, r25	; 0x1a
    207c:	ab 8f       	std	Y+27, r26	; 0x1b
    207e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2080:	69 8d       	ldd	r22, Y+25	; 0x19
    2082:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2084:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2086:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	4a ef       	ldi	r20, 0xFA	; 250
    208e:	54 e4       	ldi	r21, 0x44	; 68
    2090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	8d 8b       	std	Y+21, r24	; 0x15
    209a:	9e 8b       	std	Y+22, r25	; 0x16
    209c:	af 8b       	std	Y+23, r26	; 0x17
    209e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20a0:	6d 89       	ldd	r22, Y+21	; 0x15
    20a2:	7e 89       	ldd	r23, Y+22	; 0x16
    20a4:	8f 89       	ldd	r24, Y+23	; 0x17
    20a6:	98 8d       	ldd	r25, Y+24	; 0x18
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e8       	ldi	r20, 0x80	; 128
    20ae:	5f e3       	ldi	r21, 0x3F	; 63
    20b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b4:	88 23       	and	r24, r24
    20b6:	2c f4       	brge	.+10     	; 0x20c2 <main+0x25a>
		__ticks = 1;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9c 8b       	std	Y+20, r25	; 0x14
    20be:	8b 8b       	std	Y+19, r24	; 0x13
    20c0:	3f c0       	rjmp	.+126    	; 0x2140 <main+0x2d8>
	else if (__tmp > 65535)
    20c2:	6d 89       	ldd	r22, Y+21	; 0x15
    20c4:	7e 89       	ldd	r23, Y+22	; 0x16
    20c6:	8f 89       	ldd	r24, Y+23	; 0x17
    20c8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	3f ef       	ldi	r19, 0xFF	; 255
    20ce:	4f e7       	ldi	r20, 0x7F	; 127
    20d0:	57 e4       	ldi	r21, 0x47	; 71
    20d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d6:	18 16       	cp	r1, r24
    20d8:	4c f5       	brge	.+82     	; 0x212c <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20da:	69 8d       	ldd	r22, Y+25	; 0x19
    20dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e2       	ldi	r20, 0x20	; 32
    20e8:	51 e4       	ldi	r21, 0x41	; 65
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	9c 8b       	std	Y+20, r25	; 0x14
    2100:	8b 8b       	std	Y+19, r24	; 0x13
    2102:	0f c0       	rjmp	.+30     	; 0x2122 <main+0x2ba>
    2104:	88 ec       	ldi	r24, 0xC8	; 200
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9a 8b       	std	Y+18, r25	; 0x12
    210a:	89 8b       	std	Y+17, r24	; 0x11
    210c:	89 89       	ldd	r24, Y+17	; 0x11
    210e:	9a 89       	ldd	r25, Y+18	; 0x12
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <main+0x2a8>
    2114:	9a 8b       	std	Y+18, r25	; 0x12
    2116:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2118:	8b 89       	ldd	r24, Y+19	; 0x13
    211a:	9c 89       	ldd	r25, Y+20	; 0x14
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	9c 8b       	std	Y+20, r25	; 0x14
    2120:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2122:	8b 89       	ldd	r24, Y+19	; 0x13
    2124:	9c 89       	ldd	r25, Y+20	; 0x14
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	69 f7       	brne	.-38     	; 0x2104 <main+0x29c>
    212a:	14 c0       	rjmp	.+40     	; 0x2154 <main+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212c:	6d 89       	ldd	r22, Y+21	; 0x15
    212e:	7e 89       	ldd	r23, Y+22	; 0x16
    2130:	8f 89       	ldd	r24, Y+23	; 0x17
    2132:	98 8d       	ldd	r25, Y+24	; 0x18
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9c 8b       	std	Y+20, r25	; 0x14
    213e:	8b 8b       	std	Y+19, r24	; 0x13
    2140:	8b 89       	ldd	r24, Y+19	; 0x13
    2142:	9c 89       	ldd	r25, Y+20	; 0x14
    2144:	98 8b       	std	Y+16, r25	; 0x10
    2146:	8f 87       	std	Y+15, r24	; 0x0f
    2148:	8f 85       	ldd	r24, Y+15	; 0x0f
    214a:	98 89       	ldd	r25, Y+16	; 0x10
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <main+0x2e4>
    2150:	98 8b       	std	Y+16, r25	; 0x10
    2152:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);

			for(i = 0 ; i< 2; i++)
    2154:	19 ae       	std	Y+57, r1	; 0x39
    2156:	7a c0       	rjmp	.+244    	; 0x224c <main+0x3e4>
		   {PlayMusic( happy, 20 );
    2158:	8e e3       	ldi	r24, 0x3E	; 62
    215a:	92 e0       	ldi	r25, 0x02	; 2
    215c:	64 e1       	ldi	r22, 0x14	; 20
    215e:	0e 94 2b 11 	call	0x2256	; 0x2256 <PlayMusic>
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	aa e7       	ldi	r26, 0x7A	; 122
    2168:	b4 e4       	ldi	r27, 0x44	; 68
    216a:	8b 87       	std	Y+11, r24	; 0x0b
    216c:	9c 87       	std	Y+12, r25	; 0x0c
    216e:	ad 87       	std	Y+13, r26	; 0x0d
    2170:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2172:	6b 85       	ldd	r22, Y+11	; 0x0b
    2174:	7c 85       	ldd	r23, Y+12	; 0x0c
    2176:	8d 85       	ldd	r24, Y+13	; 0x0d
    2178:	9e 85       	ldd	r25, Y+14	; 0x0e
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	4a ef       	ldi	r20, 0xFA	; 250
    2180:	54 e4       	ldi	r21, 0x44	; 68
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	8f 83       	std	Y+7, r24	; 0x07
    218c:	98 87       	std	Y+8, r25	; 0x08
    218e:	a9 87       	std	Y+9, r26	; 0x09
    2190:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2192:	6f 81       	ldd	r22, Y+7	; 0x07
    2194:	78 85       	ldd	r23, Y+8	; 0x08
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e8       	ldi	r20, 0x80	; 128
    21a0:	5f e3       	ldi	r21, 0x3F	; 63
    21a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a6:	88 23       	and	r24, r24
    21a8:	2c f4       	brge	.+10     	; 0x21b4 <main+0x34c>
		__ticks = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	3f c0       	rjmp	.+126    	; 0x2232 <main+0x3ca>
	else if (__tmp > 65535)
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	3f ef       	ldi	r19, 0xFF	; 255
    21c0:	4f e7       	ldi	r20, 0x7F	; 127
    21c2:	57 e4       	ldi	r21, 0x47	; 71
    21c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c8:	18 16       	cp	r1, r24
    21ca:	4c f5       	brge	.+82     	; 0x221e <main+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e2       	ldi	r20, 0x20	; 32
    21da:	51 e4       	ldi	r21, 0x41	; 65
    21dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	bc 01       	movw	r22, r24
    21e6:	cd 01       	movw	r24, r26
    21e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	9e 83       	std	Y+6, r25	; 0x06
    21f2:	8d 83       	std	Y+5, r24	; 0x05
    21f4:	0f c0       	rjmp	.+30     	; 0x2214 <main+0x3ac>
    21f6:	88 ec       	ldi	r24, 0xC8	; 200
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	9c 83       	std	Y+4, r25	; 0x04
    21fc:	8b 83       	std	Y+3, r24	; 0x03
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <main+0x39a>
    2206:	9c 83       	std	Y+4, r25	; 0x04
    2208:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	69 f7       	brne	.-38     	; 0x21f6 <main+0x38e>
    221c:	14 c0       	rjmp	.+40     	; 0x2246 <main+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221e:	6f 81       	ldd	r22, Y+7	; 0x07
    2220:	78 85       	ldd	r23, Y+8	; 0x08
    2222:	89 85       	ldd	r24, Y+9	; 0x09
    2224:	9a 85       	ldd	r25, Y+10	; 0x0a
    2226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
    2232:	8d 81       	ldd	r24, Y+5	; 0x05
    2234:	9e 81       	ldd	r25, Y+6	; 0x06
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	9a 81       	ldd	r25, Y+2	; 0x02
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <main+0x3d6>
    2242:	9a 83       	std	Y+2, r25	; 0x02
    2244:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);

			PlayMusic( starwars, 17 );
			_delay_ms(1000);

			for(i = 0 ; i< 2; i++)
    2246:	89 ad       	ldd	r24, Y+57	; 0x39
    2248:	8f 5f       	subi	r24, 0xFF	; 255
    224a:	89 af       	std	Y+57, r24	; 0x39
    224c:	89 ad       	ldd	r24, Y+57	; 0x39
    224e:	82 30       	cpi	r24, 0x02	; 2
    2250:	08 f4       	brcc	.+2      	; 0x2254 <main+0x3ec>
    2252:	82 cf       	rjmp	.-252    	; 0x2158 <main+0x2f0>
    2254:	1a ce       	rjmp	.-972    	; 0x1e8a <main+0x22>

00002256 <PlayMusic>:

}

void PlayMusic( const int* pMusicNotes /** Pointer to table containing music data */,
				uint8_t tempo /** paying tempo from 0 to 100. Higher value = slower playback*/ )
{
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	65 97       	sbiw	r28, 0x15	; 21
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	9c 8b       	std	Y+20, r25	; 0x14
    226c:	8b 8b       	std	Y+19, r24	; 0x13
    226e:	6d 8b       	std	Y+21, r22	; 0x15
	int duration;
	int note;
	int i;
	uint16_t delay = tempo * 1000;
    2270:	8d 89       	ldd	r24, Y+21	; 0x15
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	88 ee       	ldi	r24, 0xE8	; 232
    2278:	93 e0       	ldi	r25, 0x03	; 3
    227a:	ac 01       	movw	r20, r24
    227c:	24 9f       	mul	r18, r20
    227e:	c0 01       	movw	r24, r0
    2280:	25 9f       	mul	r18, r21
    2282:	90 0d       	add	r25, r0
    2284:	34 9f       	mul	r19, r20
    2286:	90 0d       	add	r25, r0
    2288:	11 24       	eor	r1, r1
    228a:	9c 87       	std	Y+12, r25	; 0x0c
    228c:	8b 87       	std	Y+11, r24	; 0x0b
    228e:	75 c0       	rjmp	.+234    	; 0x237a <PlayMusic+0x124>

	while( *pMusicNotes )
	{
		note = *pMusicNotes;
    2290:	eb 89       	ldd	r30, Y+19	; 0x13
    2292:	fc 89       	ldd	r31, Y+20	; 0x14
    2294:	80 81       	ld	r24, Z
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	98 8b       	std	Y+16, r25	; 0x10
    229a:	8f 87       	std	Y+15, r24	; 0x0f
		pMusicNotes++;
    229c:	8b 89       	ldd	r24, Y+19	; 0x13
    229e:	9c 89       	ldd	r25, Y+20	; 0x14
    22a0:	02 96       	adiw	r24, 0x02	; 2
    22a2:	9c 8b       	std	Y+20, r25	; 0x14
    22a4:	8b 8b       	std	Y+19, r24	; 0x13

		duration = *pMusicNotes;
    22a6:	eb 89       	ldd	r30, Y+19	; 0x13
    22a8:	fc 89       	ldd	r31, Y+20	; 0x14
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	9a 8b       	std	Y+18, r25	; 0x12
    22b0:	89 8b       	std	Y+17, r24	; 0x11
		pMusicNotes++;
    22b2:	8b 89       	ldd	r24, Y+19	; 0x13
    22b4:	9c 89       	ldd	r25, Y+20	; 0x14
    22b6:	02 96       	adiw	r24, 0x02	; 2
    22b8:	9c 8b       	std	Y+20, r25	; 0x14
    22ba:	8b 8b       	std	Y+19, r24	; 0x13

		if( p == note )
    22bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22be:	98 89       	ldd	r25, Y+16	; 0x10
    22c0:	81 30       	cpi	r24, 0x01	; 1
    22c2:	91 05       	cpc	r25, r1
    22c4:	29 f4       	brne	.+10     	; 0x22d0 <PlayMusic+0x7a>
		{
			//pause, do not generate any sound
			OCR1AL = 0;
    22c6:	ea e4       	ldi	r30, 0x4A	; 74
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	11 82       	std	Z+1, r1	; 0x01
    22cc:	10 82       	st	Z, r1
    22ce:	0c c0       	rjmp	.+24     	; 0x22e8 <PlayMusic+0x92>
		}
		else
		{
			//not a pause, generate tone
			OCR1AL = 100 ;
    22d0:	ea e4       	ldi	r30, 0x4A	; 74
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	84 e6       	ldi	r24, 0x64	; 100
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	91 83       	std	Z+1, r25	; 0x01
    22da:	80 83       	st	Z, r24

			//set frequency
			ICR1L = note;
    22dc:	e6 e4       	ldi	r30, 0x46	; 70
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e2:	98 89       	ldd	r25, Y+16	; 0x10
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
		}

		//wait duration
		for(i=0;i<32/duration;i++)
    22e8:	1e 86       	std	Y+14, r1	; 0x0e
    22ea:	1d 86       	std	Y+13, r1	; 0x0d
    22ec:	37 c0       	rjmp	.+110    	; 0x235c <PlayMusic+0x106>
    22ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    22f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    22f2:	9a 87       	std	Y+10, r25	; 0x0a
    22f4:	89 87       	std	Y+9, r24	; 0x09
    22f6:	89 85       	ldd	r24, Y+9	; 0x09
    22f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <PlayMusic+0xa4>
    22fe:	9a 87       	std	Y+10, r25	; 0x0a
    2300:	89 87       	std	Y+9, r24	; 0x09
    2302:	8b 85       	ldd	r24, Y+11	; 0x0b
    2304:	9c 85       	ldd	r25, Y+12	; 0x0c
    2306:	98 87       	std	Y+8, r25	; 0x08
    2308:	8f 83       	std	Y+7, r24	; 0x07
    230a:	8f 81       	ldd	r24, Y+7	; 0x07
    230c:	98 85       	ldd	r25, Y+8	; 0x08
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <PlayMusic+0xb8>
    2312:	98 87       	std	Y+8, r25	; 0x08
    2314:	8f 83       	std	Y+7, r24	; 0x07
    2316:	8b 85       	ldd	r24, Y+11	; 0x0b
    2318:	9c 85       	ldd	r25, Y+12	; 0x0c
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	9e 81       	ldd	r25, Y+6	; 0x06
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <PlayMusic+0xcc>
    2326:	9e 83       	std	Y+6, r25	; 0x06
    2328:	8d 83       	std	Y+5, r24	; 0x05
    232a:	8b 85       	ldd	r24, Y+11	; 0x0b
    232c:	9c 85       	ldd	r25, Y+12	; 0x0c
    232e:	9c 83       	std	Y+4, r25	; 0x04
    2330:	8b 83       	std	Y+3, r24	; 0x03
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <PlayMusic+0xe0>
    233a:	9c 83       	std	Y+4, r25	; 0x04
    233c:	8b 83       	std	Y+3, r24	; 0x03
    233e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2340:	9c 85       	ldd	r25, Y+12	; 0x0c
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <PlayMusic+0xf4>
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	8d 85       	ldd	r24, Y+13	; 0x0d
    2354:	9e 85       	ldd	r25, Y+14	; 0x0e
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	9e 87       	std	Y+14, r25	; 0x0e
    235a:	8d 87       	std	Y+13, r24	; 0x0d
    235c:	80 e2       	ldi	r24, 0x20	; 32
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	29 89       	ldd	r18, Y+17	; 0x11
    2362:	3a 89       	ldd	r19, Y+18	; 0x12
    2364:	b9 01       	movw	r22, r18
    2366:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__divmodhi4>
    236a:	cb 01       	movw	r24, r22
    236c:	9c 01       	movw	r18, r24
    236e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2370:	9e 85       	ldd	r25, Y+14	; 0x0e
    2372:	82 17       	cp	r24, r18
    2374:	93 07       	cpc	r25, r19
    2376:	0c f4       	brge	.+2      	; 0x237a <PlayMusic+0x124>
    2378:	ba cf       	rjmp	.-140    	; 0x22ee <PlayMusic+0x98>
	int duration;
	int note;
	int i;
	uint16_t delay = tempo * 1000;

	while( *pMusicNotes )
    237a:	eb 89       	ldd	r30, Y+19	; 0x13
    237c:	fc 89       	ldd	r31, Y+20	; 0x14
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	09 f0       	breq	.+2      	; 0x2388 <PlayMusic+0x132>
    2386:	84 cf       	rjmp	.-248    	; 0x2290 <PlayMusic+0x3a>
		}

	}

	//turn off any sound
	OCR1AL = 0;
    2388:	ea e4       	ldi	r30, 0x4A	; 74
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	11 82       	std	Z+1, r1	; 0x01
    238e:	10 82       	st	Z, r1
}
    2390:	65 96       	adiw	r28, 0x15	; 21
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <SEVENSEGMENT_voidSetNumber>:
#include"LIBS\STD_TYPES.h"
#include"SEVEN_SEGMENT_INT.h"
#include"DIO_INT.h"

void SEVENSEGMENT_voidSetNumber(u8 copy_u8Number , u8 copy_u8SevenSegPort)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <SEVENSEGMENT_voidSetNumber+0x6>
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <SEVENSEGMENT_voidSetNumber+0x8>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Number)
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	3c 83       	std	Y+4, r19	; 0x04
    23ba:	2b 83       	std	Y+3, r18	; 0x03
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	84 30       	cpi	r24, 0x04	; 4
    23c2:	91 05       	cpc	r25, r1
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <SEVENSEGMENT_voidSetNumber+0x26>
    23c6:	55 c0       	rjmp	.+170    	; 0x2472 <SEVENSEGMENT_voidSetNumber+0xd0>
    23c8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ca:	3c 81       	ldd	r19, Y+4	; 0x04
    23cc:	25 30       	cpi	r18, 0x05	; 5
    23ce:	31 05       	cpc	r19, r1
    23d0:	dc f4       	brge	.+54     	; 0x2408 <SEVENSEGMENT_voidSetNumber+0x66>
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	91 05       	cpc	r25, r1
    23da:	09 f4       	brne	.+2      	; 0x23de <SEVENSEGMENT_voidSetNumber+0x3c>
    23dc:	3b c0       	rjmp	.+118    	; 0x2454 <SEVENSEGMENT_voidSetNumber+0xb2>
    23de:	2b 81       	ldd	r18, Y+3	; 0x03
    23e0:	3c 81       	ldd	r19, Y+4	; 0x04
    23e2:	22 30       	cpi	r18, 0x02	; 2
    23e4:	31 05       	cpc	r19, r1
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <SEVENSEGMENT_voidSetNumber+0x50>
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	69 f1       	breq	.+90     	; 0x244a <SEVENSEGMENT_voidSetNumber+0xa8>
    23f0:	5d c0       	rjmp	.+186    	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>
    23f2:	2b 81       	ldd	r18, Y+3	; 0x03
    23f4:	3c 81       	ldd	r19, Y+4	; 0x04
    23f6:	22 30       	cpi	r18, 0x02	; 2
    23f8:	31 05       	cpc	r19, r1
    23fa:	89 f1       	breq	.+98     	; 0x245e <SEVENSEGMENT_voidSetNumber+0xbc>
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	83 30       	cpi	r24, 0x03	; 3
    2402:	91 05       	cpc	r25, r1
    2404:	89 f1       	breq	.+98     	; 0x2468 <SEVENSEGMENT_voidSetNumber+0xc6>
    2406:	52 c0       	rjmp	.+164    	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>
    2408:	2b 81       	ldd	r18, Y+3	; 0x03
    240a:	3c 81       	ldd	r19, Y+4	; 0x04
    240c:	27 30       	cpi	r18, 0x07	; 7
    240e:	31 05       	cpc	r19, r1
    2410:	09 f4       	brne	.+2      	; 0x2414 <SEVENSEGMENT_voidSetNumber+0x72>
    2412:	3e c0       	rjmp	.+124    	; 0x2490 <SEVENSEGMENT_voidSetNumber+0xee>
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	88 30       	cpi	r24, 0x08	; 8
    241a:	91 05       	cpc	r25, r1
    241c:	5c f4       	brge	.+22     	; 0x2434 <SEVENSEGMENT_voidSetNumber+0x92>
    241e:	2b 81       	ldd	r18, Y+3	; 0x03
    2420:	3c 81       	ldd	r19, Y+4	; 0x04
    2422:	25 30       	cpi	r18, 0x05	; 5
    2424:	31 05       	cpc	r19, r1
    2426:	51 f1       	breq	.+84     	; 0x247c <SEVENSEGMENT_voidSetNumber+0xda>
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	86 30       	cpi	r24, 0x06	; 6
    242e:	91 05       	cpc	r25, r1
    2430:	51 f1       	breq	.+84     	; 0x2486 <SEVENSEGMENT_voidSetNumber+0xe4>
    2432:	3c c0       	rjmp	.+120    	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>
    2434:	2b 81       	ldd	r18, Y+3	; 0x03
    2436:	3c 81       	ldd	r19, Y+4	; 0x04
    2438:	28 30       	cpi	r18, 0x08	; 8
    243a:	31 05       	cpc	r19, r1
    243c:	71 f1       	breq	.+92     	; 0x249a <SEVENSEGMENT_voidSetNumber+0xf8>
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	89 30       	cpi	r24, 0x09	; 9
    2444:	91 05       	cpc	r25, r1
    2446:	71 f1       	breq	.+92     	; 0x24a4 <SEVENSEGMENT_voidSetNumber+0x102>
    2448:	31 c0       	rjmp	.+98     	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>
	{
		case 0:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b00111111);
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	6f e3       	ldi	r22, 0x3F	; 63
    244e:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    2452:	2c c0       	rjmp	.+88     	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>

		break;

		case 1:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b00000110);
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	66 e0       	ldi	r22, 0x06	; 6
    2458:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    245c:	27 c0       	rjmp	.+78     	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>

		break;

		case 2:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01011011);
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	6b e5       	ldi	r22, 0x5B	; 91
    2462:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    2466:	22 c0       	rjmp	.+68     	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>

		break;

		case 3:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01001111);
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	6f e4       	ldi	r22, 0x4F	; 79
    246c:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    2470:	1d c0       	rjmp	.+58     	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>

		break;

		case 4:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01100110);
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	66 e6       	ldi	r22, 0x66	; 102
    2476:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    247a:	18 c0       	rjmp	.+48     	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>

		break;

		case 5:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01101101);
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	6d e6       	ldi	r22, 0x6D	; 109
    2480:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    2484:	13 c0       	rjmp	.+38     	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>

		break;

		case 6:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01111101);
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	6d e7       	ldi	r22, 0x7D	; 125
    248a:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    248e:	0e c0       	rjmp	.+28     	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>

		break;

		case 7:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b00000111);
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	67 e0       	ldi	r22, 0x07	; 7
    2494:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    2498:	09 c0       	rjmp	.+18     	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>

		break;

		case 8:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01111111);
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	6f e7       	ldi	r22, 0x7F	; 127
    249e:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <SEVENSEGMENT_voidSetNumber+0x10a>

		break;

		case 9:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01101111);
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	6f e6       	ldi	r22, 0x6F	; 111
    24a8:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>

		break;
	}
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <Timer1_voidInit>:
#include"TIMER_INT.h"
#include"DIO_INT.h"


void Timer1_voidInit(void)
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
	// set on top clear on compare
	set_bit(TCCR1A , TCCR1A_COM1A1);
    24c2:	af e4       	ldi	r26, 0x4F	; 79
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	ef e4       	ldi	r30, 0x4F	; 79
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	80 68       	ori	r24, 0x80	; 128
    24ce:	8c 93       	st	X, r24
	clr_bit(TCCR1A , TCCR1A_COM1A0);
    24d0:	af e4       	ldi	r26, 0x4F	; 79
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	ef e4       	ldi	r30, 0x4F	; 79
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	8f 7b       	andi	r24, 0xBF	; 191
    24dc:	8c 93       	st	X, r24

	// set wave form to 14: fast PWM
	set_bit(TCCR1A , TCCR1A_WGM11);
    24de:	af e4       	ldi	r26, 0x4F	; 79
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	ef e4       	ldi	r30, 0x4F	; 79
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	82 60       	ori	r24, 0x02	; 2
    24ea:	8c 93       	st	X, r24
	clr_bit(TCCR1A , TCCR1A_WGM10);
    24ec:	af e4       	ldi	r26, 0x4F	; 79
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	ef e4       	ldi	r30, 0x4F	; 79
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	8e 7f       	andi	r24, 0xFE	; 254
    24f8:	8c 93       	st	X, r24

	set_bit(TCCR1B  , TCCR1B_WGM12);
    24fa:	ae e4       	ldi	r26, 0x4E	; 78
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	ee e4       	ldi	r30, 0x4E	; 78
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	88 60       	ori	r24, 0x08	; 8
    2506:	8c 93       	st	X, r24
	set_bit(TCCR1B  , TCCR1B_WGM13);
    2508:	ae e4       	ldi	r26, 0x4E	; 78
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ee e4       	ldi	r30, 0x4E	; 78
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	80 61       	ori	r24, 0x10	; 16
    2514:	8c 93       	st	X, r24

	// preload  period time = 20ms
	ICR1L = 1000;
    2516:	e6 e4       	ldi	r30, 0x46	; 70
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	88 ee       	ldi	r24, 0xE8	; 232
    251c:	93 e0       	ldi	r25, 0x03	; 3
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	80 83       	st	Z, r24

	//ON TIME = 750US
	OCR1AL = 750;
    2522:	ea e4       	ldi	r30, 0x4A	; 74
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	8e ee       	ldi	r24, 0xEE	; 238
    2528:	92 e0       	ldi	r25, 0x02	; 2
    252a:	91 83       	std	Z+1, r25	; 0x01
    252c:	80 83       	st	Z, r24

	// PRESCALER divided by 8
	clr_bit(TCCR1B  , TCCR1B_CS10);
    252e:	ae e4       	ldi	r26, 0x4E	; 78
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	ee e4       	ldi	r30, 0x4E	; 78
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	8e 7f       	andi	r24, 0xFE	; 254
    253a:	8c 93       	st	X, r24
	set_bit(TCCR1B  , TCCR1B_CS11);
    253c:	ae e4       	ldi	r26, 0x4E	; 78
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	ee e4       	ldi	r30, 0x4E	; 78
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	82 60       	ori	r24, 0x02	; 2
    2548:	8c 93       	st	X, r24
	clr_bit(TCCR1B  , TCCR1B_CS12);
    254a:	ae e4       	ldi	r26, 0x4E	; 78
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	ee e4       	ldi	r30, 0x4E	; 78
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	8b 7f       	andi	r24, 0xFB	; 251
    2556:	8c 93       	st	X, r24
}
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <Timer1_voidInitnormal>:

void Timer1_voidInitnormal(void)
{
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
	// set NORMAL MODE
	clr_bit(TCCR1A , TCCR1A_WGM11);
    2566:	af e4       	ldi	r26, 0x4F	; 79
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	ef e4       	ldi	r30, 0x4F	; 79
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	8d 7f       	andi	r24, 0xFD	; 253
    2572:	8c 93       	st	X, r24
	clr_bit(TCCR1A , TCCR1A_WGM10);
    2574:	af e4       	ldi	r26, 0x4F	; 79
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	ef e4       	ldi	r30, 0x4F	; 79
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	8e 7f       	andi	r24, 0xFE	; 254
    2580:	8c 93       	st	X, r24
	clr_bit(TCCR1B , TCCR1B_WGM12);
    2582:	ae e4       	ldi	r26, 0x4E	; 78
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	ee e4       	ldi	r30, 0x4E	; 78
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	87 7f       	andi	r24, 0xF7	; 247
    258e:	8c 93       	st	X, r24
	clr_bit(TCCR1B , TCCR1B_WGM13);
    2590:	ae e4       	ldi	r26, 0x4E	; 78
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	ee e4       	ldi	r30, 0x4E	; 78
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	8f 7e       	andi	r24, 0xEF	; 239
    259c:	8c 93       	st	X, r24

	//preload value setting
	TCNT1L = 0;
    259e:	ec e4       	ldi	r30, 0x4C	; 76
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	11 82       	std	Z+1, r1	; 0x01
    25a4:	10 82       	st	Z, r1

	set_bit(TIMSK , TIMSK_TOIE1);
    25a6:	a9 e5       	ldi	r26, 0x59	; 89
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	e9 e5       	ldi	r30, 0x59	; 89
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	84 60       	ori	r24, 0x04	; 4
    25b2:	8c 93       	st	X, r24

	// PRESCALER divided by 8
	clr_bit(TCCR1B  , TCCR1B_CS10);
    25b4:	ae e4       	ldi	r26, 0x4E	; 78
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	ee e4       	ldi	r30, 0x4E	; 78
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	8e 7f       	andi	r24, 0xFE	; 254
    25c0:	8c 93       	st	X, r24
	clr_bit(TCCR1B  , TCCR1B_CS11);
    25c2:	ae e4       	ldi	r26, 0x4E	; 78
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	ee e4       	ldi	r30, 0x4E	; 78
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	8d 7f       	andi	r24, 0xFD	; 253
    25ce:	8c 93       	st	X, r24
	set_bit(TCCR1B  , TCCR1B_CS12);
    25d0:	ae e4       	ldi	r26, 0x4E	; 78
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	ee e4       	ldi	r30, 0x4E	; 78
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	84 60       	ori	r24, 0x04	; 4
    25dc:	8c 93       	st	X, r24
}
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <TIMER1_ICR_voidInit>:

void TIMER1_ICR_voidInit(void)
{
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
	// SET EDGE SELECTION ON falling edge
	clr_bit(TCCR1B  , TCCR1B_ICES1);
    25ec:	ae e4       	ldi	r26, 0x4E	; 78
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	ee e4       	ldi	r30, 0x4E	; 78
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	8f 7b       	andi	r24, 0xBF	; 191
    25f8:	8c 93       	st	X, r24

	// enable ICU interrupt
	set_bit(TIMSK  , TIMSK_TICIE1);
    25fa:	a9 e5       	ldi	r26, 0x59	; 89
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e9 e5       	ldi	r30, 0x59	; 89
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	80 62       	ori	r24, 0x20	; 32
    2606:	8c 93       	st	X, r24
}
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <Timer0_voidINit>:
#include"DIO_INT.h"

/*-------- initialization of timer 0 over flow mode --------------*/

void Timer0_voidINit(void)
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	// set normal mode
	clr_bit(TCCR0 , TCCR0_WGM00);
    2616:	a3 e5       	ldi	r26, 0x53	; 83
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e3 e5       	ldi	r30, 0x53	; 83
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	8f 7b       	andi	r24, 0xBF	; 191
    2622:	8c 93       	st	X, r24
	clr_bit(TCCR0 , TCCR0_WGM01);
    2624:	a3 e5       	ldi	r26, 0x53	; 83
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e3 e5       	ldi	r30, 0x53	; 83
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	87 7f       	andi	r24, 0xF7	; 247
    2630:	8c 93       	st	X, r24

	//preload value setting
	TCNT0 = 123 ;
    2632:	e2 e5       	ldi	r30, 0x52	; 82
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	8b e7       	ldi	r24, 0x7B	; 123
    2638:	80 83       	st	Z, r24

	// over flow interrupt enable
	set_bit(TIMSK , TIMSK_TOIE0);
    263a:	a9 e5       	ldi	r26, 0x59	; 89
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e9 e5       	ldi	r30, 0x59	; 89
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	81 60       	ori	r24, 0x01	; 1
    2646:	8c 93       	st	X, r24

	// set preScaler
	set_bit(TCCR0 , TCCR0_CS00);
    2648:	a3 e5       	ldi	r26, 0x53	; 83
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e3 e5       	ldi	r30, 0x53	; 83
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	81 60       	ori	r24, 0x01	; 1
    2654:	8c 93       	st	X, r24
	clr_bit(TCCR0 , TCCR0_CS01);
    2656:	a3 e5       	ldi	r26, 0x53	; 83
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e3 e5       	ldi	r30, 0x53	; 83
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	8d 7f       	andi	r24, 0xFD	; 253
    2662:	8c 93       	st	X, r24
	set_bit(TCCR0 , TCCR0_CS02);
    2664:	a3 e5       	ldi	r26, 0x53	; 83
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e3 e5       	ldi	r30, 0x53	; 83
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	84 60       	ori	r24, 0x04	; 4
    2670:	8c 93       	st	X, r24
}
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	08 95       	ret

00002678 <Timer0_voidClockINit>:

/*-------------- initialization of timer 0 external clock source on T0 -----------------*/
void Timer0_voidClockINit(void)
{
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
	// set normal mode
	clr_bit(TCCR0 , TCCR0_WGM00);
    2680:	a3 e5       	ldi	r26, 0x53	; 83
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e3 e5       	ldi	r30, 0x53	; 83
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	8f 7b       	andi	r24, 0xBF	; 191
    268c:	8c 93       	st	X, r24
	clr_bit(TCCR0 , TCCR0_WGM01);
    268e:	a3 e5       	ldi	r26, 0x53	; 83
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e3 e5       	ldi	r30, 0x53	; 83
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	87 7f       	andi	r24, 0xF7	; 247
    269a:	8c 93       	st	X, r24

	//preload value setting
	TCNT0 = 0 ;
    269c:	e2 e5       	ldi	r30, 0x52	; 82
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	10 82       	st	Z, r1

	// over flow interrupt enable
	set_bit(TIMSK , TIMSK_TOIE0);
    26a2:	a9 e5       	ldi	r26, 0x59	; 89
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e9 e5       	ldi	r30, 0x59	; 89
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	81 60       	ori	r24, 0x01	; 1
    26ae:	8c 93       	st	X, r24

	// set preScaler
	clr_bit(TCCR0 , TCCR0_CS00);
    26b0:	a3 e5       	ldi	r26, 0x53	; 83
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e3 e5       	ldi	r30, 0x53	; 83
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	8e 7f       	andi	r24, 0xFE	; 254
    26bc:	8c 93       	st	X, r24
	set_bit(TCCR0 , TCCR0_CS01);
    26be:	a3 e5       	ldi	r26, 0x53	; 83
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e3 e5       	ldi	r30, 0x53	; 83
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	82 60       	ori	r24, 0x02	; 2
    26ca:	8c 93       	st	X, r24
	set_bit(TCCR0 , TCCR0_CS02);
    26cc:	a3 e5       	ldi	r26, 0x53	; 83
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e3 e5       	ldi	r30, 0x53	; 83
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	84 60       	ori	r24, 0x04	; 4
    26d8:	8c 93       	st	X, r24
}
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <Timer0_voidINitCTC>:

/*----------------- initialization of timer 0 CTC mode toggle pin oc0 ------------- */
void Timer0_voidINitCTC(void)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
	// set normal mode
	clr_bit(TCCR0 , TCCR0_WGM00);
    26e8:	a3 e5       	ldi	r26, 0x53	; 83
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e3 e5       	ldi	r30, 0x53	; 83
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	8f 7b       	andi	r24, 0xBF	; 191
    26f4:	8c 93       	st	X, r24
	set_bit(TCCR0 , TCCR0_WGM01);
    26f6:	a3 e5       	ldi	r26, 0x53	; 83
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	e3 e5       	ldi	r30, 0x53	; 83
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	88 60       	ori	r24, 0x08	; 8
    2702:	8c 93       	st	X, r24

	//preload value setting
	OCR0 = 250 ;
    2704:	ec e5       	ldi	r30, 0x5C	; 92
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	8a ef       	ldi	r24, 0xFA	; 250
    270a:	80 83       	st	Z, r24

	// com0 fast mode
	clr_bit(TCCR0 , TCCR0_COM00);
    270c:	a3 e5       	ldi	r26, 0x53	; 83
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e3 e5       	ldi	r30, 0x53	; 83
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	8f 7e       	andi	r24, 0xEF	; 239
    2718:	8c 93       	st	X, r24
	set_bit(TCCR0 , TCCR0_COM01);
    271a:	a3 e5       	ldi	r26, 0x53	; 83
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e3 e5       	ldi	r30, 0x53	; 83
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	80 62       	ori	r24, 0x20	; 32
    2726:	8c 93       	st	X, r24

	// over flow interrupt enable
	set_bit(TIMSK , TIMSK_OCIE0);
    2728:	a9 e5       	ldi	r26, 0x59	; 89
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e9 e5       	ldi	r30, 0x59	; 89
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	82 60       	ori	r24, 0x02	; 2
    2734:	8c 93       	st	X, r24

	// set preScaler
	clr_bit(TCCR0 , TCCR0_CS00);
    2736:	a3 e5       	ldi	r26, 0x53	; 83
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e3 e5       	ldi	r30, 0x53	; 83
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8e 7f       	andi	r24, 0xFE	; 254
    2742:	8c 93       	st	X, r24
	set_bit(TCCR0 , TCCR0_CS01);
    2744:	a3 e5       	ldi	r26, 0x53	; 83
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e3 e5       	ldi	r30, 0x53	; 83
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	82 60       	ori	r24, 0x02	; 2
    2750:	8c 93       	st	X, r24
	clr_bit(TCCR0 , TCCR0_CS02);
    2752:	a3 e5       	ldi	r26, 0x53	; 83
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e3 e5       	ldi	r30, 0x53	; 83
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	8b 7f       	andi	r24, 0xFB	; 251
    275e:	8c 93       	st	X, r24
}
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <Timer0_voidINitPWM>:

/////////////////////////////////////////////


void Timer0_voidINitPWM(void)
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
	// set fast PWM mode
	set_bit(TCCR0 , TCCR0_WGM00);
    276e:	a3 e5       	ldi	r26, 0x53	; 83
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e3 e5       	ldi	r30, 0x53	; 83
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	80 64       	ori	r24, 0x40	; 64
    277a:	8c 93       	st	X, r24
	set_bit(TCCR0 , TCCR0_WGM01);
    277c:	a3 e5       	ldi	r26, 0x53	; 83
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e3 e5       	ldi	r30, 0x53	; 83
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	88 60       	ori	r24, 0x08	; 8
    2788:	8c 93       	st	X, r24

	//preload value setting
	//TCNT0 = 0 ;
	OCR0 = 32 ;
    278a:	ec e5       	ldi	r30, 0x5C	; 92
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 e2       	ldi	r24, 0x20	; 32
    2790:	80 83       	st	Z, r24

	// com0 fast mode
	clr_bit(TCCR0 , TCCR0_COM00);
    2792:	a3 e5       	ldi	r26, 0x53	; 83
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e3 e5       	ldi	r30, 0x53	; 83
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	8f 7e       	andi	r24, 0xEF	; 239
    279e:	8c 93       	st	X, r24
	set_bit(TCCR0 , TCCR0_COM01);
    27a0:	a3 e5       	ldi	r26, 0x53	; 83
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e3 e5       	ldi	r30, 0x53	; 83
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	80 62       	ori	r24, 0x20	; 32
    27ac:	8c 93       	st	X, r24

	// over flow interrupt enable

	// set preScaler
	clr_bit(TCCR0 , TCCR0_CS00);
    27ae:	a3 e5       	ldi	r26, 0x53	; 83
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e3 e5       	ldi	r30, 0x53	; 83
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	8e 7f       	andi	r24, 0xFE	; 254
    27ba:	8c 93       	st	X, r24
	set_bit(TCCR0 , TCCR0_CS01);
    27bc:	a3 e5       	ldi	r26, 0x53	; 83
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e3 e5       	ldi	r30, 0x53	; 83
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	82 60       	ori	r24, 0x02	; 2
    27c8:	8c 93       	st	X, r24
	clr_bit(TCCR0 , TCCR0_CS02);
    27ca:	a3 e5       	ldi	r26, 0x53	; 83
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e3 e5       	ldi	r30, 0x53	; 83
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	8b 7f       	andi	r24, 0xFB	; 251
    27d6:	8c 93       	st	X, r24
}
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <EXTI_Timer0SetCallBack>:



void EXTI_Timer0SetCallBack(void (* TIMER0_ISR)(void))
{
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <EXTI_Timer0SetCallBack+0x6>
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack = TIMER0_ISR ;
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	9a 81       	ldd	r25, Y+2	; 0x02
    27f0:	90 93 e8 02 	sts	0x02E8, r25
    27f4:	80 93 e7 02 	sts	0x02E7, r24

}
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <__vector_10>:

void __vector_10(void)
{
    2802:	1f 92       	push	r1
    2804:	0f 92       	push	r0
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	0f 92       	push	r0
    280a:	11 24       	eor	r1, r1
    280c:	2f 93       	push	r18
    280e:	3f 93       	push	r19
    2810:	4f 93       	push	r20
    2812:	5f 93       	push	r21
    2814:	6f 93       	push	r22
    2816:	7f 93       	push	r23
    2818:	8f 93       	push	r24
    281a:	9f 93       	push	r25
    281c:	af 93       	push	r26
    281e:	bf 93       	push	r27
    2820:	ef 93       	push	r30
    2822:	ff 93       	push	r31
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack() ;
    282c:	e0 91 e7 02 	lds	r30, 0x02E7
    2830:	f0 91 e8 02 	lds	r31, 0x02E8
    2834:	09 95       	icall
}
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	ff 91       	pop	r31
    283c:	ef 91       	pop	r30
    283e:	bf 91       	pop	r27
    2840:	af 91       	pop	r26
    2842:	9f 91       	pop	r25
    2844:	8f 91       	pop	r24
    2846:	7f 91       	pop	r23
    2848:	6f 91       	pop	r22
    284a:	5f 91       	pop	r21
    284c:	4f 91       	pop	r20
    284e:	3f 91       	pop	r19
    2850:	2f 91       	pop	r18
    2852:	0f 90       	pop	r0
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	0f 90       	pop	r0
    2858:	1f 90       	pop	r1
    285a:	18 95       	reti

0000285c <ledBlink_normalMode>:
	}

}*/

void ledBlink_normalMode(void)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
	static volatile u8 counter = 0;
	counter++ ;
    2864:	80 91 db 02 	lds	r24, 0x02DB
    2868:	8f 5f       	subi	r24, 0xFF	; 255
    286a:	80 93 db 02 	sts	0x02DB, r24
	static u8 flag = 0;

	if(counter == 31)
    286e:	80 91 db 02 	lds	r24, 0x02DB
    2872:	8f 31       	cpi	r24, 0x1F	; 31
    2874:	f1 f4       	brne	.+60     	; 0x28b2 <ledBlink_normalMode+0x56>
	{
		TCNT0 = 123 ;
    2876:	e2 e5       	ldi	r30, 0x52	; 82
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	8b e7       	ldi	r24, 0x7B	; 123
    287c:	80 83       	st	Z, r24
		// BLINK
		if(flag == 0)
    287e:	80 91 da 02 	lds	r24, 0x02DA
    2882:	88 23       	and	r24, r24
    2884:	49 f4       	brne	.+18     	; 0x2898 <ledBlink_normalMode+0x3c>
		{
			DIO_SetPinValue(LED_PORT,LED_PIN ,HIGH);
    2886:	82 e0       	ldi	r24, 0x02	; 2
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	41 e0       	ldi	r20, 0x01	; 1
    288c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
			flag = 1;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	80 93 da 02 	sts	0x02DA, r24
    2896:	0b c0       	rjmp	.+22     	; 0x28ae <ledBlink_normalMode+0x52>
		}

		else if(flag == 1)
    2898:	80 91 da 02 	lds	r24, 0x02DA
    289c:	81 30       	cpi	r24, 0x01	; 1
    289e:	39 f4       	brne	.+14     	; 0x28ae <ledBlink_normalMode+0x52>
		{
			DIO_SetPinValue(LED_PORT,LED_PIN ,LOW);
    28a0:	82 e0       	ldi	r24, 0x02	; 2
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	40 e0       	ldi	r20, 0x00	; 0
    28a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
			flag = 0;
    28aa:	10 92 da 02 	sts	0x02DA, r1
		}

		counter = 0;
    28ae:	10 92 db 02 	sts	0x02DB, r1
	}
}
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <CTC>:

void CTC(void)
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
	static volatile u8 counter = 0;
	counter ++ ;
    28c0:	80 91 dc 02 	lds	r24, 0x02DC
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	80 93 dc 02 	sts	0x02DC, r24
	if(counter == 4)
    28ca:	80 91 dc 02 	lds	r24, 0x02DC
    28ce:	84 30       	cpi	r24, 0x04	; 4
    28d0:	31 f4       	brne	.+12     	; 0x28de <CTC+0x26>
	{
		DIO_SetPinValue(PORTA , PIN0 ,LOW);
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	60 e0       	ldi	r22, 0x00	; 0
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    28dc:	0b c0       	rjmp	.+22     	; 0x28f4 <CTC+0x3c>
	}

	else if(counter == 80)
    28de:	80 91 dc 02 	lds	r24, 0x02DC
    28e2:	80 35       	cpi	r24, 0x50	; 80
    28e4:	39 f4       	brne	.+14     	; 0x28f4 <CTC+0x3c>
	{
		DIO_SetPinValue(PORTA , PIN0 ,HIGH);
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
		counter = 0 ;
    28f0:	10 92 dc 02 	sts	0x02DC, r1
	}
}
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <ledBlink_CTCMode>:

void ledBlink_CTCMode(void)
{
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	0f 92       	push	r0
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
	static volatile u8 counter1 = 0;
	counter1++ ;
    2904:	80 91 de 02 	lds	r24, 0x02DE
    2908:	8f 5f       	subi	r24, 0xFF	; 255
    290a:	80 93 de 02 	sts	0x02DE, r24
	static u8 flag1 = 0;

	if(counter1 == 4000)
    290e:	80 91 de 02 	lds	r24, 0x02DE
			flag1 = 0;
		}

		counter1 = 0;
	}
}
    2912:	0f 90       	pop	r0
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <__vector_11>:

void __vector_11(void)
{
    291a:	1f 92       	push	r1
    291c:	0f 92       	push	r0
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	0f 92       	push	r0
    2922:	11 24       	eor	r1, r1
    2924:	2f 93       	push	r18
    2926:	3f 93       	push	r19
    2928:	4f 93       	push	r20
    292a:	5f 93       	push	r21
    292c:	6f 93       	push	r22
    292e:	7f 93       	push	r23
    2930:	8f 93       	push	r24
    2932:	9f 93       	push	r25
    2934:	af 93       	push	r26
    2936:	bf 93       	push	r27
    2938:	ef 93       	push	r30
    293a:	ff 93       	push	r31
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
	static volatile u8 counter_7 = 0;
	counter_7++ ;
    2944:	80 91 e2 02 	lds	r24, 0x02E2
    2948:	8f 5f       	subi	r24, 0xFF	; 255
    294a:	80 93 e2 02 	sts	0x02E2, r24
	static u8 flag_72 = 0;

	static u8 flag = 0;


	if(flag == 0)
    294e:	80 91 df 02 	lds	r24, 0x02DF
    2952:	88 23       	and	r24, r24
    2954:	99 f4       	brne	.+38     	; 0x297c <__vector_11+0x62>
	{
		DIO_SetPinValue(PORTB,PIN6 ,HIGH);
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	66 e0       	ldi	r22, 0x06	; 6
    295a:	41 e0       	ldi	r20, 0x01	; 1
    295c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
		DIO_SetPinValue(PORTB,PIN7 ,LOW);
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	67 e0       	ldi	r22, 0x07	; 7
    2964:	40 e0       	ldi	r20, 0x00	; 0
    2966:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

		SEVENSEGMENT_voidSetNumber(flag_71 , PORTA);
    296a:	80 91 e1 02 	lds	r24, 0x02E1
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <SEVENSEGMENT_voidSetNumber>
		flag = 1;
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	80 93 df 02 	sts	0x02DF, r24
    297a:	15 c0       	rjmp	.+42     	; 0x29a6 <__vector_11+0x8c>
	}

	else if(flag == 1)
    297c:	80 91 df 02 	lds	r24, 0x02DF
    2980:	81 30       	cpi	r24, 0x01	; 1
    2982:	89 f4       	brne	.+34     	; 0x29a6 <__vector_11+0x8c>
	{
		DIO_SetPinValue(PORTB,PIN7 ,HIGH);
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	67 e0       	ldi	r22, 0x07	; 7
    2988:	41 e0       	ldi	r20, 0x01	; 1
    298a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
		DIO_SetPinValue(PORTB,PIN6 ,LOW);
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	66 e0       	ldi	r22, 0x06	; 6
    2992:	40 e0       	ldi	r20, 0x00	; 0
    2994:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

		SEVENSEGMENT_voidSetNumber(flag_72 , PORTA);
    2998:	80 91 e0 02 	lds	r24, 0x02E0
    299c:	60 e0       	ldi	r22, 0x00	; 0
    299e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <SEVENSEGMENT_voidSetNumber>
		flag = 0;
    29a2:	10 92 df 02 	sts	0x02DF, r1
	}

	if(counter_7 == 31)
    29a6:	80 91 e2 02 	lds	r24, 0x02E2
    29aa:	8f 31       	cpi	r24, 0x1F	; 31
    29ac:	e1 f4       	brne	.+56     	; 0x29e6 <__vector_11+0xcc>
	{
		TCNT0 = 123 ;
    29ae:	e2 e5       	ldi	r30, 0x52	; 82
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	8b e7       	ldi	r24, 0x7B	; 123
    29b4:	80 83       	st	Z, r24
		//
		flag_71 += 1;
    29b6:	80 91 e1 02 	lds	r24, 0x02E1
    29ba:	8f 5f       	subi	r24, 0xFF	; 255
    29bc:	80 93 e1 02 	sts	0x02E1, r24

		if(flag_71 == 10 )
    29c0:	80 91 e1 02 	lds	r24, 0x02E1
    29c4:	8a 30       	cpi	r24, 0x0A	; 10
    29c6:	39 f4       	brne	.+14     	; 0x29d6 <__vector_11+0xbc>
		{
			flag_72 += 1;
    29c8:	80 91 e0 02 	lds	r24, 0x02E0
    29cc:	8f 5f       	subi	r24, 0xFF	; 255
    29ce:	80 93 e0 02 	sts	0x02E0, r24
			flag_71 = 0;
    29d2:	10 92 e1 02 	sts	0x02E1, r1
		}
		if(flag_72 == 10 )
    29d6:	80 91 e0 02 	lds	r24, 0x02E0
    29da:	8a 30       	cpi	r24, 0x0A	; 10
    29dc:	11 f4       	brne	.+4      	; 0x29e2 <__vector_11+0xc8>
		{
			flag_72 =0 ;
    29de:	10 92 e0 02 	sts	0x02E0, r1
		}

		counter_7 = 0;
    29e2:	10 92 e2 02 	sts	0x02E2, r1
	}
}
    29e6:	cf 91       	pop	r28
    29e8:	df 91       	pop	r29
    29ea:	ff 91       	pop	r31
    29ec:	ef 91       	pop	r30
    29ee:	bf 91       	pop	r27
    29f0:	af 91       	pop	r26
    29f2:	9f 91       	pop	r25
    29f4:	8f 91       	pop	r24
    29f6:	7f 91       	pop	r23
    29f8:	6f 91       	pop	r22
    29fa:	5f 91       	pop	r21
    29fc:	4f 91       	pop	r20
    29fe:	3f 91       	pop	r19
    2a00:	2f 91       	pop	r18
    2a02:	0f 90       	pop	r0
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	0f 90       	pop	r0
    2a08:	1f 90       	pop	r1
    2a0a:	18 95       	reti

00002a0c <__vector_1>:

void __vector_1(void)
{
    2a0c:	1f 92       	push	r1
    2a0e:	0f 92       	push	r0
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	0f 92       	push	r0
    2a14:	11 24       	eor	r1, r1
    2a16:	2f 93       	push	r18
    2a18:	3f 93       	push	r19
    2a1a:	4f 93       	push	r20
    2a1c:	5f 93       	push	r21
    2a1e:	6f 93       	push	r22
    2a20:	7f 93       	push	r23
    2a22:	8f 93       	push	r24
    2a24:	9f 93       	push	r25
    2a26:	af 93       	push	r26
    2a28:	bf 93       	push	r27
    2a2a:	ef 93       	push	r30
    2a2c:	ff 93       	push	r31
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	0f 92       	push	r0
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
	static u8 counter = 0;
	u8 Temp ;
	counter++;
    2a38:	80 91 e3 02 	lds	r24, 0x02E3
    2a3c:	8f 5f       	subi	r24, 0xFF	; 255
    2a3e:	80 93 e3 02 	sts	0x02E3, r24
	if(counter == 2)
    2a42:	80 91 e3 02 	lds	r24, 0x02E3
    2a46:	82 30       	cpi	r24, 0x02	; 2
    2a48:	29 f4       	brne	.+10     	; 0x2a54 <__vector_1+0x48>
	{
		TCNT1L = 0;
    2a4a:	ec e4       	ldi	r30, 0x4C	; 76
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	11 82       	std	Z+1, r1	; 0x01
    2a50:	10 82       	st	Z, r1
    2a52:	23 c0       	rjmp	.+70     	; 0x2a9a <__vector_1+0x8e>
	}

	else if(counter == 3)
    2a54:	80 91 e3 02 	lds	r24, 0x02E3
    2a58:	83 30       	cpi	r24, 0x03	; 3
    2a5a:	59 f4       	brne	.+22     	; 0x2a72 <__vector_1+0x66>
	{
		periodTime = TCNT1L ;
    2a5c:	ec e4       	ldi	r30, 0x4C	; 76
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	90 93 d1 02 	sts	0x02D1, r25
    2a68:	80 93 d0 02 	sts	0x02D0, r24
		EXIT_voidInt00Init();
    2a6c:	0e 94 0e 09 	call	0x121c	; 0x121c <EXIT_voidInt00Init>
    2a70:	14 c0       	rjmp	.+40     	; 0x2a9a <__vector_1+0x8e>
	}

	else if (counter ==4)
    2a72:	80 91 e3 02 	lds	r24, 0x02E3
    2a76:	84 30       	cpi	r24, 0x04	; 4
    2a78:	81 f4       	brne	.+32     	; 0x2a9a <__vector_1+0x8e>
	{
		offTime = TCNT1L - periodTime ;
    2a7a:	ec e4       	ldi	r30, 0x4C	; 76
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	20 81       	ld	r18, Z
    2a80:	31 81       	ldd	r19, Z+1	; 0x01
    2a82:	80 91 d0 02 	lds	r24, 0x02D0
    2a86:	90 91 d1 02 	lds	r25, 0x02D1
    2a8a:	a9 01       	movw	r20, r18
    2a8c:	48 1b       	sub	r20, r24
    2a8e:	59 0b       	sbc	r21, r25
    2a90:	ca 01       	movw	r24, r20
    2a92:	90 93 d3 02 	sts	0x02D3, r25
    2a96:	80 93 d2 02 	sts	0x02D2, r24
	}
}
    2a9a:	0f 90       	pop	r0
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	ff 91       	pop	r31
    2aa2:	ef 91       	pop	r30
    2aa4:	bf 91       	pop	r27
    2aa6:	af 91       	pop	r26
    2aa8:	9f 91       	pop	r25
    2aaa:	8f 91       	pop	r24
    2aac:	7f 91       	pop	r23
    2aae:	6f 91       	pop	r22
    2ab0:	5f 91       	pop	r21
    2ab2:	4f 91       	pop	r20
    2ab4:	3f 91       	pop	r19
    2ab6:	2f 91       	pop	r18
    2ab8:	0f 90       	pop	r0
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	0f 90       	pop	r0
    2abe:	1f 90       	pop	r1
    2ac0:	18 95       	reti

00002ac2 <__vector_6>:

void __vector_6(void)
{
    2ac2:	1f 92       	push	r1
    2ac4:	0f 92       	push	r0
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	0f 92       	push	r0
    2aca:	11 24       	eor	r1, r1
    2acc:	2f 93       	push	r18
    2ace:	3f 93       	push	r19
    2ad0:	8f 93       	push	r24
    2ad2:	9f 93       	push	r25
    2ad4:	af 93       	push	r26
    2ad6:	bf 93       	push	r27
    2ad8:	ef 93       	push	r30
    2ada:	ff 93       	push	r31
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	00 d0       	rcall	.+0      	; 0x2ae2 <__vector_6+0x20>
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
	static u8 counter4 = 0 ;
	counter4 ++;
    2ae6:	80 91 e4 02 	lds	r24, 0x02E4
    2aea:	8f 5f       	subi	r24, 0xFF	; 255
    2aec:	80 93 e4 02 	sts	0x02E4, r24
	u16 Temp;
	if(counter4 == 5)
    2af0:	80 91 e4 02 	lds	r24, 0x02E4
    2af4:	85 30       	cpi	r24, 0x05	; 5
    2af6:	49 f4       	brne	.+18     	; 0x2b0a <__vector_6+0x48>
	{
		ICR = ICR1L ;
    2af8:	e6 e4       	ldi	r30, 0x46	; 70
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	91 81       	ldd	r25, Z+1	; 0x01
    2b00:	90 93 d5 02 	sts	0x02D5, r25
    2b04:	80 93 d4 02 	sts	0x02D4, r24
    2b08:	2a c0       	rjmp	.+84     	; 0x2b5e <__vector_6+0x9c>
	}
	else if(counter4 == 6)
    2b0a:	80 91 e4 02 	lds	r24, 0x02E4
    2b0e:	86 30       	cpi	r24, 0x06	; 6
    2b10:	d1 f4       	brne	.+52     	; 0x2b46 <__vector_6+0x84>
	{
		Temp=ICR1L;
    2b12:	e6 e4       	ldi	r30, 0x46	; 70
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	91 81       	ldd	r25, Z+1	; 0x01
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	89 83       	std	Y+1, r24	; 0x01
		ICR_periodTime = Temp - ICR ;  //PERIOD TIME
    2b1e:	20 91 d4 02 	lds	r18, 0x02D4
    2b22:	30 91 d5 02 	lds	r19, 0x02D5
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
    2b28:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2a:	82 1b       	sub	r24, r18
    2b2c:	93 0b       	sbc	r25, r19
    2b2e:	90 93 d7 02 	sts	0x02D7, r25
    2b32:	80 93 d6 02 	sts	0x02D6, r24
		set_bit(TCCR1B  , TCCR1B_ICES1 );
    2b36:	ae e4       	ldi	r26, 0x4E	; 78
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	ee e4       	ldi	r30, 0x4E	; 78
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	80 64       	ori	r24, 0x40	; 64
    2b42:	8c 93       	st	X, r24
    2b44:	0c c0       	rjmp	.+24     	; 0x2b5e <__vector_6+0x9c>
	}

	else if(counter4 == 7)
    2b46:	80 91 e4 02 	lds	r24, 0x02E4
    2b4a:	87 30       	cpi	r24, 0x07	; 7
    2b4c:	41 f4       	brne	.+16     	; 0x2b5e <__vector_6+0x9c>
	{
		ICR_offTime = ICR1L  ;
    2b4e:	e6 e4       	ldi	r30, 0x46	; 70
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	90 93 d9 02 	sts	0x02D9, r25
    2b5a:	80 93 d8 02 	sts	0x02D8, r24

	}

}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	ff 91       	pop	r31
    2b68:	ef 91       	pop	r30
    2b6a:	bf 91       	pop	r27
    2b6c:	af 91       	pop	r26
    2b6e:	9f 91       	pop	r25
    2b70:	8f 91       	pop	r24
    2b72:	3f 91       	pop	r19
    2b74:	2f 91       	pop	r18
    2b76:	0f 90       	pop	r0
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	0f 90       	pop	r0
    2b7c:	1f 90       	pop	r1
    2b7e:	18 95       	reti

00002b80 <__udivmodhi4>:
    2b80:	aa 1b       	sub	r26, r26
    2b82:	bb 1b       	sub	r27, r27
    2b84:	51 e1       	ldi	r21, 0x11	; 17
    2b86:	07 c0       	rjmp	.+14     	; 0x2b96 <__udivmodhi4_ep>

00002b88 <__udivmodhi4_loop>:
    2b88:	aa 1f       	adc	r26, r26
    2b8a:	bb 1f       	adc	r27, r27
    2b8c:	a6 17       	cp	r26, r22
    2b8e:	b7 07       	cpc	r27, r23
    2b90:	10 f0       	brcs	.+4      	; 0x2b96 <__udivmodhi4_ep>
    2b92:	a6 1b       	sub	r26, r22
    2b94:	b7 0b       	sbc	r27, r23

00002b96 <__udivmodhi4_ep>:
    2b96:	88 1f       	adc	r24, r24
    2b98:	99 1f       	adc	r25, r25
    2b9a:	5a 95       	dec	r21
    2b9c:	a9 f7       	brne	.-22     	; 0x2b88 <__udivmodhi4_loop>
    2b9e:	80 95       	com	r24
    2ba0:	90 95       	com	r25
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	08 95       	ret

00002ba8 <__divmodhi4>:
    2ba8:	97 fb       	bst	r25, 7
    2baa:	09 2e       	mov	r0, r25
    2bac:	07 26       	eor	r0, r23
    2bae:	0a d0       	rcall	.+20     	; 0x2bc4 <__divmodhi4_neg1>
    2bb0:	77 fd       	sbrc	r23, 7
    2bb2:	04 d0       	rcall	.+8      	; 0x2bbc <__divmodhi4_neg2>
    2bb4:	e5 df       	rcall	.-54     	; 0x2b80 <__udivmodhi4>
    2bb6:	06 d0       	rcall	.+12     	; 0x2bc4 <__divmodhi4_neg1>
    2bb8:	00 20       	and	r0, r0
    2bba:	1a f4       	brpl	.+6      	; 0x2bc2 <__divmodhi4_exit>

00002bbc <__divmodhi4_neg2>:
    2bbc:	70 95       	com	r23
    2bbe:	61 95       	neg	r22
    2bc0:	7f 4f       	sbci	r23, 0xFF	; 255

00002bc2 <__divmodhi4_exit>:
    2bc2:	08 95       	ret

00002bc4 <__divmodhi4_neg1>:
    2bc4:	f6 f7       	brtc	.-4      	; 0x2bc2 <__divmodhi4_exit>
    2bc6:	90 95       	com	r25
    2bc8:	81 95       	neg	r24
    2bca:	9f 4f       	sbci	r25, 0xFF	; 255
    2bcc:	08 95       	ret

00002bce <__prologue_saves__>:
    2bce:	2f 92       	push	r2
    2bd0:	3f 92       	push	r3
    2bd2:	4f 92       	push	r4
    2bd4:	5f 92       	push	r5
    2bd6:	6f 92       	push	r6
    2bd8:	7f 92       	push	r7
    2bda:	8f 92       	push	r8
    2bdc:	9f 92       	push	r9
    2bde:	af 92       	push	r10
    2be0:	bf 92       	push	r11
    2be2:	cf 92       	push	r12
    2be4:	df 92       	push	r13
    2be6:	ef 92       	push	r14
    2be8:	ff 92       	push	r15
    2bea:	0f 93       	push	r16
    2bec:	1f 93       	push	r17
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	ca 1b       	sub	r28, r26
    2bf8:	db 0b       	sbc	r29, r27
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	09 94       	ijmp

00002c06 <__epilogue_restores__>:
    2c06:	2a 88       	ldd	r2, Y+18	; 0x12
    2c08:	39 88       	ldd	r3, Y+17	; 0x11
    2c0a:	48 88       	ldd	r4, Y+16	; 0x10
    2c0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c10:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c12:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c14:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c16:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c18:	b9 84       	ldd	r11, Y+9	; 0x09
    2c1a:	c8 84       	ldd	r12, Y+8	; 0x08
    2c1c:	df 80       	ldd	r13, Y+7	; 0x07
    2c1e:	ee 80       	ldd	r14, Y+6	; 0x06
    2c20:	fd 80       	ldd	r15, Y+5	; 0x05
    2c22:	0c 81       	ldd	r16, Y+4	; 0x04
    2c24:	1b 81       	ldd	r17, Y+3	; 0x03
    2c26:	aa 81       	ldd	r26, Y+2	; 0x02
    2c28:	b9 81       	ldd	r27, Y+1	; 0x01
    2c2a:	ce 0f       	add	r28, r30
    2c2c:	d1 1d       	adc	r29, r1
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	ed 01       	movw	r28, r26
    2c3a:	08 95       	ret

00002c3c <_exit>:
    2c3c:	f8 94       	cli

00002c3e <__stop_program>:
    2c3e:	ff cf       	rjmp	.-2      	; 0x2c3e <__stop_program>
