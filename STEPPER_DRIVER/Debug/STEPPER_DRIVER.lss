
STEPPER_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  00003b26  00003bba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080010a  0080010a  00003c64  2**0
                  ALLOC
  3 .stab         00002e20  00000000  00000000  00003c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f60  00000000  00000000  00006a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000079e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000098dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b578  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b965  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 31       	cpi	r26, 0x1D	; 29
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 37 14 	call	0x286e	; 0x286e <main>
      8a:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ee       	ldi	r26, 0xE2	; 226
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 1d 	jmp	0x3b04	; 0x3b04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 1d 	jmp	0x3b04	; 0x3b04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ee       	ldi	r24, 0xE2	; 226
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 82 1d 	jmp	0x3b04	; 0x3b04 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 82 1d 	jmp	0x3b04	; 0x3b04 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 82 1d 	jmp	0x3b04	; 0x3b04 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6a 1d 	jmp	0x3ad4	; 0x3ad4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_SetPinValue>:
#include "LIBS\MATH.h"
#include "DIO_REG.h"
#include "DIO_INT.h"

void DIO_SetPinValue (u8 DIO_PORTID , u8 DIO_PINID , u8 DIO_PinValue)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if (DIO_PinValue == HIGH)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_SetPinValue+0x22>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_SetPinValue+0x100>
	{
		switch(DIO_PORTID)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_SetPinValue+0x88>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_SetPinValue+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_SetPinValue+0x60>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_SetPinValue+0x1ee>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_SetPinValue+0xb0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_SetPinValue+0xd8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <DIO_SetPinValue+0x1ee>
		{
		case PORTA:
			set_bit(PORTA_REG , DIO_PINID);
     ba6:	ab e3       	ldi	r26, 0x3B	; 59
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	eb e3       	ldi	r30, 0x3B	; 59
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_SetPinValue+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_SetPinValue+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTB:
			set_bit(PORTB_REG , DIO_PINID) ;
     bce:	a8 e3       	ldi	r26, 0x38	; 56
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e8 e3       	ldi	r30, 0x38	; 56
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_SetPinValue+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_SetPinValue+0xa2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTC:
			set_bit(PORTC_REG , DIO_PINID) ;
     bf6:	a5 e3       	ldi	r26, 0x35	; 53
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e3       	ldi	r30, 0x35	; 53
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_SetPinValue+0xce>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_SetPinValue+0xca>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTD:
			set_bit(PORTD_REG , DIO_PINID) ;
     c1e:	a2 e3       	ldi	r26, 0x32	; 50
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e2 e3       	ldi	r30, 0x32	; 50
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_SetPinValue+0xf6>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_SetPinValue+0xf2>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_SetPinValue+0x1ee>

		}

	}

	else if (DIO_PinValue == LOW)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_SetPinValue+0x108>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <DIO_SetPinValue+0x1ee>
	{
		switch(DIO_PORTID)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_SetPinValue+0x172>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_SetPinValue+0x130>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_SetPinValue+0x148>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <DIO_SetPinValue+0x1ee>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_SetPinValue+0x19c>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_SetPinValue+0x146>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_SetPinValue+0x1c6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <DIO_SetPinValue+0x1ee>
		{
		case PORTA:
			clr_bit(PORTA_REG , DIO_PINID) ;
     c8e:	ab e3       	ldi	r26, 0x3B	; 59
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	eb e3       	ldi	r30, 0x3B	; 59
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_SetPinValue+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_SetPinValue+0x162>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTB:
			clr_bit(PORTB_REG , DIO_PINID) ;
     cb8:	a8 e3       	ldi	r26, 0x38	; 56
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_SetPinValue+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_SetPinValue+0x18c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTC:
			clr_bit(PORTC_REG , DIO_PINID) ;
     ce2:	a5 e3       	ldi	r26, 0x35	; 53
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e3       	ldi	r30, 0x35	; 53
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_SetPinValue+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_SetPinValue+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <DIO_SetPinValue+0x1ee>
		break;

		case PORTD:
			clr_bit(PORTD_REG , DIO_PINID) ;
     d0c:	a2 e3       	ldi	r26, 0x32	; 50
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e2 e3       	ldi	r30, 0x32	; 50
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_SetPinValue+0x1e4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_SetPinValue+0x1e0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
		break;

			}

		}
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 DIO_DDRID , u8 DIO_PINID, u8 DIO_PINIO)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if (DIO_PINIO == OUTPUT)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <DIO_SetPinDirection+0x22>
     d66:	6f c0       	rjmp	.+222    	; 0xe46 <DIO_SetPinDirection+0x100>
	{
		switch(DIO_DDRID)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	85 30       	cpi	r24, 0x05	; 5
     d78:	91 05       	cpc	r25, r1
     d7a:	51 f1       	breq	.+84     	; 0xdd0 <DIO_SetPinDirection+0x8a>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	26 30       	cpi	r18, 0x06	; 6
     d82:	31 05       	cpc	r19, r1
     d84:	34 f4       	brge	.+12     	; 0xd92 <DIO_SetPinDirection+0x4c>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	91 05       	cpc	r25, r1
     d8e:	61 f0       	breq	.+24     	; 0xda8 <DIO_SetPinDirection+0x62>
     d90:	5a c0       	rjmp	.+180    	; 0xe46 <DIO_SetPinDirection+0x100>
     d92:	2e 81       	ldd	r18, Y+6	; 0x06
     d94:	3f 81       	ldd	r19, Y+7	; 0x07
     d96:	26 30       	cpi	r18, 0x06	; 6
     d98:	31 05       	cpc	r19, r1
     d9a:	71 f1       	breq	.+92     	; 0xdf8 <DIO_SetPinDirection+0xb2>
     d9c:	8e 81       	ldd	r24, Y+6	; 0x06
     d9e:	9f 81       	ldd	r25, Y+7	; 0x07
     da0:	87 30       	cpi	r24, 0x07	; 7
     da2:	91 05       	cpc	r25, r1
     da4:	e9 f1       	breq	.+122    	; 0xe20 <DIO_SetPinDirection+0xda>
     da6:	4f c0       	rjmp	.+158    	; 0xe46 <DIO_SetPinDirection+0x100>
		{
		case DDRA:
			set_bit(DDRA_REG , DIO_PINID);
     da8:	aa e3       	ldi	r26, 0x3A	; 58
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea e3       	ldi	r30, 0x3A	; 58
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_SetPinDirection+0x80>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_SetPinDirection+0x7c>
     dca:	84 2b       	or	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	3b c0       	rjmp	.+118    	; 0xe46 <DIO_SetPinDirection+0x100>
		break;

		case DDRB:
			set_bit(DDRB_REG , DIO_PINID) ;
     dd0:	a7 e3       	ldi	r26, 0x37	; 55
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e7 e3       	ldi	r30, 0x37	; 55
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 2e       	mov	r0, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_SetPinDirection+0xa8>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_SetPinDirection+0xa4>
     df2:	84 2b       	or	r24, r20
     df4:	8c 93       	st	X, r24
     df6:	27 c0       	rjmp	.+78     	; 0xe46 <DIO_SetPinDirection+0x100>
		break;

		case DDRC:
			set_bit(DDRC_REG , DIO_PINID) ;
     df8:	a4 e3       	ldi	r26, 0x34	; 52
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e4 e3       	ldi	r30, 0x34	; 52
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <DIO_SetPinDirection+0xd0>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <DIO_SetPinDirection+0xcc>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	13 c0       	rjmp	.+38     	; 0xe46 <DIO_SetPinDirection+0x100>
		break;

		case DDRD:
			set_bit(DDRD_REG , DIO_PINID) ;
     e20:	a1 e3       	ldi	r26, 0x31	; 49
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e1 e3       	ldi	r30, 0x31	; 49
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_SetPinDirection+0xf8>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_SetPinDirection+0xf4>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24

		}

	}

	if (DIO_PINIO == INPUT)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	09 f0       	breq	.+2      	; 0xe4e <DIO_SetPinDirection+0x108>
     e4c:	74 c0       	rjmp	.+232    	; 0xf36 <DIO_SetPinDirection+0x1f0>
	{
		switch(DIO_DDRID)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	85 30       	cpi	r24, 0x05	; 5
     e5e:	91 05       	cpc	r25, r1
     e60:	61 f1       	breq	.+88     	; 0xeba <DIO_SetPinDirection+0x174>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	26 30       	cpi	r18, 0x06	; 6
     e68:	31 05       	cpc	r19, r1
     e6a:	34 f4       	brge	.+12     	; 0xe78 <DIO_SetPinDirection+0x132>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	84 30       	cpi	r24, 0x04	; 4
     e72:	91 05       	cpc	r25, r1
     e74:	69 f0       	breq	.+26     	; 0xe90 <DIO_SetPinDirection+0x14a>
     e76:	5f c0       	rjmp	.+190    	; 0xf36 <DIO_SetPinDirection+0x1f0>
     e78:	2c 81       	ldd	r18, Y+4	; 0x04
     e7a:	3d 81       	ldd	r19, Y+5	; 0x05
     e7c:	26 30       	cpi	r18, 0x06	; 6
     e7e:	31 05       	cpc	r19, r1
     e80:	89 f1       	breq	.+98     	; 0xee4 <DIO_SetPinDirection+0x19e>
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	9d 81       	ldd	r25, Y+5	; 0x05
     e86:	87 30       	cpi	r24, 0x07	; 7
     e88:	91 05       	cpc	r25, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <DIO_SetPinDirection+0x148>
     e8c:	40 c0       	rjmp	.+128    	; 0xf0e <DIO_SetPinDirection+0x1c8>
     e8e:	53 c0       	rjmp	.+166    	; 0xf36 <DIO_SetPinDirection+0x1f0>
		{
			case DDRA:
				clr_bit(DDRA_REG , DIO_PINID);
     e90:	aa e3       	ldi	r26, 0x3A	; 58
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ea e3       	ldi	r30, 0x3A	; 58
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_SetPinDirection+0x168>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_SetPinDirection+0x164>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	3e c0       	rjmp	.+124    	; 0xf36 <DIO_SetPinDirection+0x1f0>
			break;

			case DDRB:
				clr_bit(DDRB_REG , DIO_PINID) ;
     eba:	a7 e3       	ldi	r26, 0x37	; 55
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e7 e3       	ldi	r30, 0x37	; 55
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_SetPinDirection+0x192>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_SetPinDirection+0x18e>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	29 c0       	rjmp	.+82     	; 0xf36 <DIO_SetPinDirection+0x1f0>
			break;

			case DDRC:
				clr_bit(DDRC_REG , DIO_PINID) ;
     ee4:	a4 e3       	ldi	r26, 0x34	; 52
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e4 e3       	ldi	r30, 0x34	; 52
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_SetPinDirection+0x1bc>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_SetPinDirection+0x1b8>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <DIO_SetPinDirection+0x1f0>
			break;

			case DDRD:
				clr_bit(DDRD_REG , DIO_PINID) ;
     f0e:	a1 e3       	ldi	r26, 0x31	; 49
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_SetPinDirection+0x1e6>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_SetPinDirection+0x1e2>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
			break;

		}

	}
}
     f36:	27 96       	adiw	r28, 0x07	; 7
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <DIO_GetPinValue>:

u8 DIO_GetPinValue (u8 DIO_PIN , u8 DIO_PINID)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <DIO_GetPinValue+0x6>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <DIO_GetPinValue+0x8>
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	8a 83       	std	Y+2, r24	; 0x02
     f58:	6b 83       	std	Y+3, r22	; 0x03
	u8 value_read ;

	switch(DIO_PIN)
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	4c 81       	ldd	r20, Y+4	; 0x04
     f66:	5d 81       	ldd	r21, Y+5	; 0x05
     f68:	41 30       	cpi	r20, 0x01	; 1
     f6a:	51 05       	cpc	r21, r1
     f6c:	41 f1       	breq	.+80     	; 0xfbe <DIO_GetPinValue+0x76>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	34 f4       	brge	.+12     	; 0xf84 <DIO_GetPinValue+0x3c>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	61 f0       	breq	.+24     	; 0xf9a <DIO_GetPinValue+0x52>
     f82:	52 c0       	rjmp	.+164    	; 0x1028 <DIO_GetPinValue+0xe0>
     f84:	4c 81       	ldd	r20, Y+4	; 0x04
     f86:	5d 81       	ldd	r21, Y+5	; 0x05
     f88:	42 30       	cpi	r20, 0x02	; 2
     f8a:	51 05       	cpc	r21, r1
     f8c:	51 f1       	breq	.+84     	; 0xfe2 <DIO_GetPinValue+0x9a>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	b9 f1       	breq	.+110    	; 0x1006 <DIO_GetPinValue+0xbe>
     f98:	47 c0       	rjmp	.+142    	; 0x1028 <DIO_GetPinValue+0xe0>
	{

	case PINA :
		value_read = read_bit(PINA_REG , DIO_PINID);
     f9a:	e9 e3       	ldi	r30, 0x39	; 57
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_GetPinValue+0x6a>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_GetPinValue+0x66>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	35 c0       	rjmp	.+106    	; 0x1028 <DIO_GetPinValue+0xe0>
	break;

	case PINB :
	value_read = read_bit(PINB_REG , DIO_PINID) ;
     fbe:	e6 e3       	ldi	r30, 0x36	; 54
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_GetPinValue+0x8e>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_GetPinValue+0x8a>
     fda:	ca 01       	movw	r24, r20
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <DIO_GetPinValue+0xe0>

	break;

	case PINC:
	value_read = read_bit(PINC_REG , DIO_PINID) ;
     fe2:	e3 e3       	ldi	r30, 0x33	; 51
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a9 01       	movw	r20, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_GetPinValue+0xb2>
     ff6:	55 95       	asr	r21
     ff8:	47 95       	ror	r20
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_GetPinValue+0xae>
     ffe:	ca 01       	movw	r24, r20
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <DIO_GetPinValue+0xe0>
	break;

	case PIND:
	value_read = read_bit(PIND_REG ,DIO_PINID) ;
    1006:	e0 e3       	ldi	r30, 0x30	; 48
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_GetPinValue+0xd6>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_GetPinValue+0xd2>
    1022:	ca 01       	movw	r24, r20
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
	break;

	}

	return value_read ;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 DIO_DDRID , u8 DIO_PortValue)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <DIO_SetPortDirection+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_SetPortDirection+0x8>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <DIO_SetPortDirection+0xa>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	6a 83       	std	Y+2, r22	; 0x02

		switch(DIO_DDRID)
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3e 83       	std	Y+6, r19	; 0x06
    1054:	2d 83       	std	Y+5, r18	; 0x05
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	85 30       	cpi	r24, 0x05	; 5
    105c:	91 05       	cpc	r25, r1
    105e:	d9 f0       	breq	.+54     	; 0x1096 <DIO_SetPortDirection+0x5c>
    1060:	2d 81       	ldd	r18, Y+5	; 0x05
    1062:	3e 81       	ldd	r19, Y+6	; 0x06
    1064:	26 30       	cpi	r18, 0x06	; 6
    1066:	31 05       	cpc	r19, r1
    1068:	34 f4       	brge	.+12     	; 0x1076 <DIO_SetPortDirection+0x3c>
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	84 30       	cpi	r24, 0x04	; 4
    1070:	91 05       	cpc	r25, r1
    1072:	61 f0       	breq	.+24     	; 0x108c <DIO_SetPortDirection+0x52>
    1074:	1e c0       	rjmp	.+60     	; 0x10b2 <DIO_SetPortDirection+0x78>
    1076:	2d 81       	ldd	r18, Y+5	; 0x05
    1078:	3e 81       	ldd	r19, Y+6	; 0x06
    107a:	26 30       	cpi	r18, 0x06	; 6
    107c:	31 05       	cpc	r19, r1
    107e:	81 f0       	breq	.+32     	; 0x10a0 <DIO_SetPortDirection+0x66>
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	87 30       	cpi	r24, 0x07	; 7
    1086:	91 05       	cpc	r25, r1
    1088:	81 f0       	breq	.+32     	; 0x10aa <DIO_SetPortDirection+0x70>
    108a:	13 c0       	rjmp	.+38     	; 0x10b2 <DIO_SetPortDirection+0x78>
		{
		case DDRA:
			DDRA_REG = DIO_PortValue ;
    108c:	ea e3       	ldi	r30, 0x3A	; 58
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	80 83       	st	Z, r24
    1094:	0e c0       	rjmp	.+28     	; 0x10b2 <DIO_SetPortDirection+0x78>
		break ;

		case DDRB:
			DDRB_REG = DIO_PortValue ;
    1096:	e7 e3       	ldi	r30, 0x37	; 55
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	80 83       	st	Z, r24
    109e:	09 c0       	rjmp	.+18     	; 0x10b2 <DIO_SetPortDirection+0x78>
		break ;

		case DDRC:
			DDRC_REG = DIO_PortValue ;
    10a0:	e4 e3       	ldi	r30, 0x34	; 52
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	80 83       	st	Z, r24
    10a8:	04 c0       	rjmp	.+8      	; 0x10b2 <DIO_SetPortDirection+0x78>
		break ;

		case DDRD:
			DDRD_REG = DIO_PortValue ;
    10aa:	e1 e3       	ldi	r30, 0x31	; 49
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	80 83       	st	Z, r24
		break ;

		}

		switch(DIO_DDRID)
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	3c 83       	std	Y+4, r19	; 0x04
    10ba:	2b 83       	std	Y+3, r18	; 0x03
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	85 30       	cpi	r24, 0x05	; 5
    10c2:	91 05       	cpc	r25, r1
    10c4:	d9 f0       	breq	.+54     	; 0x10fc <DIO_SetPortDirection+0xc2>
    10c6:	2b 81       	ldd	r18, Y+3	; 0x03
    10c8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ca:	26 30       	cpi	r18, 0x06	; 6
    10cc:	31 05       	cpc	r19, r1
    10ce:	34 f4       	brge	.+12     	; 0x10dc <DIO_SetPortDirection+0xa2>
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	91 05       	cpc	r25, r1
    10d8:	61 f0       	breq	.+24     	; 0x10f2 <DIO_SetPortDirection+0xb8>
    10da:	1e c0       	rjmp	.+60     	; 0x1118 <DIO_SetPortDirection+0xde>
    10dc:	2b 81       	ldd	r18, Y+3	; 0x03
    10de:	3c 81       	ldd	r19, Y+4	; 0x04
    10e0:	26 30       	cpi	r18, 0x06	; 6
    10e2:	31 05       	cpc	r19, r1
    10e4:	81 f0       	breq	.+32     	; 0x1106 <DIO_SetPortDirection+0xcc>
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	87 30       	cpi	r24, 0x07	; 7
    10ec:	91 05       	cpc	r25, r1
    10ee:	81 f0       	breq	.+32     	; 0x1110 <DIO_SetPortDirection+0xd6>
    10f0:	13 c0       	rjmp	.+38     	; 0x1118 <DIO_SetPortDirection+0xde>
		{
		case DDRA:
			DDRA_REG =DIO_PortValue ;
    10f2:	ea e3       	ldi	r30, 0x3A	; 58
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	80 83       	st	Z, r24
    10fa:	0e c0       	rjmp	.+28     	; 0x1118 <DIO_SetPortDirection+0xde>
		break ;

		case DDRB:
			DDRB_REG = DIO_PortValue ;
    10fc:	e7 e3       	ldi	r30, 0x37	; 55
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	80 83       	st	Z, r24
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <DIO_SetPortDirection+0xde>
		break ;

		case DDRC:
			DDRC_REG = DIO_PortValue ;
    1106:	e4 e3       	ldi	r30, 0x34	; 52
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	80 83       	st	Z, r24
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <DIO_SetPortDirection+0xde>
		break ;

		case DDRD:
			DDRD_REG = DIO_PortValue ;
    1110:	e1 e3       	ldi	r30, 0x31	; 49
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	80 83       	st	Z, r24
		break ;
	   }
}
    1118:	26 96       	adiw	r28, 0x06	; 6
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <DIO_SetPortValue>:

void DIO_SetPortValue(u8 DIO_PORTID , u8 DIO_PortValue)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_SetPortValue+0x6>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_SetPortValue+0x8>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	6a 83       	std	Y+2, r22	; 0x02

		switch(DIO_PORTID)
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3c 83       	std	Y+4, r19	; 0x04
    1142:	2b 83       	std	Y+3, r18	; 0x03
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	91 05       	cpc	r25, r1
    114c:	d1 f0       	breq	.+52     	; 0x1182 <DIO_SetPortValue+0x58>
    114e:	2b 81       	ldd	r18, Y+3	; 0x03
    1150:	3c 81       	ldd	r19, Y+4	; 0x04
    1152:	22 30       	cpi	r18, 0x02	; 2
    1154:	31 05       	cpc	r19, r1
    1156:	2c f4       	brge	.+10     	; 0x1162 <DIO_SetPortValue+0x38>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	61 f0       	breq	.+24     	; 0x1178 <DIO_SetPortValue+0x4e>
    1160:	1e c0       	rjmp	.+60     	; 0x119e <DIO_SetPortValue+0x74>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <DIO_SetPortValue+0x62>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	83 30       	cpi	r24, 0x03	; 3
    1172:	91 05       	cpc	r25, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <DIO_SetPortValue+0x6c>
    1176:	13 c0       	rjmp	.+38     	; 0x119e <DIO_SetPortValue+0x74>
		{

		case PORTA:
			PORTA_REG = DIO_PortValue ;
    1178:	eb e3       	ldi	r30, 0x3B	; 59
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	0e c0       	rjmp	.+28     	; 0x119e <DIO_SetPortValue+0x74>
		break ;

		case PORTB:
			PORTB_REG = DIO_PortValue ;
    1182:	e8 e3       	ldi	r30, 0x38	; 56
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	09 c0       	rjmp	.+18     	; 0x119e <DIO_SetPortValue+0x74>
		break ;

		case PORTC:
			PORTC_REG = DIO_PortValue ;
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
    1194:	04 c0       	rjmp	.+8      	; 0x119e <DIO_SetPortValue+0x74>
		break ;

		case PORTD:
			PORTD_REG = DIO_PortValue ;
    1196:	e2 e3       	ldi	r30, 0x32	; 50
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
		break ;

		}

}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <KPD_u8GetPressedKey>:
		 {9, 10, 11, 12},
		 {13, 14, 15, 16}
		} ;*/

u8 KPD_u8GetPressedKey (void)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <KPD_u8GetPressedKey+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <KPD_u8GetPressedKey+0x8>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ColIDX ;
	u8 local_u8RowIDX ;
	u8 local_u8PinState ;
	u8 local_u8PreassedKey = NO_KEY ;
    11b8:	80 e3       	ldi	r24, 0x30	; 48
    11ba:	89 83       	std	Y+1, r24	; 0x01

	// loop to go for every column in he kpd
	for(local_u8ColIDX = 0; local_u8ColIDX < 4 ; local_u8ColIDX++)
    11bc:	1c 82       	std	Y+4, r1	; 0x04
    11be:	3e c0       	rjmp	.+124    	; 0x123c <KPD_u8GetPressedKey+0x90>
	{
		// activate current column
		DIO_SetPinValue(KPD_PORT , local_u8ColIDX , LOW);
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	6c 81       	ldd	r22, Y+4	; 0x04
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

		// loop to go for every row in the kpd
		for(local_u8RowIDX = 0; local_u8RowIDX < 4 ; local_u8RowIDX++)
    11ca:	1b 82       	std	Y+3, r1	; 0x03
    11cc:	2c c0       	rjmp	.+88     	; 0x1226 <KPD_u8GetPressedKey+0x7a>
		{
			//get the row pin state9
			local_u8PinState = DIO_GetPinValue(KPD_PIN , (local_u8RowIDX + 4)) ;
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	98 2f       	mov	r25, r24
    11d2:	9c 5f       	subi	r25, 0xFC	; 252
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	69 2f       	mov	r22, r25
    11d8:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_GetPinValue>
    11dc:	8a 83       	std	Y+2, r24	; 0x02

			if(local_u8PinState == LOW)
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	88 23       	and	r24, r24
    11e2:	f1 f4       	brne	.+60     	; 0x1220 <KPD_u8GetPressedKey+0x74>
			{
				local_u8PreassedKey = KPD_u8ARR [local_u8RowIDX][local_u8ColIDX];
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	48 2f       	mov	r20, r24
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	8c 81       	ldd	r24, Y+4	; 0x04
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	ca 01       	movw	r24, r20
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	82 0f       	add	r24, r18
    11fc:	93 1f       	adc	r25, r19
    11fe:	fc 01       	movw	r30, r24
    1200:	e6 51       	subi	r30, 0x16	; 22
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	80 81       	ld	r24, Z
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	08 c0       	rjmp	.+16     	; 0x121a <KPD_u8GetPressedKey+0x6e>

				while(local_u8PinState == LOW)
				{
					// get the row pin state
					local_u8PinState = DIO_GetPinValue(KPD_PIN , (local_u8RowIDX + 4)) ;
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	98 2f       	mov	r25, r24
    120e:	9c 5f       	subi	r25, 0xFC	; 252
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	69 2f       	mov	r22, r25
    1214:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_GetPinValue>
    1218:	8a 83       	std	Y+2, r24	; 0x02

			if(local_u8PinState == LOW)
			{
				local_u8PreassedKey = KPD_u8ARR [local_u8RowIDX][local_u8ColIDX];

				while(local_u8PinState == LOW)
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	88 23       	and	r24, r24
    121e:	a9 f3       	breq	.-22     	; 0x120a <KPD_u8GetPressedKey+0x5e>
	{
		// activate current column
		DIO_SetPinValue(KPD_PORT , local_u8ColIDX , LOW);

		// loop to go for every row in the kpd
		for(local_u8RowIDX = 0; local_u8RowIDX < 4 ; local_u8RowIDX++)
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	8b 83       	std	Y+3, r24	; 0x03
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	84 30       	cpi	r24, 0x04	; 4
    122a:	88 f2       	brcs	.-94     	; 0x11ce <KPD_u8GetPressedKey+0x22>
			}
		}


		// deactivate the current column
		DIO_SetPinValue(KPD_PORT , local_u8ColIDX , HIGH);
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	6c 81       	ldd	r22, Y+4	; 0x04
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	u8 local_u8RowIDX ;
	u8 local_u8PinState ;
	u8 local_u8PreassedKey = NO_KEY ;

	// loop to go for every column in he kpd
	for(local_u8ColIDX = 0; local_u8ColIDX < 4 ; local_u8ColIDX++)
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	8c 83       	std	Y+4, r24	; 0x04
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	84 30       	cpi	r24, 0x04	; 4
    1240:	08 f4       	brcc	.+2      	; 0x1244 <KPD_u8GetPressedKey+0x98>
    1242:	be cf       	rjmp	.-132    	; 0x11c0 <KPD_u8GetPressedKey+0x14>

		// deactivate the current column
		DIO_SetPinValue(KPD_PORT , local_u8ColIDX , HIGH);
	}

	return local_u8PreassedKey;
    1244:	89 81       	ldd	r24, Y+1	; 0x01
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <LCD_voidInit>:
#include <avr\delay.h>


// initialization function : use it in the beginning of any lcd program
void LCD_voidInit(void)
{
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	c6 54       	subi	r28, 0x46	; 70
    1262:	d0 40       	sbci	r29, 0x00	; 0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	fe 01       	movw	r30, r28
    1270:	ed 5b       	subi	r30, 0xBD	; 189
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a0 e2       	ldi	r26, 0x20	; 32
    127a:	b2 e4       	ldi	r27, 0x42	; 66
    127c:	80 83       	st	Z, r24
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	a2 83       	std	Z+2, r26	; 0x02
    1282:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1284:	8e 01       	movw	r16, r28
    1286:	01 5c       	subi	r16, 0xC1	; 193
    1288:	1f 4f       	sbci	r17, 0xFF	; 255
    128a:	fe 01       	movw	r30, r28
    128c:	ed 5b       	subi	r30, 0xBD	; 189
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	60 81       	ld	r22, Z
    1292:	71 81       	ldd	r23, Z+1	; 0x01
    1294:	82 81       	ldd	r24, Z+2	; 0x02
    1296:	93 81       	ldd	r25, Z+3	; 0x03
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	4a ef       	ldi	r20, 0xFA	; 250
    129e:	54 e4       	ldi	r21, 0x44	; 68
    12a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	f8 01       	movw	r30, r16
    12aa:	80 83       	st	Z, r24
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	a2 83       	std	Z+2, r26	; 0x02
    12b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12b2:	fe 01       	movw	r30, r28
    12b4:	ff 96       	adiw	r30, 0x3f	; 63
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <LCD_voidInit+0x84>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9e af       	std	Y+62, r25	; 0x3e
    12d4:	8d af       	std	Y+61, r24	; 0x3d
    12d6:	46 c0       	rjmp	.+140    	; 0x1364 <LCD_voidInit+0x110>
	else if (__tmp > 65535)
    12d8:	fe 01       	movw	r30, r28
    12da:	ff 96       	adiw	r30, 0x3f	; 63
    12dc:	60 81       	ld	r22, Z
    12de:	71 81       	ldd	r23, Z+1	; 0x01
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	3f ef       	ldi	r19, 0xFF	; 255
    12e8:	4f e7       	ldi	r20, 0x7F	; 127
    12ea:	57 e4       	ldi	r21, 0x47	; 71
    12ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f0:	18 16       	cp	r1, r24
    12f2:	64 f5       	brge	.+88     	; 0x134c <LCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f4:	fe 01       	movw	r30, r28
    12f6:	ed 5b       	subi	r30, 0xBD	; 189
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	60 81       	ld	r22, Z
    12fc:	71 81       	ldd	r23, Z+1	; 0x01
    12fe:	82 81       	ldd	r24, Z+2	; 0x02
    1300:	93 81       	ldd	r25, Z+3	; 0x03
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e2       	ldi	r20, 0x20	; 32
    1308:	51 e4       	ldi	r21, 0x41	; 65
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9e af       	std	Y+62, r25	; 0x3e
    1320:	8d af       	std	Y+61, r24	; 0x3d
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <LCD_voidInit+0xee>
    1324:	88 ec       	ldi	r24, 0xC8	; 200
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9c af       	std	Y+60, r25	; 0x3c
    132a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    132c:	8b ad       	ldd	r24, Y+59	; 0x3b
    132e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <LCD_voidInit+0xdc>
    1334:	9c af       	std	Y+60, r25	; 0x3c
    1336:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1338:	8d ad       	ldd	r24, Y+61	; 0x3d
    133a:	9e ad       	ldd	r25, Y+62	; 0x3e
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	9e af       	std	Y+62, r25	; 0x3e
    1340:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	8d ad       	ldd	r24, Y+61	; 0x3d
    1344:	9e ad       	ldd	r25, Y+62	; 0x3e
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f7       	brne	.-38     	; 0x1324 <LCD_voidInit+0xd0>
    134a:	16 c0       	rjmp	.+44     	; 0x1378 <LCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134c:	fe 01       	movw	r30, r28
    134e:	ff 96       	adiw	r30, 0x3f	; 63
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9e af       	std	Y+62, r25	; 0x3e
    1362:	8d af       	std	Y+61, r24	; 0x3d
    1364:	8d ad       	ldd	r24, Y+61	; 0x3d
    1366:	9e ad       	ldd	r25, Y+62	; 0x3e
    1368:	9a af       	std	Y+58, r25	; 0x3a
    136a:	89 af       	std	Y+57, r24	; 0x39
    136c:	89 ad       	ldd	r24, Y+57	; 0x39
    136e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <LCD_voidInit+0x11c>
    1374:	9a af       	std	Y+58, r25	; 0x3a
    1376:	89 af       	std	Y+57, r24	; 0x39
	// wait for more than 30 ms
	_delay_ms(40);

	// function set command (8bit mode -- 2 lines -- 5*7)
	LCD_voidSendCommand (0b00111000);
    1378:	88 e3       	ldi	r24, 0x38	; 56
    137a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a0 e8       	ldi	r26, 0x80	; 128
    1384:	bf e3       	ldi	r27, 0x3F	; 63
    1386:	8d ab       	std	Y+53, r24	; 0x35
    1388:	9e ab       	std	Y+54, r25	; 0x36
    138a:	af ab       	std	Y+55, r26	; 0x37
    138c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138e:	6d a9       	ldd	r22, Y+53	; 0x35
    1390:	7e a9       	ldd	r23, Y+54	; 0x36
    1392:	8f a9       	ldd	r24, Y+55	; 0x37
    1394:	98 ad       	ldd	r25, Y+56	; 0x38
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	4a ef       	ldi	r20, 0xFA	; 250
    139c:	54 e4       	ldi	r21, 0x44	; 68
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	89 ab       	std	Y+49, r24	; 0x31
    13a8:	9a ab       	std	Y+50, r25	; 0x32
    13aa:	ab ab       	std	Y+51, r26	; 0x33
    13ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13ae:	69 a9       	ldd	r22, Y+49	; 0x31
    13b0:	7a a9       	ldd	r23, Y+50	; 0x32
    13b2:	8b a9       	ldd	r24, Y+51	; 0x33
    13b4:	9c a9       	ldd	r25, Y+52	; 0x34
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e8       	ldi	r20, 0x80	; 128
    13bc:	5f e3       	ldi	r21, 0x3F	; 63
    13be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c2:	88 23       	and	r24, r24
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <LCD_voidInit+0x17c>
		__ticks = 1;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	98 ab       	std	Y+48, r25	; 0x30
    13cc:	8f a7       	std	Y+47, r24	; 0x2f
    13ce:	3f c0       	rjmp	.+126    	; 0x144e <LCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    13d0:	69 a9       	ldd	r22, Y+49	; 0x31
    13d2:	7a a9       	ldd	r23, Y+50	; 0x32
    13d4:	8b a9       	ldd	r24, Y+51	; 0x33
    13d6:	9c a9       	ldd	r25, Y+52	; 0x34
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	3f ef       	ldi	r19, 0xFF	; 255
    13dc:	4f e7       	ldi	r20, 0x7F	; 127
    13de:	57 e4       	ldi	r21, 0x47	; 71
    13e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e4:	18 16       	cp	r1, r24
    13e6:	4c f5       	brge	.+82     	; 0x143a <LCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e8:	6d a9       	ldd	r22, Y+53	; 0x35
    13ea:	7e a9       	ldd	r23, Y+54	; 0x36
    13ec:	8f a9       	ldd	r24, Y+55	; 0x37
    13ee:	98 ad       	ldd	r25, Y+56	; 0x38
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e2       	ldi	r20, 0x20	; 32
    13f6:	51 e4       	ldi	r21, 0x41	; 65
    13f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	98 ab       	std	Y+48, r25	; 0x30
    140e:	8f a7       	std	Y+47, r24	; 0x2f
    1410:	0f c0       	rjmp	.+30     	; 0x1430 <LCD_voidInit+0x1dc>
    1412:	88 ec       	ldi	r24, 0xC8	; 200
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9e a7       	std	Y+46, r25	; 0x2e
    1418:	8d a7       	std	Y+45, r24	; 0x2d
    141a:	8d a5       	ldd	r24, Y+45	; 0x2d
    141c:	9e a5       	ldd	r25, Y+46	; 0x2e
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <LCD_voidInit+0x1ca>
    1422:	9e a7       	std	Y+46, r25	; 0x2e
    1424:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1426:	8f a5       	ldd	r24, Y+47	; 0x2f
    1428:	98 a9       	ldd	r25, Y+48	; 0x30
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	98 ab       	std	Y+48, r25	; 0x30
    142e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1430:	8f a5       	ldd	r24, Y+47	; 0x2f
    1432:	98 a9       	ldd	r25, Y+48	; 0x30
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	69 f7       	brne	.-38     	; 0x1412 <LCD_voidInit+0x1be>
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <LCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143a:	69 a9       	ldd	r22, Y+49	; 0x31
    143c:	7a a9       	ldd	r23, Y+50	; 0x32
    143e:	8b a9       	ldd	r24, Y+51	; 0x33
    1440:	9c a9       	ldd	r25, Y+52	; 0x34
    1442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	98 ab       	std	Y+48, r25	; 0x30
    144c:	8f a7       	std	Y+47, r24	; 0x2f
    144e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1450:	98 a9       	ldd	r25, Y+48	; 0x30
    1452:	9c a7       	std	Y+44, r25	; 0x2c
    1454:	8b a7       	std	Y+43, r24	; 0x2b
    1456:	8b a5       	ldd	r24, Y+43	; 0x2b
    1458:	9c a5       	ldd	r25, Y+44	; 0x2c
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <LCD_voidInit+0x206>
    145e:	9c a7       	std	Y+44, r25	; 0x2c
    1460:	8b a7       	std	Y+43, r24	; 0x2b

	//wait for more than 39 us
	_delay_ms(1);

	//display on/off control command (cursor on/off -- cursor blink/not blink)
	LCD_voidSendCommand (0x0c);
    1462:	8c e0       	ldi	r24, 0x0C	; 12
    1464:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a0 e8       	ldi	r26, 0x80	; 128
    146e:	bf e3       	ldi	r27, 0x3F	; 63
    1470:	8f a3       	std	Y+39, r24	; 0x27
    1472:	98 a7       	std	Y+40, r25	; 0x28
    1474:	a9 a7       	std	Y+41, r26	; 0x29
    1476:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1478:	6f a1       	ldd	r22, Y+39	; 0x27
    147a:	78 a5       	ldd	r23, Y+40	; 0x28
    147c:	89 a5       	ldd	r24, Y+41	; 0x29
    147e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	4a ef       	ldi	r20, 0xFA	; 250
    1486:	54 e4       	ldi	r21, 0x44	; 68
    1488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	8b a3       	std	Y+35, r24	; 0x23
    1492:	9c a3       	std	Y+36, r25	; 0x24
    1494:	ad a3       	std	Y+37, r26	; 0x25
    1496:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1498:	6b a1       	ldd	r22, Y+35	; 0x23
    149a:	7c a1       	ldd	r23, Y+36	; 0x24
    149c:	8d a1       	ldd	r24, Y+37	; 0x25
    149e:	9e a1       	ldd	r25, Y+38	; 0x26
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e8       	ldi	r20, 0x80	; 128
    14a6:	5f e3       	ldi	r21, 0x3F	; 63
    14a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ac:	88 23       	and	r24, r24
    14ae:	2c f4       	brge	.+10     	; 0x14ba <LCD_voidInit+0x266>
		__ticks = 1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9a a3       	std	Y+34, r25	; 0x22
    14b6:	89 a3       	std	Y+33, r24	; 0x21
    14b8:	3f c0       	rjmp	.+126    	; 0x1538 <LCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    14ba:	6b a1       	ldd	r22, Y+35	; 0x23
    14bc:	7c a1       	ldd	r23, Y+36	; 0x24
    14be:	8d a1       	ldd	r24, Y+37	; 0x25
    14c0:	9e a1       	ldd	r25, Y+38	; 0x26
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	3f ef       	ldi	r19, 0xFF	; 255
    14c6:	4f e7       	ldi	r20, 0x7F	; 127
    14c8:	57 e4       	ldi	r21, 0x47	; 71
    14ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ce:	18 16       	cp	r1, r24
    14d0:	4c f5       	brge	.+82     	; 0x1524 <LCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d2:	6f a1       	ldd	r22, Y+39	; 0x27
    14d4:	78 a5       	ldd	r23, Y+40	; 0x28
    14d6:	89 a5       	ldd	r24, Y+41	; 0x29
    14d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e2       	ldi	r20, 0x20	; 32
    14e0:	51 e4       	ldi	r21, 0x41	; 65
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	bc 01       	movw	r22, r24
    14ec:	cd 01       	movw	r24, r26
    14ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	9a a3       	std	Y+34, r25	; 0x22
    14f8:	89 a3       	std	Y+33, r24	; 0x21
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <LCD_voidInit+0x2c6>
    14fc:	88 ec       	ldi	r24, 0xC8	; 200
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	98 a3       	std	Y+32, r25	; 0x20
    1502:	8f 8f       	std	Y+31, r24	; 0x1f
    1504:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1506:	98 a1       	ldd	r25, Y+32	; 0x20
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <LCD_voidInit+0x2b4>
    150c:	98 a3       	std	Y+32, r25	; 0x20
    150e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1510:	89 a1       	ldd	r24, Y+33	; 0x21
    1512:	9a a1       	ldd	r25, Y+34	; 0x22
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	9a a3       	std	Y+34, r25	; 0x22
    1518:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151a:	89 a1       	ldd	r24, Y+33	; 0x21
    151c:	9a a1       	ldd	r25, Y+34	; 0x22
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	69 f7       	brne	.-38     	; 0x14fc <LCD_voidInit+0x2a8>
    1522:	14 c0       	rjmp	.+40     	; 0x154c <LCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1524:	6b a1       	ldd	r22, Y+35	; 0x23
    1526:	7c a1       	ldd	r23, Y+36	; 0x24
    1528:	8d a1       	ldd	r24, Y+37	; 0x25
    152a:	9e a1       	ldd	r25, Y+38	; 0x26
    152c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	9a a3       	std	Y+34, r25	; 0x22
    1536:	89 a3       	std	Y+33, r24	; 0x21
    1538:	89 a1       	ldd	r24, Y+33	; 0x21
    153a:	9a a1       	ldd	r25, Y+34	; 0x22
    153c:	9e 8f       	std	Y+30, r25	; 0x1e
    153e:	8d 8f       	std	Y+29, r24	; 0x1d
    1540:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1542:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <LCD_voidInit+0x2f0>
    1548:	9e 8f       	std	Y+30, r25	; 0x1e
    154a:	8d 8f       	std	Y+29, r24	; 0x1d

	// wait for more than 39 us
	_delay_ms(1);

	//lcd clear : to clear any data on the lcd
	LCD_voidSendCommand (0x01);
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e0       	ldi	r26, 0x00	; 0
    1558:	b0 e4       	ldi	r27, 0x40	; 64
    155a:	89 8f       	std	Y+25, r24	; 0x19
    155c:	9a 8f       	std	Y+26, r25	; 0x1a
    155e:	ab 8f       	std	Y+27, r26	; 0x1b
    1560:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1562:	69 8d       	ldd	r22, Y+25	; 0x19
    1564:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1566:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1568:	9c 8d       	ldd	r25, Y+28	; 0x1c
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	4a ef       	ldi	r20, 0xFA	; 250
    1570:	54 e4       	ldi	r21, 0x44	; 68
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	8d 8b       	std	Y+21, r24	; 0x15
    157c:	9e 8b       	std	Y+22, r25	; 0x16
    157e:	af 8b       	std	Y+23, r26	; 0x17
    1580:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1582:	6d 89       	ldd	r22, Y+21	; 0x15
    1584:	7e 89       	ldd	r23, Y+22	; 0x16
    1586:	8f 89       	ldd	r24, Y+23	; 0x17
    1588:	98 8d       	ldd	r25, Y+24	; 0x18
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e8       	ldi	r20, 0x80	; 128
    1590:	5f e3       	ldi	r21, 0x3F	; 63
    1592:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1596:	88 23       	and	r24, r24
    1598:	2c f4       	brge	.+10     	; 0x15a4 <LCD_voidInit+0x350>
		__ticks = 1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9c 8b       	std	Y+20, r25	; 0x14
    15a0:	8b 8b       	std	Y+19, r24	; 0x13
    15a2:	3f c0       	rjmp	.+126    	; 0x1622 <LCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    15a4:	6d 89       	ldd	r22, Y+21	; 0x15
    15a6:	7e 89       	ldd	r23, Y+22	; 0x16
    15a8:	8f 89       	ldd	r24, Y+23	; 0x17
    15aa:	98 8d       	ldd	r25, Y+24	; 0x18
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	4f e7       	ldi	r20, 0x7F	; 127
    15b2:	57 e4       	ldi	r21, 0x47	; 71
    15b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	4c f5       	brge	.+82     	; 0x160e <LCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15bc:	69 8d       	ldd	r22, Y+25	; 0x19
    15be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e2       	ldi	r20, 0x20	; 32
    15ca:	51 e4       	ldi	r21, 0x41	; 65
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9c 8b       	std	Y+20, r25	; 0x14
    15e2:	8b 8b       	std	Y+19, r24	; 0x13
    15e4:	0f c0       	rjmp	.+30     	; 0x1604 <LCD_voidInit+0x3b0>
    15e6:	88 ec       	ldi	r24, 0xC8	; 200
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9a 8b       	std	Y+18, r25	; 0x12
    15ec:	89 8b       	std	Y+17, r24	; 0x11
    15ee:	89 89       	ldd	r24, Y+17	; 0x11
    15f0:	9a 89       	ldd	r25, Y+18	; 0x12
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <LCD_voidInit+0x39e>
    15f6:	9a 8b       	std	Y+18, r25	; 0x12
    15f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fa:	8b 89       	ldd	r24, Y+19	; 0x13
    15fc:	9c 89       	ldd	r25, Y+20	; 0x14
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	9c 8b       	std	Y+20, r25	; 0x14
    1602:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1604:	8b 89       	ldd	r24, Y+19	; 0x13
    1606:	9c 89       	ldd	r25, Y+20	; 0x14
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	69 f7       	brne	.-38     	; 0x15e6 <LCD_voidInit+0x392>
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <LCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160e:	6d 89       	ldd	r22, Y+21	; 0x15
    1610:	7e 89       	ldd	r23, Y+22	; 0x16
    1612:	8f 89       	ldd	r24, Y+23	; 0x17
    1614:	98 8d       	ldd	r25, Y+24	; 0x18
    1616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9c 8b       	std	Y+20, r25	; 0x14
    1620:	8b 8b       	std	Y+19, r24	; 0x13
    1622:	8b 89       	ldd	r24, Y+19	; 0x13
    1624:	9c 89       	ldd	r25, Y+20	; 0x14
    1626:	98 8b       	std	Y+16, r25	; 0x10
    1628:	8f 87       	std	Y+15, r24	; 0x0f
    162a:	8f 85       	ldd	r24, Y+15	; 0x0f
    162c:	98 89       	ldd	r25, Y+16	; 0x10
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <LCD_voidInit+0x3da>
    1632:	98 8b       	std	Y+16, r25	; 0x10
    1634:	8f 87       	std	Y+15, r24	; 0x0f

	// delay for more than 1.53 ms
	_delay_ms(2);

	// entry mode set
	LCD_voidSendCommand(0x0A);
    1636:	8a e0       	ldi	r24, 0x0A	; 10
    1638:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a0 e8       	ldi	r26, 0x80	; 128
    1642:	bf e3       	ldi	r27, 0x3F	; 63
    1644:	8b 87       	std	Y+11, r24	; 0x0b
    1646:	9c 87       	std	Y+12, r25	; 0x0c
    1648:	ad 87       	std	Y+13, r26	; 0x0d
    164a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164c:	6b 85       	ldd	r22, Y+11	; 0x0b
    164e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1650:	8d 85       	ldd	r24, Y+13	; 0x0d
    1652:	9e 85       	ldd	r25, Y+14	; 0x0e
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	4a ef       	ldi	r20, 0xFA	; 250
    165a:	54 e4       	ldi	r21, 0x44	; 68
    165c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	8f 83       	std	Y+7, r24	; 0x07
    1666:	98 87       	std	Y+8, r25	; 0x08
    1668:	a9 87       	std	Y+9, r26	; 0x09
    166a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    166c:	6f 81       	ldd	r22, Y+7	; 0x07
    166e:	78 85       	ldd	r23, Y+8	; 0x08
    1670:	89 85       	ldd	r24, Y+9	; 0x09
    1672:	9a 85       	ldd	r25, Y+10	; 0x0a
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	2c f4       	brge	.+10     	; 0x168e <LCD_voidInit+0x43a>
		__ticks = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	3f c0       	rjmp	.+126    	; 0x170c <LCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    168e:	6f 81       	ldd	r22, Y+7	; 0x07
    1690:	78 85       	ldd	r23, Y+8	; 0x08
    1692:	89 85       	ldd	r24, Y+9	; 0x09
    1694:	9a 85       	ldd	r25, Y+10	; 0x0a
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	3f ef       	ldi	r19, 0xFF	; 255
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	57 e4       	ldi	r21, 0x47	; 71
    169e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	4c f5       	brge	.+82     	; 0x16f8 <LCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e2       	ldi	r20, 0x20	; 32
    16b4:	51 e4       	ldi	r21, 0x41	; 65
    16b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <LCD_voidInit+0x49a>
    16d0:	88 ec       	ldi	r24, 0xC8	; 200
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <LCD_voidInit+0x488>
    16e0:	9c 83       	std	Y+4, r25	; 0x04
    16e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	69 f7       	brne	.-38     	; 0x16d0 <LCD_voidInit+0x47c>
    16f6:	14 c0       	rjmp	.+40     	; 0x1720 <LCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f8:	6f 81       	ldd	r22, Y+7	; 0x07
    16fa:	78 85       	ldd	r23, Y+8	; 0x08
    16fc:	89 85       	ldd	r24, Y+9	; 0x09
    16fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	9a 83       	std	Y+2, r25	; 0x02
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	9a 81       	ldd	r25, Y+2	; 0x02
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_voidInit+0x4c4>
    171c:	9a 83       	std	Y+2, r25	; 0x02
    171e:	89 83       	std	Y+1, r24	; 0x01

	//delay for more than 1 ms
	_delay_ms(1);

}
    1720:	ca 5b       	subi	r28, 0xBA	; 186
    1722:	df 4f       	sbci	r29, 0xFF	; 255
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	08 95       	ret

00001738 <LCD_voidSendCommand>:


void LCD_voidSendCommand (u8 COPY_LCD_CMD)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	6d 97       	sbiw	r28, 0x1d	; 29
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	8d 8f       	std	Y+29, r24	; 0x1d
	// disable Enable bin
	DIO_SetPinValue (LCD_CTRL_PORT,LCD_EN,LOW);
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	62 e0       	ldi	r22, 0x02	; 2
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//RS COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RS , LOW) ;
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	//_delay_ms(1) ;

	//RW COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RW , LOW) ;
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	61 e0       	ldi	r22, 0x01	; 1
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	//_delay_ms(1) ;

	// SEND THE COMMAND
	DIO_SetPortValue (LCD_DATA_PORT ,COPY_LCD_CMD) ;
    176c:	83 e0       	ldi	r24, 0x03	; 3
    176e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1770:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a0 e8       	ldi	r26, 0x80	; 128
    177a:	bf e3       	ldi	r27, 0x3F	; 63
    177c:	89 8f       	std	Y+25, r24	; 0x19
    177e:	9a 8f       	std	Y+26, r25	; 0x1a
    1780:	ab 8f       	std	Y+27, r26	; 0x1b
    1782:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1784:	69 8d       	ldd	r22, Y+25	; 0x19
    1786:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1788:	8b 8d       	ldd	r24, Y+27	; 0x1b
    178a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4a ef       	ldi	r20, 0xFA	; 250
    1792:	54 e4       	ldi	r21, 0x44	; 68
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	8d 8b       	std	Y+21, r24	; 0x15
    179e:	9e 8b       	std	Y+22, r25	; 0x16
    17a0:	af 8b       	std	Y+23, r26	; 0x17
    17a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17a4:	6d 89       	ldd	r22, Y+21	; 0x15
    17a6:	7e 89       	ldd	r23, Y+22	; 0x16
    17a8:	8f 89       	ldd	r24, Y+23	; 0x17
    17aa:	98 8d       	ldd	r25, Y+24	; 0x18
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e8       	ldi	r20, 0x80	; 128
    17b2:	5f e3       	ldi	r21, 0x3F	; 63
    17b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b8:	88 23       	and	r24, r24
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9c 8b       	std	Y+20, r25	; 0x14
    17c2:	8b 8b       	std	Y+19, r24	; 0x13
    17c4:	3f c0       	rjmp	.+126    	; 0x1844 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    17c6:	6d 89       	ldd	r22, Y+21	; 0x15
    17c8:	7e 89       	ldd	r23, Y+22	; 0x16
    17ca:	8f 89       	ldd	r24, Y+23	; 0x17
    17cc:	98 8d       	ldd	r25, Y+24	; 0x18
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	57 e4       	ldi	r21, 0x47	; 71
    17d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	4c f5       	brge	.+82     	; 0x1830 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17de:	69 8d       	ldd	r22, Y+25	; 0x19
    17e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e2       	ldi	r20, 0x20	; 32
    17ec:	51 e4       	ldi	r21, 0x41	; 65
    17ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	bc 01       	movw	r22, r24
    17f8:	cd 01       	movw	r24, r26
    17fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	9c 8b       	std	Y+20, r25	; 0x14
    1804:	8b 8b       	std	Y+19, r24	; 0x13
    1806:	0f c0       	rjmp	.+30     	; 0x1826 <LCD_voidSendCommand+0xee>
    1808:	88 ec       	ldi	r24, 0xC8	; 200
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9a 8b       	std	Y+18, r25	; 0x12
    180e:	89 8b       	std	Y+17, r24	; 0x11
    1810:	89 89       	ldd	r24, Y+17	; 0x11
    1812:	9a 89       	ldd	r25, Y+18	; 0x12
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <LCD_voidSendCommand+0xdc>
    1818:	9a 8b       	std	Y+18, r25	; 0x12
    181a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181c:	8b 89       	ldd	r24, Y+19	; 0x13
    181e:	9c 89       	ldd	r25, Y+20	; 0x14
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	9c 8b       	std	Y+20, r25	; 0x14
    1824:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1826:	8b 89       	ldd	r24, Y+19	; 0x13
    1828:	9c 89       	ldd	r25, Y+20	; 0x14
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	69 f7       	brne	.-38     	; 0x1808 <LCD_voidSendCommand+0xd0>
    182e:	14 c0       	rjmp	.+40     	; 0x1858 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1830:	6d 89       	ldd	r22, Y+21	; 0x15
    1832:	7e 89       	ldd	r23, Y+22	; 0x16
    1834:	8f 89       	ldd	r24, Y+23	; 0x17
    1836:	98 8d       	ldd	r25, Y+24	; 0x18
    1838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9c 8b       	std	Y+20, r25	; 0x14
    1842:	8b 8b       	std	Y+19, r24	; 0x13
    1844:	8b 89       	ldd	r24, Y+19	; 0x13
    1846:	9c 89       	ldd	r25, Y+20	; 0x14
    1848:	98 8b       	std	Y+16, r25	; 0x10
    184a:	8f 87       	std	Y+15, r24	; 0x0f
    184c:	8f 85       	ldd	r24, Y+15	; 0x0f
    184e:	98 89       	ldd	r25, Y+16	; 0x10
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <LCD_voidSendCommand+0x118>
    1854:	98 8b       	std	Y+16, r25	; 0x10
    1856:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , HIGH) ;
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	62 e0       	ldi	r22, 0x02	; 2
    185c:	41 e0       	ldi	r20, 0x01	; 1
    185e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a0 e8       	ldi	r26, 0x80	; 128
    1868:	bf e3       	ldi	r27, 0x3F	; 63
    186a:	8b 87       	std	Y+11, r24	; 0x0b
    186c:	9c 87       	std	Y+12, r25	; 0x0c
    186e:	ad 87       	std	Y+13, r26	; 0x0d
    1870:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1872:	6b 85       	ldd	r22, Y+11	; 0x0b
    1874:	7c 85       	ldd	r23, Y+12	; 0x0c
    1876:	8d 85       	ldd	r24, Y+13	; 0x0d
    1878:	9e 85       	ldd	r25, Y+14	; 0x0e
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	4a ef       	ldi	r20, 0xFA	; 250
    1880:	54 e4       	ldi	r21, 0x44	; 68
    1882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	8f 83       	std	Y+7, r24	; 0x07
    188c:	98 87       	std	Y+8, r25	; 0x08
    188e:	a9 87       	std	Y+9, r26	; 0x09
    1890:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1892:	6f 81       	ldd	r22, Y+7	; 0x07
    1894:	78 85       	ldd	r23, Y+8	; 0x08
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e8       	ldi	r20, 0x80	; 128
    18a0:	5f e3       	ldi	r21, 0x3F	; 63
    18a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a6:	88 23       	and	r24, r24
    18a8:	2c f4       	brge	.+10     	; 0x18b4 <LCD_voidSendCommand+0x17c>
		__ticks = 1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9e 83       	std	Y+6, r25	; 0x06
    18b0:	8d 83       	std	Y+5, r24	; 0x05
    18b2:	3f c0       	rjmp	.+126    	; 0x1932 <LCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    18b4:	6f 81       	ldd	r22, Y+7	; 0x07
    18b6:	78 85       	ldd	r23, Y+8	; 0x08
    18b8:	89 85       	ldd	r24, Y+9	; 0x09
    18ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	3f ef       	ldi	r19, 0xFF	; 255
    18c0:	4f e7       	ldi	r20, 0x7F	; 127
    18c2:	57 e4       	ldi	r21, 0x47	; 71
    18c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c8:	18 16       	cp	r1, r24
    18ca:	4c f5       	brge	.+82     	; 0x191e <LCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e2       	ldi	r20, 0x20	; 32
    18da:	51 e4       	ldi	r21, 0x41	; 65
    18dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	bc 01       	movw	r22, r24
    18e6:	cd 01       	movw	r24, r26
    18e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	9e 83       	std	Y+6, r25	; 0x06
    18f2:	8d 83       	std	Y+5, r24	; 0x05
    18f4:	0f c0       	rjmp	.+30     	; 0x1914 <LCD_voidSendCommand+0x1dc>
    18f6:	88 ec       	ldi	r24, 0xC8	; 200
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9c 83       	std	Y+4, r25	; 0x04
    18fc:	8b 83       	std	Y+3, r24	; 0x03
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <LCD_voidSendCommand+0x1ca>
    1906:	9c 83       	std	Y+4, r25	; 0x04
    1908:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	9e 81       	ldd	r25, Y+6	; 0x06
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	9e 81       	ldd	r25, Y+6	; 0x06
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	69 f7       	brne	.-38     	; 0x18f6 <LCD_voidSendCommand+0x1be>
    191c:	14 c0       	rjmp	.+40     	; 0x1946 <LCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191e:	6f 81       	ldd	r22, Y+7	; 0x07
    1920:	78 85       	ldd	r23, Y+8	; 0x08
    1922:	89 85       	ldd	r24, Y+9	; 0x09
    1924:	9a 85       	ldd	r25, Y+10	; 0x0a
    1926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	9e 83       	std	Y+6, r25	; 0x06
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	9e 81       	ldd	r25, Y+6	; 0x06
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <LCD_voidSendCommand+0x206>
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , LOW) ;
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	62 e0       	ldi	r22, 0x02	; 2
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

}
    1950:	6d 96       	adiw	r28, 0x1d	; 29
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <LCD_voidWriteData>:
void LCD_voidWriteData (u8  COPY_LCD_WRITE)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	6d 97       	sbiw	r28, 0x1d	; 29
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	8d 8f       	std	Y+29, r24	; 0x1d

	// disable Enable bin
	DIO_SetPinValue (LCD_CTRL_PORT,LCD_EN,LOW);
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	62 e0       	ldi	r22, 0x02	; 2
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//RS COMMAND : HIGH
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RS , HIGH) ;
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	//_delay_ms(1) ;

	//RW COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RW , LOW) ;
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	61 e0       	ldi	r22, 0x01	; 1
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	//_delay_ms(1) ;

	// SEND THE COMMAND
	DIO_SetPortValue (LCD_DATA_PORT ,COPY_LCD_WRITE) ;
    1996:	83 e0       	ldi	r24, 0x03	; 3
    1998:	6d 8d       	ldd	r22, Y+29	; 0x1d
    199a:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a0 e8       	ldi	r26, 0x80	; 128
    19a4:	bf e3       	ldi	r27, 0x3F	; 63
    19a6:	89 8f       	std	Y+25, r24	; 0x19
    19a8:	9a 8f       	std	Y+26, r25	; 0x1a
    19aa:	ab 8f       	std	Y+27, r26	; 0x1b
    19ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	69 8d       	ldd	r22, Y+25	; 0x19
    19b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a ef       	ldi	r20, 0xFA	; 250
    19bc:	54 e4       	ldi	r21, 0x44	; 68
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8d 8b       	std	Y+21, r24	; 0x15
    19c8:	9e 8b       	std	Y+22, r25	; 0x16
    19ca:	af 8b       	std	Y+23, r26	; 0x17
    19cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ce:	6d 89       	ldd	r22, Y+21	; 0x15
    19d0:	7e 89       	ldd	r23, Y+22	; 0x16
    19d2:	8f 89       	ldd	r24, Y+23	; 0x17
    19d4:	98 8d       	ldd	r25, Y+24	; 0x18
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <LCD_voidWriteData+0x8e>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9c 8b       	std	Y+20, r25	; 0x14
    19ec:	8b 8b       	std	Y+19, r24	; 0x13
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <LCD_voidWriteData+0x10c>
	else if (__tmp > 65535)
    19f0:	6d 89       	ldd	r22, Y+21	; 0x15
    19f2:	7e 89       	ldd	r23, Y+22	; 0x16
    19f4:	8f 89       	ldd	r24, Y+23	; 0x17
    19f6:	98 8d       	ldd	r25, Y+24	; 0x18
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	4c f5       	brge	.+82     	; 0x1a5a <LCD_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	69 8d       	ldd	r22, Y+25	; 0x19
    1a0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9c 8b       	std	Y+20, r25	; 0x14
    1a2e:	8b 8b       	std	Y+19, r24	; 0x13
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <LCD_voidWriteData+0xee>
    1a32:	88 ec       	ldi	r24, 0xC8	; 200
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9a 8b       	std	Y+18, r25	; 0x12
    1a38:	89 8b       	std	Y+17, r24	; 0x11
    1a3a:	89 89       	ldd	r24, Y+17	; 0x11
    1a3c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_voidWriteData+0xdc>
    1a42:	9a 8b       	std	Y+18, r25	; 0x12
    1a44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	8b 89       	ldd	r24, Y+19	; 0x13
    1a48:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	9c 8b       	std	Y+20, r25	; 0x14
    1a4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a50:	8b 89       	ldd	r24, Y+19	; 0x13
    1a52:	9c 89       	ldd	r25, Y+20	; 0x14
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <LCD_voidWriteData+0xd0>
    1a58:	14 c0       	rjmp	.+40     	; 0x1a82 <LCD_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a60:	98 8d       	ldd	r25, Y+24	; 0x18
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9c 8b       	std	Y+20, r25	; 0x14
    1a6c:	8b 8b       	std	Y+19, r24	; 0x13
    1a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a70:	9c 89       	ldd	r25, Y+20	; 0x14
    1a72:	98 8b       	std	Y+16, r25	; 0x10
    1a74:	8f 87       	std	Y+15, r24	; 0x0f
    1a76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a78:	98 89       	ldd	r25, Y+16	; 0x10
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_voidWriteData+0x118>
    1a7e:	98 8b       	std	Y+16, r25	; 0x10
    1a80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , HIGH) ;
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	62 e0       	ldi	r22, 0x02	; 2
    1a86:	41 e0       	ldi	r20, 0x01	; 1
    1a88:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e8       	ldi	r26, 0x80	; 128
    1a92:	bf e3       	ldi	r27, 0x3F	; 63
    1a94:	8b 87       	std	Y+11, r24	; 0x0b
    1a96:	9c 87       	std	Y+12, r25	; 0x0c
    1a98:	ad 87       	std	Y+13, r26	; 0x0d
    1a9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	4a ef       	ldi	r20, 0xFA	; 250
    1aaa:	54 e4       	ldi	r21, 0x44	; 68
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	8f 83       	std	Y+7, r24	; 0x07
    1ab6:	98 87       	std	Y+8, r25	; 0x08
    1ab8:	a9 87       	std	Y+9, r26	; 0x09
    1aba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1abc:	6f 81       	ldd	r22, Y+7	; 0x07
    1abe:	78 85       	ldd	r23, Y+8	; 0x08
    1ac0:	89 85       	ldd	r24, Y+9	; 0x09
    1ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	5f e3       	ldi	r21, 0x3F	; 63
    1acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad0:	88 23       	and	r24, r24
    1ad2:	2c f4       	brge	.+10     	; 0x1ade <LCD_voidWriteData+0x17c>
		__ticks = 1;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
    1adc:	3f c0       	rjmp	.+126    	; 0x1b5c <LCD_voidWriteData+0x1fa>
	else if (__tmp > 65535)
    1ade:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae0:	78 85       	ldd	r23, Y+8	; 0x08
    1ae2:	89 85       	ldd	r24, Y+9	; 0x09
    1ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	3f ef       	ldi	r19, 0xFF	; 255
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	57 e4       	ldi	r21, 0x47	; 71
    1aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	4c f5       	brge	.+82     	; 0x1b48 <LCD_voidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e2       	ldi	r20, 0x20	; 32
    1b04:	51 e4       	ldi	r21, 0x41	; 65
    1b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
    1b1e:	0f c0       	rjmp	.+30     	; 0x1b3e <LCD_voidWriteData+0x1dc>
    1b20:	88 ec       	ldi	r24, 0xC8	; 200
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	8b 83       	std	Y+3, r24	; 0x03
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <LCD_voidWriteData+0x1ca>
    1b30:	9c 83       	std	Y+4, r25	; 0x04
    1b32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	9e 81       	ldd	r25, Y+6	; 0x06
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	69 f7       	brne	.-38     	; 0x1b20 <LCD_voidWriteData+0x1be>
    1b46:	14 c0       	rjmp	.+40     	; 0x1b70 <LCD_voidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b48:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4a:	78 85       	ldd	r23, Y+8	; 0x08
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	9a 83       	std	Y+2, r25	; 0x02
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	9a 81       	ldd	r25, Y+2	; 0x02
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <LCD_voidWriteData+0x206>
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , LOW) ;
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	62 e0       	ldi	r22, 0x02	; 2
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

}
    1b7a:	6d 96       	adiw	r28, 0x1d	; 29
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 LCD_XPOS , u8 LCD_YPOS)
{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <LCD_voidGoToXY+0x6>
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	6a 83       	std	Y+2, r22	; 0x02
	// SET DD RAM ADRESS
	LCD_voidSendCommand((LCD_XPOS * 0x40 + LCD_YPOS) | 0b10000000);
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	00 24       	eor	r0, r0
    1ba2:	96 95       	lsr	r25
    1ba4:	87 95       	ror	r24
    1ba6:	07 94       	ror	r0
    1ba8:	96 95       	lsr	r25
    1baa:	87 95       	ror	r24
    1bac:	07 94       	ror	r0
    1bae:	98 2f       	mov	r25, r24
    1bb0:	80 2d       	mov	r24, r0
    1bb2:	98 2f       	mov	r25, r24
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	89 0f       	add	r24, r25
    1bb8:	80 68       	ori	r24, 0x80	; 128
    1bba:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>

}
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <LCD_voidWriteSpecialChar>:

void LCD_voidWriteSpecialChar(u8 *pattern , u8 block_no, u8 x, u8 y)
{
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	27 97       	sbiw	r28, 0x07	; 7
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	9c 83       	std	Y+4, r25	; 0x04
    1bde:	8b 83       	std	Y+3, r24	; 0x03
    1be0:	6d 83       	std	Y+5, r22	; 0x05
    1be2:	4e 83       	std	Y+6, r20	; 0x06
    1be4:	2f 83       	std	Y+7, r18	; 0x07
	// variable for loop
	u8 i;

	// every block is 8 bytes so calculate address by multiply it with 8
	u8 address = 8 * block_no ;
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	89 83       	std	Y+1, r24	; 0x01

	// set CG RAM address from data sheet (00 01 A5-A0)
	LCD_voidSendCommand(address | 0b01000000);
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	80 64       	ori	r24, 0x40	; 64
    1bfe:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>

	// LOOP to write data from CGRAM to DDRAM (array of 8 bytes)
	for(i = 0 ; i< 8; i++)
    1c02:	1a 82       	std	Y+2, r1	; 0x02
    1c04:	0e c0       	rjmp	.+28     	; 0x1c22 <LCD_voidWriteSpecialChar+0x5a>
	{
		LCD_voidWriteData(pattern[i]);
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	fc 01       	movw	r30, r24
    1c12:	e2 0f       	add	r30, r18
    1c14:	f3 1f       	adc	r31, r19
    1c16:	80 81       	ld	r24, Z
    1c18:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LCD_voidWriteData>

	// set CG RAM address from data sheet (00 01 A5-A0)
	LCD_voidSendCommand(address | 0b01000000);

	// LOOP to write data from CGRAM to DDRAM (array of 8 bytes)
	for(i = 0 ; i< 8; i++)
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	8f 5f       	subi	r24, 0xFF	; 255
    1c20:	8a 83       	std	Y+2, r24	; 0x02
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	88 30       	cpi	r24, 0x08	; 8
    1c26:	78 f3       	brcs	.-34     	; 0x1c06 <LCD_voidWriteSpecialChar+0x3e>
	{
		LCD_voidWriteData(pattern[i]);
	}
	// set DDRAM to write on LCD by using GO TO XY
	LCD_voidGoToXY(x , y);
    1c28:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>

	//display block number from CGRAM
	LCD_voidWriteData(block_no);
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LCD_voidWriteData>
}
    1c36:	27 96       	adiw	r28, 0x07	; 7
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <LCD_voidWriteNumber>:
void LCD_voidWriteNumber(u16 Number)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	2e 97       	sbiw	r28, 0x0e	; 14
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	98 87       	std	Y+8, r25	; 0x08
    1c5e:	8f 83       	std	Y+7, r24	; 0x07
	for(i = 0 ; i<num_digit ; i++)
	{
		LCD_voidWriteData(arr[i]) ;
	}

}
    1c60:	2d b7       	in	r18, 0x3d	; 61
    1c62:	3e b7       	in	r19, 0x3e	; 62
    1c64:	3e 87       	std	Y+14, r19	; 0x0e
    1c66:	2d 87       	std	Y+13, r18	; 0x0d

	//display block number from CGRAM
	LCD_voidWriteData(block_no);
}
void LCD_voidWriteNumber(u16 Number)
{
    1c68:	8d b7       	in	r24, 0x3d	; 61
    1c6a:	9e b7       	in	r25, 0x3e	; 62
    1c6c:	9a 87       	std	Y+10, r25	; 0x0a
    1c6e:	89 87       	std	Y+9, r24	; 0x09
	u8 num_digit = 0 ;
    1c70:	1c 82       	std	Y+4, r1	; 0x04
	u8 i;
	u16 copy_number = Number;
    1c72:	8f 81       	ldd	r24, Y+7	; 0x07
    1c74:	98 85       	ldd	r25, Y+8	; 0x08
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	0d c0       	rjmp	.+26     	; 0x1c96 <LCD_voidWriteNumber+0x4e>

	while(copy_number != 0)
	{
		copy_number /= 10 ;
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c80:	2a e0       	ldi	r18, 0x0A	; 10
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	b9 01       	movw	r22, r18
    1c86:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__udivmodhi4>
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
		num_digit += 1;
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	8c 83       	std	Y+4, r24	; 0x04
{
	u8 num_digit = 0 ;
	u8 i;
	u16 copy_number = Number;

	while(copy_number != 0)
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	79 f7       	brne	.-34     	; 0x1c7c <LCD_voidWriteNumber+0x34>
	{
		copy_number /= 10 ;
		num_digit += 1;
	}

	u8 arr[num_digit] ;
    1c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	2d b7       	in	r18, 0x3d	; 61
    1ca6:	3e b7       	in	r19, 0x3e	; 62
    1ca8:	28 1b       	sub	r18, r24
    1caa:	39 0b       	sbc	r19, r25
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	3e bf       	out	0x3e, r19	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	2d bf       	out	0x3d, r18	; 61
    1cb6:	8d b7       	in	r24, 0x3d	; 61
    1cb8:	9e b7       	in	r25, 0x3e	; 62
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	9c 87       	std	Y+12, r25	; 0x0c
    1cbe:	8b 87       	std	Y+11, r24	; 0x0b
    1cc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cc4:	00 96       	adiw	r24, 0x00	; 0
    1cc6:	9c 87       	std	Y+12, r25	; 0x0c
    1cc8:	8b 87       	std	Y+11, r24	; 0x0b
    1cca:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ccc:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cce:	3e 83       	std	Y+6, r19	; 0x06
    1cd0:	2d 83       	std	Y+5, r18	; 0x05

	for(i = num_digit ; i> 0 ; i--)
    1cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
    1cd6:	20 c0       	rjmp	.+64     	; 0x1d18 <LCD_voidWriteNumber+0xd0>
	{
		arr[i-1] = (u8)((Number % 10) +'0') ;
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	fc 01       	movw	r30, r24
    1ce0:	31 97       	sbiw	r30, 0x01	; 1
    1ce2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce4:	98 85       	ldd	r25, Y+8	; 0x08
    1ce6:	2a e0       	ldi	r18, 0x0A	; 10
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	b9 01       	movw	r22, r18
    1cec:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__udivmodhi4>
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	20 5d       	subi	r18, 0xD0	; 208
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	e8 0f       	add	r30, r24
    1cfa:	f9 1f       	adc	r31, r25
    1cfc:	20 83       	st	Z, r18
		Number = Number /10 ;
    1cfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1d00:	98 85       	ldd	r25, Y+8	; 0x08
    1d02:	2a e0       	ldi	r18, 0x0A	; 10
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	b9 01       	movw	r22, r18
    1d08:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__udivmodhi4>
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	98 87       	std	Y+8, r25	; 0x08
    1d10:	8f 83       	std	Y+7, r24	; 0x07
		num_digit += 1;
	}

	u8 arr[num_digit] ;

	for(i = num_digit ; i> 0 ; i--)
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	81 50       	subi	r24, 0x01	; 1
    1d16:	8b 83       	std	Y+3, r24	; 0x03
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	88 23       	and	r24, r24
    1d1c:	e9 f6       	brne	.-70     	; 0x1cd8 <LCD_voidWriteNumber+0x90>
		arr[i-1] = (u8)((Number % 10) +'0') ;
		Number = Number /10 ;
	}


	for(i = 0 ; i<num_digit ; i++)
    1d1e:	1b 82       	std	Y+3, r1	; 0x03
    1d20:	0e c0       	rjmp	.+28     	; 0x1d3e <LCD_voidWriteNumber+0xf6>
	{
		LCD_voidWriteData(arr[i]) ;
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	e2 0f       	add	r30, r18
    1d30:	f3 1f       	adc	r31, r19
    1d32:	80 81       	ld	r24, Z
    1d34:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LCD_voidWriteData>
		arr[i-1] = (u8)((Number % 10) +'0') ;
		Number = Number /10 ;
	}


	for(i = 0 ; i<num_digit ; i++)
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
    1d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d40:	8c 81       	ldd	r24, Y+4	; 0x04
    1d42:	98 17       	cp	r25, r24
    1d44:	70 f3       	brcs	.-36     	; 0x1d22 <LCD_voidWriteNumber+0xda>
    1d46:	89 85       	ldd	r24, Y+9	; 0x09
    1d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	9e bf       	out	0x3e, r25	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	8d bf       	out	0x3d, r24	; 61
	{
		LCD_voidWriteData(arr[i]) ;
	}

}
    1d54:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d56:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	3e bf       	out	0x3e, r19	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	2d bf       	out	0x3d, r18	; 61
    1d62:	2e 96       	adiw	r28, 0x0e	; 14
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <LCD_Display>:

void LCD_Display(u8 word[])
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <LCD_Display+0x6>
    1d7a:	0f 92       	push	r0
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	9b 83       	std	Y+3, r25	; 0x03
    1d82:	8a 83       	std	Y+2, r24	; 0x02
	u8 i ;

	for(i = 0; word[i]!=0 ;i++)
    1d84:	19 82       	std	Y+1, r1	; 0x01
    1d86:	0e c0       	rjmp	.+28     	; 0x1da4 <LCD_Display+0x30>
	{
		LCD_voidWriteData(word[i]);
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	9b 81       	ldd	r25, Y+3	; 0x03
    1d92:	fc 01       	movw	r30, r24
    1d94:	e2 0f       	add	r30, r18
    1d96:	f3 1f       	adc	r31, r19
    1d98:	80 81       	ld	r24, Z
    1d9a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LCD_voidWriteData>

void LCD_Display(u8 word[])
{
	u8 i ;

	for(i = 0; word[i]!=0 ;i++)
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	8f 5f       	subi	r24, 0xFF	; 255
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	9b 81       	ldd	r25, Y+3	; 0x03
    1dae:	fc 01       	movw	r30, r24
    1db0:	e2 0f       	add	r30, r18
    1db2:	f3 1f       	adc	r31, r19
    1db4:	80 81       	ld	r24, Z
    1db6:	88 23       	and	r24, r24
    1db8:	39 f7       	brne	.-50     	; 0x1d88 <LCD_Display+0x14>
	{
		LCD_voidWriteData(word[i]);
	}
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <SEVENSEGMENT_voidSetNumber>:
#include"LIBS\STD_TYPES.h"
#include"SEVEN_SEGMENT_INT.h"
#include"DIO_INT.h"

void SEVENSEGMENT_voidSetNumber(u8 copy_u8Number , u8 copy_u8SevenSegPort)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <SEVENSEGMENT_voidSetNumber+0x6>
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <SEVENSEGMENT_voidSetNumber+0x8>
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Number)
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	3c 83       	std	Y+4, r19	; 0x04
    1dde:	2b 83       	std	Y+3, r18	; 0x03
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	9c 81       	ldd	r25, Y+4	; 0x04
    1de4:	85 30       	cpi	r24, 0x05	; 5
    1de6:	91 05       	cpc	r25, r1
    1de8:	09 f4       	brne	.+2      	; 0x1dec <SEVENSEGMENT_voidSetNumber+0x26>
    1dea:	65 c0       	rjmp	.+202    	; 0x1eb6 <SEVENSEGMENT_voidSetNumber+0xf0>
    1dec:	2b 81       	ldd	r18, Y+3	; 0x03
    1dee:	3c 81       	ldd	r19, Y+4	; 0x04
    1df0:	26 30       	cpi	r18, 0x06	; 6
    1df2:	31 05       	cpc	r19, r1
    1df4:	14 f5       	brge	.+68     	; 0x1e3a <SEVENSEGMENT_voidSetNumber+0x74>
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfa:	82 30       	cpi	r24, 0x02	; 2
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <SEVENSEGMENT_voidSetNumber+0x3c>
    1e00:	4b c0       	rjmp	.+150    	; 0x1e98 <SEVENSEGMENT_voidSetNumber+0xd2>
    1e02:	2b 81       	ldd	r18, Y+3	; 0x03
    1e04:	3c 81       	ldd	r19, Y+4	; 0x04
    1e06:	23 30       	cpi	r18, 0x03	; 3
    1e08:	31 05       	cpc	r19, r1
    1e0a:	54 f4       	brge	.+20     	; 0x1e20 <SEVENSEGMENT_voidSetNumber+0x5a>
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	c1 f1       	breq	.+112    	; 0x1e84 <SEVENSEGMENT_voidSetNumber+0xbe>
    1e14:	2b 81       	ldd	r18, Y+3	; 0x03
    1e16:	3c 81       	ldd	r19, Y+4	; 0x04
    1e18:	21 30       	cpi	r18, 0x01	; 1
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	c1 f1       	breq	.+112    	; 0x1e8e <SEVENSEGMENT_voidSetNumber+0xc8>
    1e1e:	63 c0       	rjmp	.+198    	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	83 30       	cpi	r24, 0x03	; 3
    1e26:	91 05       	cpc	r25, r1
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <SEVENSEGMENT_voidSetNumber+0x66>
    1e2a:	3b c0       	rjmp	.+118    	; 0x1ea2 <SEVENSEGMENT_voidSetNumber+0xdc>
    1e2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e30:	24 30       	cpi	r18, 0x04	; 4
    1e32:	31 05       	cpc	r19, r1
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <SEVENSEGMENT_voidSetNumber+0x72>
    1e36:	3a c0       	rjmp	.+116    	; 0x1eac <SEVENSEGMENT_voidSetNumber+0xe6>
    1e38:	56 c0       	rjmp	.+172    	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	88 30       	cpi	r24, 0x08	; 8
    1e40:	91 05       	cpc	r25, r1
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <SEVENSEGMENT_voidSetNumber+0x80>
    1e44:	47 c0       	rjmp	.+142    	; 0x1ed4 <SEVENSEGMENT_voidSetNumber+0x10e>
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	29 30       	cpi	r18, 0x09	; 9
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	5c f4       	brge	.+22     	; 0x1e66 <SEVENSEGMENT_voidSetNumber+0xa0>
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	86 30       	cpi	r24, 0x06	; 6
    1e56:	91 05       	cpc	r25, r1
    1e58:	99 f1       	breq	.+102    	; 0x1ec0 <SEVENSEGMENT_voidSetNumber+0xfa>
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	27 30       	cpi	r18, 0x07	; 7
    1e60:	31 05       	cpc	r19, r1
    1e62:	99 f1       	breq	.+102    	; 0x1eca <SEVENSEGMENT_voidSetNumber+0x104>
    1e64:	40 c0       	rjmp	.+128    	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	89 30       	cpi	r24, 0x09	; 9
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	b9 f1       	breq	.+110    	; 0x1ede <SEVENSEGMENT_voidSetNumber+0x118>
    1e70:	2b 81       	ldd	r18, Y+3	; 0x03
    1e72:	3c 81       	ldd	r19, Y+4	; 0x04
    1e74:	20 32       	cpi	r18, 0x20	; 32
    1e76:	31 05       	cpc	r19, r1
    1e78:	b1 f5       	brne	.+108    	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>
	{
		case ' ':

			DIO_SetPortValue(copy_u8SevenSegPort , 0b00000000);
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1e82:	31 c0       	rjmp	.+98     	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>

		break;

		case 0:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b00111111);
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	6f e3       	ldi	r22, 0x3F	; 63
    1e88:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1e8c:	2c c0       	rjmp	.+88     	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>

		break;

		case 1:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b00000110);
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	66 e0       	ldi	r22, 0x06	; 6
    1e92:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1e96:	27 c0       	rjmp	.+78     	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>

		break;

		case 2:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01011011);
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	6b e5       	ldi	r22, 0x5B	; 91
    1e9c:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1ea0:	22 c0       	rjmp	.+68     	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>

		break;

		case 3:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01001111);
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	6f e4       	ldi	r22, 0x4F	; 79
    1ea6:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1eaa:	1d c0       	rjmp	.+58     	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>

		break;

		case 4:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01100110);
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	66 e6       	ldi	r22, 0x66	; 102
    1eb0:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1eb4:	18 c0       	rjmp	.+48     	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>

		break;

		case 5:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01101101);
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	6d e6       	ldi	r22, 0x6D	; 109
    1eba:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1ebe:	13 c0       	rjmp	.+38     	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>

		break;

		case 6:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01111101);
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	6d e7       	ldi	r22, 0x7D	; 125
    1ec4:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1ec8:	0e c0       	rjmp	.+28     	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>

		break;

		case 7:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b00000111);
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	67 e0       	ldi	r22, 0x07	; 7
    1ece:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1ed2:	09 c0       	rjmp	.+18     	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>

		break;

		case 8:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01111111);
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	6f e7       	ldi	r22, 0x7F	; 127
    1ed8:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>
    1edc:	04 c0       	rjmp	.+8      	; 0x1ee6 <SEVENSEGMENT_voidSetNumber+0x120>

		break;

		case 9:

			DIO_SetPortValue(copy_u8SevenSegPort , 0b01101111);
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	6f e6       	ldi	r22, 0x6F	; 111
    1ee2:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>

		break;
	}
}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <STEPPER_voidRotateClockWise>:
#include"LCD_INT.h"

#include <util\delay.h>

void STEPPER_voidRotateClockWise(void)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	e8 97       	sbiw	r28, 0x38	; 56
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
	// first excitation : set blue wire low
	DIO_SetPinValue(STEPPER_PORT, COIL0 , LOW);
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	67 e0       	ldi	r22, 0x07	; 7
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//set pink , yellow , orange : HIGH
	DIO_SetPinValue(STEPPER_PORT, COIL1 , HIGH);
    1f12:	82 e0       	ldi	r24, 0x02	; 2
    1f14:	66 e0       	ldi	r22, 0x06	; 6
    1f16:	41 e0       	ldi	r20, 0x01	; 1
    1f18:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL2 , HIGH);
    1f1c:	82 e0       	ldi	r24, 0x02	; 2
    1f1e:	65 e0       	ldi	r22, 0x05	; 5
    1f20:	41 e0       	ldi	r20, 0x01	; 1
    1f22:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL3 , HIGH);
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	64 e0       	ldi	r22, 0x04	; 4
    1f2a:	41 e0       	ldi	r20, 0x01	; 1
    1f2c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a0 e2       	ldi	r26, 0x20	; 32
    1f36:	b1 e4       	ldi	r27, 0x41	; 65
    1f38:	8d ab       	std	Y+53, r24	; 0x35
    1f3a:	9e ab       	std	Y+54, r25	; 0x36
    1f3c:	af ab       	std	Y+55, r26	; 0x37
    1f3e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f40:	6d a9       	ldd	r22, Y+53	; 0x35
    1f42:	7e a9       	ldd	r23, Y+54	; 0x36
    1f44:	8f a9       	ldd	r24, Y+55	; 0x37
    1f46:	98 ad       	ldd	r25, Y+56	; 0x38
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a ef       	ldi	r20, 0xFA	; 250
    1f4e:	54 e4       	ldi	r21, 0x44	; 68
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	89 ab       	std	Y+49, r24	; 0x31
    1f5a:	9a ab       	std	Y+50, r25	; 0x32
    1f5c:	ab ab       	std	Y+51, r26	; 0x33
    1f5e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f60:	69 a9       	ldd	r22, Y+49	; 0x31
    1f62:	7a a9       	ldd	r23, Y+50	; 0x32
    1f64:	8b a9       	ldd	r24, Y+51	; 0x33
    1f66:	9c a9       	ldd	r25, Y+52	; 0x34
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <STEPPER_voidRotateClockWise+0x8e>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	98 ab       	std	Y+48, r25	; 0x30
    1f7e:	8f a7       	std	Y+47, r24	; 0x2f
    1f80:	3f c0       	rjmp	.+126    	; 0x2000 <STEPPER_voidRotateClockWise+0x10c>
	else if (__tmp > 65535)
    1f82:	69 a9       	ldd	r22, Y+49	; 0x31
    1f84:	7a a9       	ldd	r23, Y+50	; 0x32
    1f86:	8b a9       	ldd	r24, Y+51	; 0x33
    1f88:	9c a9       	ldd	r25, Y+52	; 0x34
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	4c f5       	brge	.+82     	; 0x1fec <STEPPER_voidRotateClockWise+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f9c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1fa0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e2       	ldi	r20, 0x20	; 32
    1fa8:	51 e4       	ldi	r21, 0x41	; 65
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	98 ab       	std	Y+48, r25	; 0x30
    1fc0:	8f a7       	std	Y+47, r24	; 0x2f
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <STEPPER_voidRotateClockWise+0xee>
    1fc4:	88 ec       	ldi	r24, 0xC8	; 200
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9e a7       	std	Y+46, r25	; 0x2e
    1fca:	8d a7       	std	Y+45, r24	; 0x2d
    1fcc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fce:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <STEPPER_voidRotateClockWise+0xdc>
    1fd4:	9e a7       	std	Y+46, r25	; 0x2e
    1fd6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fda:	98 a9       	ldd	r25, Y+48	; 0x30
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	98 ab       	std	Y+48, r25	; 0x30
    1fe0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	69 f7       	brne	.-38     	; 0x1fc4 <STEPPER_voidRotateClockWise+0xd0>
    1fea:	14 c0       	rjmp	.+40     	; 0x2014 <STEPPER_voidRotateClockWise+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fec:	69 a9       	ldd	r22, Y+49	; 0x31
    1fee:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	98 ab       	std	Y+48, r25	; 0x30
    1ffe:	8f a7       	std	Y+47, r24	; 0x2f
    2000:	8f a5       	ldd	r24, Y+47	; 0x2f
    2002:	98 a9       	ldd	r25, Y+48	; 0x30
    2004:	9c a7       	std	Y+44, r25	; 0x2c
    2006:	8b a7       	std	Y+43, r24	; 0x2b
    2008:	8b a5       	ldd	r24, Y+43	; 0x2b
    200a:	9c a5       	ldd	r25, Y+44	; 0x2c
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <STEPPER_voidRotateClockWise+0x118>
    2010:	9c a7       	std	Y+44, r25	; 0x2c
    2012:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(10);


	// second excitation : set PINK wire low
	DIO_SetPinValue(STEPPER_PORT, COIL1 , LOW);
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	66 e0       	ldi	r22, 0x06	; 6
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//set pink , yellow , orange : HIGH
	DIO_SetPinValue(STEPPER_PORT, COIL0 , HIGH);
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	67 e0       	ldi	r22, 0x07	; 7
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL2 , HIGH);
    2028:	82 e0       	ldi	r24, 0x02	; 2
    202a:	65 e0       	ldi	r22, 0x05	; 5
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL3 , HIGH);
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	64 e0       	ldi	r22, 0x04	; 4
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a0 e2       	ldi	r26, 0x20	; 32
    2042:	b1 e4       	ldi	r27, 0x41	; 65
    2044:	8f a3       	std	Y+39, r24	; 0x27
    2046:	98 a7       	std	Y+40, r25	; 0x28
    2048:	a9 a7       	std	Y+41, r26	; 0x29
    204a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204c:	6f a1       	ldd	r22, Y+39	; 0x27
    204e:	78 a5       	ldd	r23, Y+40	; 0x28
    2050:	89 a5       	ldd	r24, Y+41	; 0x29
    2052:	9a a5       	ldd	r25, Y+42	; 0x2a
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4a ef       	ldi	r20, 0xFA	; 250
    205a:	54 e4       	ldi	r21, 0x44	; 68
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	8b a3       	std	Y+35, r24	; 0x23
    2066:	9c a3       	std	Y+36, r25	; 0x24
    2068:	ad a3       	std	Y+37, r26	; 0x25
    206a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    206c:	6b a1       	ldd	r22, Y+35	; 0x23
    206e:	7c a1       	ldd	r23, Y+36	; 0x24
    2070:	8d a1       	ldd	r24, Y+37	; 0x25
    2072:	9e a1       	ldd	r25, Y+38	; 0x26
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e8       	ldi	r20, 0x80	; 128
    207a:	5f e3       	ldi	r21, 0x3F	; 63
    207c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2080:	88 23       	and	r24, r24
    2082:	2c f4       	brge	.+10     	; 0x208e <STEPPER_voidRotateClockWise+0x19a>
		__ticks = 1;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9a a3       	std	Y+34, r25	; 0x22
    208a:	89 a3       	std	Y+33, r24	; 0x21
    208c:	3f c0       	rjmp	.+126    	; 0x210c <STEPPER_voidRotateClockWise+0x218>
	else if (__tmp > 65535)
    208e:	6b a1       	ldd	r22, Y+35	; 0x23
    2090:	7c a1       	ldd	r23, Y+36	; 0x24
    2092:	8d a1       	ldd	r24, Y+37	; 0x25
    2094:	9e a1       	ldd	r25, Y+38	; 0x26
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	3f ef       	ldi	r19, 0xFF	; 255
    209a:	4f e7       	ldi	r20, 0x7F	; 127
    209c:	57 e4       	ldi	r21, 0x47	; 71
    209e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a2:	18 16       	cp	r1, r24
    20a4:	4c f5       	brge	.+82     	; 0x20f8 <STEPPER_voidRotateClockWise+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a6:	6f a1       	ldd	r22, Y+39	; 0x27
    20a8:	78 a5       	ldd	r23, Y+40	; 0x28
    20aa:	89 a5       	ldd	r24, Y+41	; 0x29
    20ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e2       	ldi	r20, 0x20	; 32
    20b4:	51 e4       	ldi	r21, 0x41	; 65
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9a a3       	std	Y+34, r25	; 0x22
    20cc:	89 a3       	std	Y+33, r24	; 0x21
    20ce:	0f c0       	rjmp	.+30     	; 0x20ee <STEPPER_voidRotateClockWise+0x1fa>
    20d0:	88 ec       	ldi	r24, 0xC8	; 200
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	98 a3       	std	Y+32, r25	; 0x20
    20d6:	8f 8f       	std	Y+31, r24	; 0x1f
    20d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20da:	98 a1       	ldd	r25, Y+32	; 0x20
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <STEPPER_voidRotateClockWise+0x1e8>
    20e0:	98 a3       	std	Y+32, r25	; 0x20
    20e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e4:	89 a1       	ldd	r24, Y+33	; 0x21
    20e6:	9a a1       	ldd	r25, Y+34	; 0x22
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	9a a3       	std	Y+34, r25	; 0x22
    20ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ee:	89 a1       	ldd	r24, Y+33	; 0x21
    20f0:	9a a1       	ldd	r25, Y+34	; 0x22
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	69 f7       	brne	.-38     	; 0x20d0 <STEPPER_voidRotateClockWise+0x1dc>
    20f6:	14 c0       	rjmp	.+40     	; 0x2120 <STEPPER_voidRotateClockWise+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f8:	6b a1       	ldd	r22, Y+35	; 0x23
    20fa:	7c a1       	ldd	r23, Y+36	; 0x24
    20fc:	8d a1       	ldd	r24, Y+37	; 0x25
    20fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9a a3       	std	Y+34, r25	; 0x22
    210a:	89 a3       	std	Y+33, r24	; 0x21
    210c:	89 a1       	ldd	r24, Y+33	; 0x21
    210e:	9a a1       	ldd	r25, Y+34	; 0x22
    2110:	9e 8f       	std	Y+30, r25	; 0x1e
    2112:	8d 8f       	std	Y+29, r24	; 0x1d
    2114:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2116:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <STEPPER_voidRotateClockWise+0x224>
    211c:	9e 8f       	std	Y+30, r25	; 0x1e
    211e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(10);


	// third excitation : set yellow wire low
	DIO_SetPinValue(STEPPER_PORT, COIL2 , LOW);
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	65 e0       	ldi	r22, 0x05	; 5
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//set pink , yellow , orange : HIGH
	DIO_SetPinValue(STEPPER_PORT, COIL0 , HIGH);
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	67 e0       	ldi	r22, 0x07	; 7
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL1 , HIGH);
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	66 e0       	ldi	r22, 0x06	; 6
    2138:	41 e0       	ldi	r20, 0x01	; 1
    213a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL3 , HIGH);
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	64 e0       	ldi	r22, 0x04	; 4
    2142:	41 e0       	ldi	r20, 0x01	; 1
    2144:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a0 e2       	ldi	r26, 0x20	; 32
    214e:	b1 e4       	ldi	r27, 0x41	; 65
    2150:	89 8f       	std	Y+25, r24	; 0x19
    2152:	9a 8f       	std	Y+26, r25	; 0x1a
    2154:	ab 8f       	std	Y+27, r26	; 0x1b
    2156:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2158:	69 8d       	ldd	r22, Y+25	; 0x19
    215a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    215c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4a ef       	ldi	r20, 0xFA	; 250
    2166:	54 e4       	ldi	r21, 0x44	; 68
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8d 8b       	std	Y+21, r24	; 0x15
    2172:	9e 8b       	std	Y+22, r25	; 0x16
    2174:	af 8b       	std	Y+23, r26	; 0x17
    2176:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2178:	6d 89       	ldd	r22, Y+21	; 0x15
    217a:	7e 89       	ldd	r23, Y+22	; 0x16
    217c:	8f 89       	ldd	r24, Y+23	; 0x17
    217e:	98 8d       	ldd	r25, Y+24	; 0x18
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <STEPPER_voidRotateClockWise+0x2a6>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9c 8b       	std	Y+20, r25	; 0x14
    2196:	8b 8b       	std	Y+19, r24	; 0x13
    2198:	3f c0       	rjmp	.+126    	; 0x2218 <STEPPER_voidRotateClockWise+0x324>
	else if (__tmp > 65535)
    219a:	6d 89       	ldd	r22, Y+21	; 0x15
    219c:	7e 89       	ldd	r23, Y+22	; 0x16
    219e:	8f 89       	ldd	r24, Y+23	; 0x17
    21a0:	98 8d       	ldd	r25, Y+24	; 0x18
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	4c f5       	brge	.+82     	; 0x2204 <STEPPER_voidRotateClockWise+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	69 8d       	ldd	r22, Y+25	; 0x19
    21b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9c 8b       	std	Y+20, r25	; 0x14
    21d8:	8b 8b       	std	Y+19, r24	; 0x13
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <STEPPER_voidRotateClockWise+0x306>
    21dc:	88 ec       	ldi	r24, 0xC8	; 200
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9a 8b       	std	Y+18, r25	; 0x12
    21e2:	89 8b       	std	Y+17, r24	; 0x11
    21e4:	89 89       	ldd	r24, Y+17	; 0x11
    21e6:	9a 89       	ldd	r25, Y+18	; 0x12
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <STEPPER_voidRotateClockWise+0x2f4>
    21ec:	9a 8b       	std	Y+18, r25	; 0x12
    21ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	8b 89       	ldd	r24, Y+19	; 0x13
    21f2:	9c 89       	ldd	r25, Y+20	; 0x14
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9c 8b       	std	Y+20, r25	; 0x14
    21f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	8b 89       	ldd	r24, Y+19	; 0x13
    21fc:	9c 89       	ldd	r25, Y+20	; 0x14
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f7       	brne	.-38     	; 0x21dc <STEPPER_voidRotateClockWise+0x2e8>
    2202:	14 c0       	rjmp	.+40     	; 0x222c <STEPPER_voidRotateClockWise+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2204:	6d 89       	ldd	r22, Y+21	; 0x15
    2206:	7e 89       	ldd	r23, Y+22	; 0x16
    2208:	8f 89       	ldd	r24, Y+23	; 0x17
    220a:	98 8d       	ldd	r25, Y+24	; 0x18
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9c 8b       	std	Y+20, r25	; 0x14
    2216:	8b 8b       	std	Y+19, r24	; 0x13
    2218:	8b 89       	ldd	r24, Y+19	; 0x13
    221a:	9c 89       	ldd	r25, Y+20	; 0x14
    221c:	98 8b       	std	Y+16, r25	; 0x10
    221e:	8f 87       	std	Y+15, r24	; 0x0f
    2220:	8f 85       	ldd	r24, Y+15	; 0x0f
    2222:	98 89       	ldd	r25, Y+16	; 0x10
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <STEPPER_voidRotateClockWise+0x330>
    2228:	98 8b       	std	Y+16, r25	; 0x10
    222a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);



	// first excitation : set orange wire low
	DIO_SetPinValue(STEPPER_PORT, COIL3 , LOW);
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	64 e0       	ldi	r22, 0x04	; 4
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//set pink , yellow , orange : HIGH
	DIO_SetPinValue(STEPPER_PORT, COIL1 , HIGH);
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	66 e0       	ldi	r22, 0x06	; 6
    223a:	41 e0       	ldi	r20, 0x01	; 1
    223c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL2 , HIGH);
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	65 e0       	ldi	r22, 0x05	; 5
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL0 , HIGH);
    224a:	82 e0       	ldi	r24, 0x02	; 2
    224c:	67 e0       	ldi	r22, 0x07	; 7
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a0 e2       	ldi	r26, 0x20	; 32
    225a:	b1 e4       	ldi	r27, 0x41	; 65
    225c:	8b 87       	std	Y+11, r24	; 0x0b
    225e:	9c 87       	std	Y+12, r25	; 0x0c
    2260:	ad 87       	std	Y+13, r26	; 0x0d
    2262:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2264:	6b 85       	ldd	r22, Y+11	; 0x0b
    2266:	7c 85       	ldd	r23, Y+12	; 0x0c
    2268:	8d 85       	ldd	r24, Y+13	; 0x0d
    226a:	9e 85       	ldd	r25, Y+14	; 0x0e
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	4a ef       	ldi	r20, 0xFA	; 250
    2272:	54 e4       	ldi	r21, 0x44	; 68
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	8f 83       	std	Y+7, r24	; 0x07
    227e:	98 87       	std	Y+8, r25	; 0x08
    2280:	a9 87       	std	Y+9, r26	; 0x09
    2282:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2284:	6f 81       	ldd	r22, Y+7	; 0x07
    2286:	78 85       	ldd	r23, Y+8	; 0x08
    2288:	89 85       	ldd	r24, Y+9	; 0x09
    228a:	9a 85       	ldd	r25, Y+10	; 0x0a
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e8       	ldi	r20, 0x80	; 128
    2292:	5f e3       	ldi	r21, 0x3F	; 63
    2294:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2298:	88 23       	and	r24, r24
    229a:	2c f4       	brge	.+10     	; 0x22a6 <STEPPER_voidRotateClockWise+0x3b2>
		__ticks = 1;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	9e 83       	std	Y+6, r25	; 0x06
    22a2:	8d 83       	std	Y+5, r24	; 0x05
    22a4:	3f c0       	rjmp	.+126    	; 0x2324 <STEPPER_voidRotateClockWise+0x430>
	else if (__tmp > 65535)
    22a6:	6f 81       	ldd	r22, Y+7	; 0x07
    22a8:	78 85       	ldd	r23, Y+8	; 0x08
    22aa:	89 85       	ldd	r24, Y+9	; 0x09
    22ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	3f ef       	ldi	r19, 0xFF	; 255
    22b2:	4f e7       	ldi	r20, 0x7F	; 127
    22b4:	57 e4       	ldi	r21, 0x47	; 71
    22b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ba:	18 16       	cp	r1, r24
    22bc:	4c f5       	brge	.+82     	; 0x2310 <STEPPER_voidRotateClockWise+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22be:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e2       	ldi	r20, 0x20	; 32
    22cc:	51 e4       	ldi	r21, 0x41	; 65
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	bc 01       	movw	r22, r24
    22d8:	cd 01       	movw	r24, r26
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <STEPPER_voidRotateClockWise+0x412>
    22e8:	88 ec       	ldi	r24, 0xC8	; 200
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	9c 83       	std	Y+4, r25	; 0x04
    22ee:	8b 83       	std	Y+3, r24	; 0x03
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	9c 81       	ldd	r25, Y+4	; 0x04
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <STEPPER_voidRotateClockWise+0x400>
    22f8:	9c 83       	std	Y+4, r25	; 0x04
    22fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	69 f7       	brne	.-38     	; 0x22e8 <STEPPER_voidRotateClockWise+0x3f4>
    230e:	14 c0       	rjmp	.+40     	; 0x2338 <STEPPER_voidRotateClockWise+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2310:	6f 81       	ldd	r22, Y+7	; 0x07
    2312:	78 85       	ldd	r23, Y+8	; 0x08
    2314:	89 85       	ldd	r24, Y+9	; 0x09
    2316:	9a 85       	ldd	r25, Y+10	; 0x0a
    2318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9e 83       	std	Y+6, r25	; 0x06
    2322:	8d 83       	std	Y+5, r24	; 0x05
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	9a 83       	std	Y+2, r25	; 0x02
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	9a 81       	ldd	r25, Y+2	; 0x02
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <STEPPER_voidRotateClockWise+0x43c>
    2334:	9a 83       	std	Y+2, r25	; 0x02
    2336:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);

}
    2338:	e8 96       	adiw	r28, 0x38	; 56
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <STEPPER_voidRotateAntiClockWise>:

void STEPPER_voidRotateAntiClockWise(void)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	e8 97       	sbiw	r28, 0x38	; 56
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61

	// first excitation : set orange wire low
	DIO_SetPinValue(STEPPER_PORT, COIL3 , LOW);
    235e:	82 e0       	ldi	r24, 0x02	; 2
    2360:	64 e0       	ldi	r22, 0x04	; 4
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//set pink , yellow , blue : HIGH
	DIO_SetPinValue(STEPPER_PORT, COIL1 , HIGH);
    2368:	82 e0       	ldi	r24, 0x02	; 2
    236a:	66 e0       	ldi	r22, 0x06	; 6
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL2 , HIGH);
    2372:	82 e0       	ldi	r24, 0x02	; 2
    2374:	65 e0       	ldi	r22, 0x05	; 5
    2376:	41 e0       	ldi	r20, 0x01	; 1
    2378:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL0 , HIGH);
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	67 e0       	ldi	r22, 0x07	; 7
    2380:	41 e0       	ldi	r20, 0x01	; 1
    2382:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	a0 e2       	ldi	r26, 0x20	; 32
    238c:	b1 e4       	ldi	r27, 0x41	; 65
    238e:	8d ab       	std	Y+53, r24	; 0x35
    2390:	9e ab       	std	Y+54, r25	; 0x36
    2392:	af ab       	std	Y+55, r26	; 0x37
    2394:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2396:	6d a9       	ldd	r22, Y+53	; 0x35
    2398:	7e a9       	ldd	r23, Y+54	; 0x36
    239a:	8f a9       	ldd	r24, Y+55	; 0x37
    239c:	98 ad       	ldd	r25, Y+56	; 0x38
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	4a ef       	ldi	r20, 0xFA	; 250
    23a4:	54 e4       	ldi	r21, 0x44	; 68
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	89 ab       	std	Y+49, r24	; 0x31
    23b0:	9a ab       	std	Y+50, r25	; 0x32
    23b2:	ab ab       	std	Y+51, r26	; 0x33
    23b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23b6:	69 a9       	ldd	r22, Y+49	; 0x31
    23b8:	7a a9       	ldd	r23, Y+50	; 0x32
    23ba:	8b a9       	ldd	r24, Y+51	; 0x33
    23bc:	9c a9       	ldd	r25, Y+52	; 0x34
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e8       	ldi	r20, 0x80	; 128
    23c4:	5f e3       	ldi	r21, 0x3F	; 63
    23c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ca:	88 23       	and	r24, r24
    23cc:	2c f4       	brge	.+10     	; 0x23d8 <STEPPER_voidRotateAntiClockWise+0x8e>
		__ticks = 1;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	98 ab       	std	Y+48, r25	; 0x30
    23d4:	8f a7       	std	Y+47, r24	; 0x2f
    23d6:	3f c0       	rjmp	.+126    	; 0x2456 <STEPPER_voidRotateAntiClockWise+0x10c>
	else if (__tmp > 65535)
    23d8:	69 a9       	ldd	r22, Y+49	; 0x31
    23da:	7a a9       	ldd	r23, Y+50	; 0x32
    23dc:	8b a9       	ldd	r24, Y+51	; 0x33
    23de:	9c a9       	ldd	r25, Y+52	; 0x34
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	3f ef       	ldi	r19, 0xFF	; 255
    23e4:	4f e7       	ldi	r20, 0x7F	; 127
    23e6:	57 e4       	ldi	r21, 0x47	; 71
    23e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	4c f5       	brge	.+82     	; 0x2442 <STEPPER_voidRotateAntiClockWise+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f0:	6d a9       	ldd	r22, Y+53	; 0x35
    23f2:	7e a9       	ldd	r23, Y+54	; 0x36
    23f4:	8f a9       	ldd	r24, Y+55	; 0x37
    23f6:	98 ad       	ldd	r25, Y+56	; 0x38
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e2       	ldi	r20, 0x20	; 32
    23fe:	51 e4       	ldi	r21, 0x41	; 65
    2400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	bc 01       	movw	r22, r24
    240a:	cd 01       	movw	r24, r26
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	98 ab       	std	Y+48, r25	; 0x30
    2416:	8f a7       	std	Y+47, r24	; 0x2f
    2418:	0f c0       	rjmp	.+30     	; 0x2438 <STEPPER_voidRotateAntiClockWise+0xee>
    241a:	88 ec       	ldi	r24, 0xC8	; 200
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	9e a7       	std	Y+46, r25	; 0x2e
    2420:	8d a7       	std	Y+45, r24	; 0x2d
    2422:	8d a5       	ldd	r24, Y+45	; 0x2d
    2424:	9e a5       	ldd	r25, Y+46	; 0x2e
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <STEPPER_voidRotateAntiClockWise+0xdc>
    242a:	9e a7       	std	Y+46, r25	; 0x2e
    242c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2430:	98 a9       	ldd	r25, Y+48	; 0x30
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	98 ab       	std	Y+48, r25	; 0x30
    2436:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2438:	8f a5       	ldd	r24, Y+47	; 0x2f
    243a:	98 a9       	ldd	r25, Y+48	; 0x30
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	69 f7       	brne	.-38     	; 0x241a <STEPPER_voidRotateAntiClockWise+0xd0>
    2440:	14 c0       	rjmp	.+40     	; 0x246a <STEPPER_voidRotateAntiClockWise+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2442:	69 a9       	ldd	r22, Y+49	; 0x31
    2444:	7a a9       	ldd	r23, Y+50	; 0x32
    2446:	8b a9       	ldd	r24, Y+51	; 0x33
    2448:	9c a9       	ldd	r25, Y+52	; 0x34
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	98 ab       	std	Y+48, r25	; 0x30
    2454:	8f a7       	std	Y+47, r24	; 0x2f
    2456:	8f a5       	ldd	r24, Y+47	; 0x2f
    2458:	98 a9       	ldd	r25, Y+48	; 0x30
    245a:	9c a7       	std	Y+44, r25	; 0x2c
    245c:	8b a7       	std	Y+43, r24	; 0x2b
    245e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2460:	9c a5       	ldd	r25, Y+44	; 0x2c
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <STEPPER_voidRotateAntiClockWise+0x118>
    2466:	9c a7       	std	Y+44, r25	; 0x2c
    2468:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(10);


	// second excitation : set yellow wire low
	DIO_SetPinValue(STEPPER_PORT, COIL2 , LOW);
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	65 e0       	ldi	r22, 0x05	; 5
    246e:	40 e0       	ldi	r20, 0x00	; 0
    2470:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//set pink , blue , orange : HIGH
	DIO_SetPinValue(STEPPER_PORT, COIL0 , HIGH);
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	67 e0       	ldi	r22, 0x07	; 7
    2478:	41 e0       	ldi	r20, 0x01	; 1
    247a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL1 , HIGH);
    247e:	82 e0       	ldi	r24, 0x02	; 2
    2480:	66 e0       	ldi	r22, 0x06	; 6
    2482:	41 e0       	ldi	r20, 0x01	; 1
    2484:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL3 , HIGH);
    2488:	82 e0       	ldi	r24, 0x02	; 2
    248a:	64 e0       	ldi	r22, 0x04	; 4
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a0 e2       	ldi	r26, 0x20	; 32
    2498:	b1 e4       	ldi	r27, 0x41	; 65
    249a:	8f a3       	std	Y+39, r24	; 0x27
    249c:	98 a7       	std	Y+40, r25	; 0x28
    249e:	a9 a7       	std	Y+41, r26	; 0x29
    24a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a2:	6f a1       	ldd	r22, Y+39	; 0x27
    24a4:	78 a5       	ldd	r23, Y+40	; 0x28
    24a6:	89 a5       	ldd	r24, Y+41	; 0x29
    24a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	4a ef       	ldi	r20, 0xFA	; 250
    24b0:	54 e4       	ldi	r21, 0x44	; 68
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	8b a3       	std	Y+35, r24	; 0x23
    24bc:	9c a3       	std	Y+36, r25	; 0x24
    24be:	ad a3       	std	Y+37, r26	; 0x25
    24c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24c2:	6b a1       	ldd	r22, Y+35	; 0x23
    24c4:	7c a1       	ldd	r23, Y+36	; 0x24
    24c6:	8d a1       	ldd	r24, Y+37	; 0x25
    24c8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e8       	ldi	r20, 0x80	; 128
    24d0:	5f e3       	ldi	r21, 0x3F	; 63
    24d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d6:	88 23       	and	r24, r24
    24d8:	2c f4       	brge	.+10     	; 0x24e4 <STEPPER_voidRotateAntiClockWise+0x19a>
		__ticks = 1;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	9a a3       	std	Y+34, r25	; 0x22
    24e0:	89 a3       	std	Y+33, r24	; 0x21
    24e2:	3f c0       	rjmp	.+126    	; 0x2562 <STEPPER_voidRotateAntiClockWise+0x218>
	else if (__tmp > 65535)
    24e4:	6b a1       	ldd	r22, Y+35	; 0x23
    24e6:	7c a1       	ldd	r23, Y+36	; 0x24
    24e8:	8d a1       	ldd	r24, Y+37	; 0x25
    24ea:	9e a1       	ldd	r25, Y+38	; 0x26
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	3f ef       	ldi	r19, 0xFF	; 255
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	57 e4       	ldi	r21, 0x47	; 71
    24f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	4c f5       	brge	.+82     	; 0x254e <STEPPER_voidRotateAntiClockWise+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	6f a1       	ldd	r22, Y+39	; 0x27
    24fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2500:	89 a5       	ldd	r24, Y+41	; 0x29
    2502:	9a a5       	ldd	r25, Y+42	; 0x2a
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e2       	ldi	r20, 0x20	; 32
    250a:	51 e4       	ldi	r21, 0x41	; 65
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9a a3       	std	Y+34, r25	; 0x22
    2522:	89 a3       	std	Y+33, r24	; 0x21
    2524:	0f c0       	rjmp	.+30     	; 0x2544 <STEPPER_voidRotateAntiClockWise+0x1fa>
    2526:	88 ec       	ldi	r24, 0xC8	; 200
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	98 a3       	std	Y+32, r25	; 0x20
    252c:	8f 8f       	std	Y+31, r24	; 0x1f
    252e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2530:	98 a1       	ldd	r25, Y+32	; 0x20
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <STEPPER_voidRotateAntiClockWise+0x1e8>
    2536:	98 a3       	std	Y+32, r25	; 0x20
    2538:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253a:	89 a1       	ldd	r24, Y+33	; 0x21
    253c:	9a a1       	ldd	r25, Y+34	; 0x22
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	9a a3       	std	Y+34, r25	; 0x22
    2542:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2544:	89 a1       	ldd	r24, Y+33	; 0x21
    2546:	9a a1       	ldd	r25, Y+34	; 0x22
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	69 f7       	brne	.-38     	; 0x2526 <STEPPER_voidRotateAntiClockWise+0x1dc>
    254c:	14 c0       	rjmp	.+40     	; 0x2576 <STEPPER_voidRotateAntiClockWise+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254e:	6b a1       	ldd	r22, Y+35	; 0x23
    2550:	7c a1       	ldd	r23, Y+36	; 0x24
    2552:	8d a1       	ldd	r24, Y+37	; 0x25
    2554:	9e a1       	ldd	r25, Y+38	; 0x26
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9a a3       	std	Y+34, r25	; 0x22
    2560:	89 a3       	std	Y+33, r24	; 0x21
    2562:	89 a1       	ldd	r24, Y+33	; 0x21
    2564:	9a a1       	ldd	r25, Y+34	; 0x22
    2566:	9e 8f       	std	Y+30, r25	; 0x1e
    2568:	8d 8f       	std	Y+29, r24	; 0x1d
    256a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    256c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <STEPPER_voidRotateAntiClockWise+0x224>
    2572:	9e 8f       	std	Y+30, r25	; 0x1e
    2574:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(10);


	// third excitation : set PINK wire low
	DIO_SetPinValue(STEPPER_PORT, COIL1 , LOW);
    2576:	82 e0       	ldi	r24, 0x02	; 2
    2578:	66 e0       	ldi	r22, 0x06	; 6
    257a:	40 e0       	ldi	r20, 0x00	; 0
    257c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//set blue , yellow , orange : HIGH
	DIO_SetPinValue(STEPPER_PORT, COIL0 , HIGH);
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	67 e0       	ldi	r22, 0x07	; 7
    2584:	41 e0       	ldi	r20, 0x01	; 1
    2586:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL2 , HIGH);
    258a:	82 e0       	ldi	r24, 0x02	; 2
    258c:	65 e0       	ldi	r22, 0x05	; 5
    258e:	41 e0       	ldi	r20, 0x01	; 1
    2590:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL3 , HIGH);
    2594:	82 e0       	ldi	r24, 0x02	; 2
    2596:	64 e0       	ldi	r22, 0x04	; 4
    2598:	41 e0       	ldi	r20, 0x01	; 1
    259a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	a0 e2       	ldi	r26, 0x20	; 32
    25a4:	b1 e4       	ldi	r27, 0x41	; 65
    25a6:	89 8f       	std	Y+25, r24	; 0x19
    25a8:	9a 8f       	std	Y+26, r25	; 0x1a
    25aa:	ab 8f       	std	Y+27, r26	; 0x1b
    25ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ae:	69 8d       	ldd	r22, Y+25	; 0x19
    25b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4a ef       	ldi	r20, 0xFA	; 250
    25bc:	54 e4       	ldi	r21, 0x44	; 68
    25be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8d 8b       	std	Y+21, r24	; 0x15
    25c8:	9e 8b       	std	Y+22, r25	; 0x16
    25ca:	af 8b       	std	Y+23, r26	; 0x17
    25cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25ce:	6d 89       	ldd	r22, Y+21	; 0x15
    25d0:	7e 89       	ldd	r23, Y+22	; 0x16
    25d2:	8f 89       	ldd	r24, Y+23	; 0x17
    25d4:	98 8d       	ldd	r25, Y+24	; 0x18
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	2c f4       	brge	.+10     	; 0x25f0 <STEPPER_voidRotateAntiClockWise+0x2a6>
		__ticks = 1;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	9c 8b       	std	Y+20, r25	; 0x14
    25ec:	8b 8b       	std	Y+19, r24	; 0x13
    25ee:	3f c0       	rjmp	.+126    	; 0x266e <STEPPER_voidRotateAntiClockWise+0x324>
	else if (__tmp > 65535)
    25f0:	6d 89       	ldd	r22, Y+21	; 0x15
    25f2:	7e 89       	ldd	r23, Y+22	; 0x16
    25f4:	8f 89       	ldd	r24, Y+23	; 0x17
    25f6:	98 8d       	ldd	r25, Y+24	; 0x18
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	4c f5       	brge	.+82     	; 0x265a <STEPPER_voidRotateAntiClockWise+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2608:	69 8d       	ldd	r22, Y+25	; 0x19
    260a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    260c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9c 8b       	std	Y+20, r25	; 0x14
    262e:	8b 8b       	std	Y+19, r24	; 0x13
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <STEPPER_voidRotateAntiClockWise+0x306>
    2632:	88 ec       	ldi	r24, 0xC8	; 200
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9a 8b       	std	Y+18, r25	; 0x12
    2638:	89 8b       	std	Y+17, r24	; 0x11
    263a:	89 89       	ldd	r24, Y+17	; 0x11
    263c:	9a 89       	ldd	r25, Y+18	; 0x12
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <STEPPER_voidRotateAntiClockWise+0x2f4>
    2642:	9a 8b       	std	Y+18, r25	; 0x12
    2644:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2646:	8b 89       	ldd	r24, Y+19	; 0x13
    2648:	9c 89       	ldd	r25, Y+20	; 0x14
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	9c 8b       	std	Y+20, r25	; 0x14
    264e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2650:	8b 89       	ldd	r24, Y+19	; 0x13
    2652:	9c 89       	ldd	r25, Y+20	; 0x14
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	69 f7       	brne	.-38     	; 0x2632 <STEPPER_voidRotateAntiClockWise+0x2e8>
    2658:	14 c0       	rjmp	.+40     	; 0x2682 <STEPPER_voidRotateAntiClockWise+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	6d 89       	ldd	r22, Y+21	; 0x15
    265c:	7e 89       	ldd	r23, Y+22	; 0x16
    265e:	8f 89       	ldd	r24, Y+23	; 0x17
    2660:	98 8d       	ldd	r25, Y+24	; 0x18
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9c 8b       	std	Y+20, r25	; 0x14
    266c:	8b 8b       	std	Y+19, r24	; 0x13
    266e:	8b 89       	ldd	r24, Y+19	; 0x13
    2670:	9c 89       	ldd	r25, Y+20	; 0x14
    2672:	98 8b       	std	Y+16, r25	; 0x10
    2674:	8f 87       	std	Y+15, r24	; 0x0f
    2676:	8f 85       	ldd	r24, Y+15	; 0x0f
    2678:	98 89       	ldd	r25, Y+16	; 0x10
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <STEPPER_voidRotateAntiClockWise+0x330>
    267e:	98 8b       	std	Y+16, r25	; 0x10
    2680:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(10);


	// forth excitation : set blue wire low
	DIO_SetPinValue(STEPPER_PORT, COIL0 , LOW);
    2682:	82 e0       	ldi	r24, 0x02	; 2
    2684:	67 e0       	ldi	r22, 0x07	; 7
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	//set pink , yellow , orange : HIGH
	DIO_SetPinValue(STEPPER_PORT, COIL1 , HIGH);
    268c:	82 e0       	ldi	r24, 0x02	; 2
    268e:	66 e0       	ldi	r22, 0x06	; 6
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL2 , HIGH);
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	65 e0       	ldi	r22, 0x05	; 5
    269a:	41 e0       	ldi	r20, 0x01	; 1
    269c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(STEPPER_PORT, COIL3 , HIGH);
    26a0:	82 e0       	ldi	r24, 0x02	; 2
    26a2:	64 e0       	ldi	r22, 0x04	; 4
    26a4:	41 e0       	ldi	r20, 0x01	; 1
    26a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	a0 e2       	ldi	r26, 0x20	; 32
    26b0:	b1 e4       	ldi	r27, 0x41	; 65
    26b2:	8b 87       	std	Y+11, r24	; 0x0b
    26b4:	9c 87       	std	Y+12, r25	; 0x0c
    26b6:	ad 87       	std	Y+13, r26	; 0x0d
    26b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    26bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26be:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	4a ef       	ldi	r20, 0xFA	; 250
    26c8:	54 e4       	ldi	r21, 0x44	; 68
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	8f 83       	std	Y+7, r24	; 0x07
    26d4:	98 87       	std	Y+8, r25	; 0x08
    26d6:	a9 87       	std	Y+9, r26	; 0x09
    26d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26da:	6f 81       	ldd	r22, Y+7	; 0x07
    26dc:	78 85       	ldd	r23, Y+8	; 0x08
    26de:	89 85       	ldd	r24, Y+9	; 0x09
    26e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e8       	ldi	r20, 0x80	; 128
    26e8:	5f e3       	ldi	r21, 0x3F	; 63
    26ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ee:	88 23       	and	r24, r24
    26f0:	2c f4       	brge	.+10     	; 0x26fc <STEPPER_voidRotateAntiClockWise+0x3b2>
		__ticks = 1;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	9e 83       	std	Y+6, r25	; 0x06
    26f8:	8d 83       	std	Y+5, r24	; 0x05
    26fa:	3f c0       	rjmp	.+126    	; 0x277a <STEPPER_voidRotateAntiClockWise+0x430>
	else if (__tmp > 65535)
    26fc:	6f 81       	ldd	r22, Y+7	; 0x07
    26fe:	78 85       	ldd	r23, Y+8	; 0x08
    2700:	89 85       	ldd	r24, Y+9	; 0x09
    2702:	9a 85       	ldd	r25, Y+10	; 0x0a
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	3f ef       	ldi	r19, 0xFF	; 255
    2708:	4f e7       	ldi	r20, 0x7F	; 127
    270a:	57 e4       	ldi	r21, 0x47	; 71
    270c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2710:	18 16       	cp	r1, r24
    2712:	4c f5       	brge	.+82     	; 0x2766 <STEPPER_voidRotateAntiClockWise+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2714:	6b 85       	ldd	r22, Y+11	; 0x0b
    2716:	7c 85       	ldd	r23, Y+12	; 0x0c
    2718:	8d 85       	ldd	r24, Y+13	; 0x0d
    271a:	9e 85       	ldd	r25, Y+14	; 0x0e
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e2       	ldi	r20, 0x20	; 32
    2722:	51 e4       	ldi	r21, 0x41	; 65
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	bc 01       	movw	r22, r24
    272e:	cd 01       	movw	r24, r26
    2730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
    273c:	0f c0       	rjmp	.+30     	; 0x275c <STEPPER_voidRotateAntiClockWise+0x412>
    273e:	88 ec       	ldi	r24, 0xC8	; 200
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	9c 83       	std	Y+4, r25	; 0x04
    2744:	8b 83       	std	Y+3, r24	; 0x03
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	9c 81       	ldd	r25, Y+4	; 0x04
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <STEPPER_voidRotateAntiClockWise+0x400>
    274e:	9c 83       	std	Y+4, r25	; 0x04
    2750:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2752:	8d 81       	ldd	r24, Y+5	; 0x05
    2754:	9e 81       	ldd	r25, Y+6	; 0x06
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	9e 83       	std	Y+6, r25	; 0x06
    275a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275c:	8d 81       	ldd	r24, Y+5	; 0x05
    275e:	9e 81       	ldd	r25, Y+6	; 0x06
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	69 f7       	brne	.-38     	; 0x273e <STEPPER_voidRotateAntiClockWise+0x3f4>
    2764:	14 c0       	rjmp	.+40     	; 0x278e <STEPPER_voidRotateAntiClockWise+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2766:	6f 81       	ldd	r22, Y+7	; 0x07
    2768:	78 85       	ldd	r23, Y+8	; 0x08
    276a:	89 85       	ldd	r24, Y+9	; 0x09
    276c:	9a 85       	ldd	r25, Y+10	; 0x0a
    276e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	9e 83       	std	Y+6, r25	; 0x06
    2778:	8d 83       	std	Y+5, r24	; 0x05
    277a:	8d 81       	ldd	r24, Y+5	; 0x05
    277c:	9e 81       	ldd	r25, Y+6	; 0x06
    277e:	9a 83       	std	Y+2, r25	; 0x02
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	9a 81       	ldd	r25, Y+2	; 0x02
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	f1 f7       	brne	.-4      	; 0x2786 <STEPPER_voidRotateAntiClockWise+0x43c>
    278a:	9a 83       	std	Y+2, r25	; 0x02
    278c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);

}
    278e:	e8 96       	adiw	r28, 0x38	; 56
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <STEPPER_voidSetAngleCW>:


void STEPPER_voidSetAngleCW(u16 copy_u8Angle)
{
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	00 d0       	rcall	.+0      	; 0x27a6 <STEPPER_voidSetAngleCW+0x6>
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <STEPPER_voidSetAngleCW+0x8>
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <STEPPER_voidSetAngleCW+0xa>
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
	u16 x = 0;
    27b2:	1c 82       	std	Y+4, r1	; 0x04
    27b4:	1b 82       	std	Y+3, r1	; 0x03
	u16 steps =(( 512 * copy_u8Angle)/ 360) ;
    27b6:	8d 81       	ldd	r24, Y+5	; 0x05
    27b8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ba:	98 2f       	mov	r25, r24
    27bc:	88 27       	eor	r24, r24
    27be:	99 0f       	add	r25, r25
    27c0:	28 e6       	ldi	r18, 0x68	; 104
    27c2:	31 e0       	ldi	r19, 0x01	; 1
    27c4:	b9 01       	movw	r22, r18
    27c6:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__udivmodhi4>
    27ca:	cb 01       	movw	r24, r22
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	07 c0       	rjmp	.+14     	; 0x27e0 <STEPPER_voidSetAngleCW+0x40>


	while(x <= steps)
	{
		STEPPER_voidRotateClockWise();
    27d2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <STEPPER_voidRotateClockWise>
		x = x + 1;
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	01 96       	adiw	r24, 0x01	; 1
    27dc:	9c 83       	std	Y+4, r25	; 0x04
    27de:	8b 83       	std	Y+3, r24	; 0x03
{
	u16 x = 0;
	u16 steps =(( 512 * copy_u8Angle)/ 360) ;


	while(x <= steps)
    27e0:	2b 81       	ldd	r18, Y+3	; 0x03
    27e2:	3c 81       	ldd	r19, Y+4	; 0x04
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	82 17       	cp	r24, r18
    27ea:	93 07       	cpc	r25, r19
    27ec:	90 f7       	brcc	.-28     	; 0x27d2 <STEPPER_voidSetAngleCW+0x32>
		STEPPER_voidRotateClockWise();
		x = x + 1;
	}


}
    27ee:	26 96       	adiw	r28, 0x06	; 6
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <STEPPER_voidSetAngleCCW>:

void STEPPER_voidSetAngleCCW(u16 copy_u8Angle)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	28 97       	sbiw	r28, 0x08	; 8
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	98 87       	std	Y+8, r25	; 0x08
    2816:	8f 83       	std	Y+7, r24	; 0x07
	u32 x = 0;
    2818:	1e 82       	std	Y+6, r1	; 0x06
    281a:	1d 82       	std	Y+5, r1	; 0x05
	u32 steps;
	u32 y = 512 * (u32)copy_u8Angle;
    281c:	8f 81       	ldd	r24, Y+7	; 0x07
    281e:	98 85       	ldd	r25, Y+8	; 0x08
    2820:	98 2f       	mov	r25, r24
    2822:	88 27       	eor	r24, r24
    2824:	99 0f       	add	r25, r25
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
	steps =  y / 360 ;
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	28 e6       	ldi	r18, 0x68	; 104
    2830:	31 e0       	ldi	r19, 0x01	; 1
    2832:	b9 01       	movw	r22, r18
    2834:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__udivmodhi4>
    2838:	cb 01       	movw	r24, r22
    283a:	9c 83       	std	Y+4, r25	; 0x04
    283c:	8b 83       	std	Y+3, r24	; 0x03
    283e:	07 c0       	rjmp	.+14     	; 0x284e <STEPPER_voidSetAngleCCW+0x4e>
	//LCD_voidWriteNumber(copy_u8Angle);
	//LCD_voidWriteNumber((u16)steps);

	while(x <= steps)
	{
		x = x + 1;
    2840:	8d 81       	ldd	r24, Y+5	; 0x05
    2842:	9e 81       	ldd	r25, Y+6	; 0x06
    2844:	01 96       	adiw	r24, 0x01	; 1
    2846:	9e 83       	std	Y+6, r25	; 0x06
    2848:	8d 83       	std	Y+5, r24	; 0x05
		STEPPER_voidRotateAntiClockWise();
    284a:	0e 94 a5 11 	call	0x234a	; 0x234a <STEPPER_voidRotateAntiClockWise>
	steps =  y / 360 ;

	//LCD_voidWriteNumber(copy_u8Angle);
	//LCD_voidWriteNumber((u16)steps);

	while(x <= steps)
    284e:	2d 81       	ldd	r18, Y+5	; 0x05
    2850:	3e 81       	ldd	r19, Y+6	; 0x06
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	82 17       	cp	r24, r18
    2858:	93 07       	cpc	r25, r19
    285a:	90 f7       	brcc	.-28     	; 0x2840 <STEPPER_voidSetAngleCCW+0x40>

	}
	//LCD_voidWriteNumber((u16)x);


}
    285c:	28 96       	adiw	r28, 0x08	; 8
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <main>:
u8 * pass_arr(u16 pass);
u8 * id_arr(u16 id);
void system(void);

int main()
{
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
/*---------------------------------------- system code to unlock it -----------------------------------------------*/


	// LCD INATILIZE AND PORTS

	DIO_SetPortDirection(DDRD , 0xff);
    2876:	87 e0       	ldi	r24, 0x07	; 7
    2878:	6f ef       	ldi	r22, 0xFF	; 255
    287a:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_SetPortDirection>
	DIO_SetPortDirection(DDRC , 0xff);
    287e:	86 e0       	ldi	r24, 0x06	; 6
    2880:	6f ef       	ldi	r22, 0xFF	; 255
    2882:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_SetPortDirection>

	LCD_voidInit();
    2886:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_voidInit>
	LCD_voidSendCommand(0x0c);
    288a:	8c e0       	ldi	r24, 0x0C	; 12
    288c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>

	// KPD PORTS

	DIO_SetPortDirection(DDRA , 0X0F) ;
    2890:	84 e0       	ldi	r24, 0x04	; 4
    2892:	6f e0       	ldi	r22, 0x0F	; 15
    2894:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_SetPortDirection>
	DIO_SetPortValue(KPD_PORT , 0XFF) ;
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	6f ef       	ldi	r22, 0xFF	; 255
    289c:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_SetPortValue>

	// 7 segment port

	DIO_SetPortDirection(DDRB , 0xff);
    28a0:	85 e0       	ldi	r24, 0x05	; 5
    28a2:	6f ef       	ldi	r22, 0xFF	; 255
    28a4:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_SetPortDirection>

	// stepper port

	//DIO_SetPortDirection(DDRC , 0XFF);

		system() ;
    28a8:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <system>


	return 0 ;
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
}
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <system>:

void system(void)
{
    28b6:	0f 93       	push	r16
    28b8:	1f 93       	push	r17
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	c4 59       	subi	r28, 0x94	; 148
    28c4:	d0 40       	sbci	r29, 0x00	; 0
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	de bf       	out	0x3e, r29	; 62
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	cd bf       	out	0x3d, r28	; 61
	// some special shapes

	u8 bye[8] = {0x00 , 0x04, 0x0a , 0x15 , 0x0a , 0x04 , 0x0e ,0x11} ;
    28d0:	ce 01       	movw	r24, r28
    28d2:	85 58       	subi	r24, 0x85	; 133
    28d4:	9f 4f       	sbci	r25, 0xFF	; 255
    28d6:	c5 57       	subi	r28, 0x75	; 117
    28d8:	df 4f       	sbci	r29, 0xFF	; 255
    28da:	99 83       	std	Y+1, r25	; 0x01
    28dc:	88 83       	st	Y, r24
    28de:	cb 58       	subi	r28, 0x8B	; 139
    28e0:	d0 40       	sbci	r29, 0x00	; 0
    28e2:	82 e0       	ldi	r24, 0x02	; 2
    28e4:	91 e0       	ldi	r25, 0x01	; 1
    28e6:	c3 57       	subi	r28, 0x73	; 115
    28e8:	df 4f       	sbci	r29, 0xFF	; 255
    28ea:	99 83       	std	Y+1, r25	; 0x01
    28ec:	88 83       	st	Y, r24
    28ee:	cd 58       	subi	r28, 0x8D	; 141
    28f0:	d0 40       	sbci	r29, 0x00	; 0
    28f2:	98 e0       	ldi	r25, 0x08	; 8
    28f4:	c1 57       	subi	r28, 0x71	; 113
    28f6:	df 4f       	sbci	r29, 0xFF	; 255
    28f8:	98 83       	st	Y, r25
    28fa:	cf 58       	subi	r28, 0x8F	; 143
    28fc:	d0 40       	sbci	r29, 0x00	; 0
    28fe:	c3 57       	subi	r28, 0x73	; 115
    2900:	df 4f       	sbci	r29, 0xFF	; 255
    2902:	e8 81       	ld	r30, Y
    2904:	f9 81       	ldd	r31, Y+1	; 0x01
    2906:	cd 58       	subi	r28, 0x8D	; 141
    2908:	d0 40       	sbci	r29, 0x00	; 0
    290a:	00 80       	ld	r0, Z
    290c:	c3 57       	subi	r28, 0x73	; 115
    290e:	df 4f       	sbci	r29, 0xFF	; 255
    2910:	88 81       	ld	r24, Y
    2912:	99 81       	ldd	r25, Y+1	; 0x01
    2914:	cd 58       	subi	r28, 0x8D	; 141
    2916:	d0 40       	sbci	r29, 0x00	; 0
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	c3 57       	subi	r28, 0x73	; 115
    291c:	df 4f       	sbci	r29, 0xFF	; 255
    291e:	99 83       	std	Y+1, r25	; 0x01
    2920:	88 83       	st	Y, r24
    2922:	cd 58       	subi	r28, 0x8D	; 141
    2924:	d0 40       	sbci	r29, 0x00	; 0
    2926:	c5 57       	subi	r28, 0x75	; 117
    2928:	df 4f       	sbci	r29, 0xFF	; 255
    292a:	e8 81       	ld	r30, Y
    292c:	f9 81       	ldd	r31, Y+1	; 0x01
    292e:	cb 58       	subi	r28, 0x8B	; 139
    2930:	d0 40       	sbci	r29, 0x00	; 0
    2932:	00 82       	st	Z, r0
    2934:	c5 57       	subi	r28, 0x75	; 117
    2936:	df 4f       	sbci	r29, 0xFF	; 255
    2938:	88 81       	ld	r24, Y
    293a:	99 81       	ldd	r25, Y+1	; 0x01
    293c:	cb 58       	subi	r28, 0x8B	; 139
    293e:	d0 40       	sbci	r29, 0x00	; 0
    2940:	01 96       	adiw	r24, 0x01	; 1
    2942:	c5 57       	subi	r28, 0x75	; 117
    2944:	df 4f       	sbci	r29, 0xFF	; 255
    2946:	99 83       	std	Y+1, r25	; 0x01
    2948:	88 83       	st	Y, r24
    294a:	cb 58       	subi	r28, 0x8B	; 139
    294c:	d0 40       	sbci	r29, 0x00	; 0
    294e:	c1 57       	subi	r28, 0x71	; 113
    2950:	df 4f       	sbci	r29, 0xFF	; 255
    2952:	98 81       	ld	r25, Y
    2954:	cf 58       	subi	r28, 0x8F	; 143
    2956:	d0 40       	sbci	r29, 0x00	; 0
    2958:	91 50       	subi	r25, 0x01	; 1
    295a:	c1 57       	subi	r28, 0x71	; 113
    295c:	df 4f       	sbci	r29, 0xFF	; 255
    295e:	98 83       	st	Y, r25
    2960:	cf 58       	subi	r28, 0x8F	; 143
    2962:	d0 40       	sbci	r29, 0x00	; 0
    2964:	c1 57       	subi	r28, 0x71	; 113
    2966:	df 4f       	sbci	r29, 0xFF	; 255
    2968:	e8 81       	ld	r30, Y
    296a:	cf 58       	subi	r28, 0x8F	; 143
    296c:	d0 40       	sbci	r29, 0x00	; 0
    296e:	ee 23       	and	r30, r30
    2970:	31 f6       	brne	.-116    	; 0x28fe <system+0x48>
	u8 try_again[8] = {0x00 , 0x0a, 0x00 , 0x00 , 0x11 , 0x1f , 0x00 ,0x00};
    2972:	ce 01       	movw	r24, r28
    2974:	8d 57       	subi	r24, 0x7D	; 125
    2976:	9f 4f       	sbci	r25, 0xFF	; 255
    2978:	c0 57       	subi	r28, 0x70	; 112
    297a:	df 4f       	sbci	r29, 0xFF	; 255
    297c:	99 83       	std	Y+1, r25	; 0x01
    297e:	88 83       	st	Y, r24
    2980:	c0 59       	subi	r28, 0x90	; 144
    2982:	d0 40       	sbci	r29, 0x00	; 0
    2984:	8a ef       	ldi	r24, 0xFA	; 250
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	ce 56       	subi	r28, 0x6E	; 110
    298a:	df 4f       	sbci	r29, 0xFF	; 255
    298c:	99 83       	std	Y+1, r25	; 0x01
    298e:	88 83       	st	Y, r24
    2990:	c2 59       	subi	r28, 0x92	; 146
    2992:	d0 40       	sbci	r29, 0x00	; 0
    2994:	98 e0       	ldi	r25, 0x08	; 8
    2996:	cc 56       	subi	r28, 0x6C	; 108
    2998:	df 4f       	sbci	r29, 0xFF	; 255
    299a:	98 83       	st	Y, r25
    299c:	c4 59       	subi	r28, 0x94	; 148
    299e:	d0 40       	sbci	r29, 0x00	; 0
    29a0:	ce 56       	subi	r28, 0x6E	; 110
    29a2:	df 4f       	sbci	r29, 0xFF	; 255
    29a4:	e8 81       	ld	r30, Y
    29a6:	f9 81       	ldd	r31, Y+1	; 0x01
    29a8:	c2 59       	subi	r28, 0x92	; 146
    29aa:	d0 40       	sbci	r29, 0x00	; 0
    29ac:	00 80       	ld	r0, Z
    29ae:	ce 56       	subi	r28, 0x6E	; 110
    29b0:	df 4f       	sbci	r29, 0xFF	; 255
    29b2:	88 81       	ld	r24, Y
    29b4:	99 81       	ldd	r25, Y+1	; 0x01
    29b6:	c2 59       	subi	r28, 0x92	; 146
    29b8:	d0 40       	sbci	r29, 0x00	; 0
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	ce 56       	subi	r28, 0x6E	; 110
    29be:	df 4f       	sbci	r29, 0xFF	; 255
    29c0:	99 83       	std	Y+1, r25	; 0x01
    29c2:	88 83       	st	Y, r24
    29c4:	c2 59       	subi	r28, 0x92	; 146
    29c6:	d0 40       	sbci	r29, 0x00	; 0
    29c8:	c0 57       	subi	r28, 0x70	; 112
    29ca:	df 4f       	sbci	r29, 0xFF	; 255
    29cc:	e8 81       	ld	r30, Y
    29ce:	f9 81       	ldd	r31, Y+1	; 0x01
    29d0:	c0 59       	subi	r28, 0x90	; 144
    29d2:	d0 40       	sbci	r29, 0x00	; 0
    29d4:	00 82       	st	Z, r0
    29d6:	c0 57       	subi	r28, 0x70	; 112
    29d8:	df 4f       	sbci	r29, 0xFF	; 255
    29da:	88 81       	ld	r24, Y
    29dc:	99 81       	ldd	r25, Y+1	; 0x01
    29de:	c0 59       	subi	r28, 0x90	; 144
    29e0:	d0 40       	sbci	r29, 0x00	; 0
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	c0 57       	subi	r28, 0x70	; 112
    29e6:	df 4f       	sbci	r29, 0xFF	; 255
    29e8:	99 83       	std	Y+1, r25	; 0x01
    29ea:	88 83       	st	Y, r24
    29ec:	c0 59       	subi	r28, 0x90	; 144
    29ee:	d0 40       	sbci	r29, 0x00	; 0
    29f0:	cc 56       	subi	r28, 0x6C	; 108
    29f2:	df 4f       	sbci	r29, 0xFF	; 255
    29f4:	98 81       	ld	r25, Y
    29f6:	c4 59       	subi	r28, 0x94	; 148
    29f8:	d0 40       	sbci	r29, 0x00	; 0
    29fa:	91 50       	subi	r25, 0x01	; 1
    29fc:	cc 56       	subi	r28, 0x6C	; 108
    29fe:	df 4f       	sbci	r29, 0xFF	; 255
    2a00:	98 83       	st	Y, r25
    2a02:	c4 59       	subi	r28, 0x94	; 148
    2a04:	d0 40       	sbci	r29, 0x00	; 0
    2a06:	cc 56       	subi	r28, 0x6C	; 108
    2a08:	df 4f       	sbci	r29, 0xFF	; 255
    2a0a:	e8 81       	ld	r30, Y
    2a0c:	c4 59       	subi	r28, 0x94	; 148
    2a0e:	d0 40       	sbci	r29, 0x00	; 0
    2a10:	ee 23       	and	r30, r30
    2a12:	31 f6       	brne	.-116    	; 0x29a0 <system+0xea>

	//LCD_voidWriteSpecialChar(u8 *pattern , u8 block_no, u8 x, u8 y);
	u8 count = 1 ;
    2a14:	fe 01       	movw	r30, r28
    2a16:	e6 58       	subi	r30, 0x86	; 134
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	80 83       	st	Z, r24
	u8  *arr_id;
	u8  *arr_pass;
	u16 angle = 0;
    2a1e:	fe 01       	movw	r30, r28
    2a20:	ec 58       	subi	r30, 0x8C	; 140
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	11 82       	std	Z+1, r1	; 0x01
    2a26:	10 82       	st	Z, r1
	u8 i ;
	u8 direction ;

	// print welcome on LCD for 3 seconds

	LCD_voidGoToXY(0 , 4) ;
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	64 e0       	ldi	r22, 0x04	; 4
    2a2c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
	LCD_Display("Welcome") ;
    2a30:	80 e6       	ldi	r24, 0x60	; 96
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e3 59       	subi	r30, 0x93	; 147
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e8       	ldi	r25, 0x80	; 128
    2a42:	ab e3       	ldi	r26, 0x3B	; 59
    2a44:	b5 e4       	ldi	r27, 0x45	; 69
    2a46:	80 83       	st	Z, r24
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	a2 83       	std	Z+2, r26	; 0x02
    2a4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4e:	8e 01       	movw	r16, r28
    2a50:	07 59       	subi	r16, 0x97	; 151
    2a52:	1f 4f       	sbci	r17, 0xFF	; 255
    2a54:	fe 01       	movw	r30, r28
    2a56:	e3 59       	subi	r30, 0x93	; 147
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	60 81       	ld	r22, Z
    2a5c:	71 81       	ldd	r23, Z+1	; 0x01
    2a5e:	82 81       	ldd	r24, Z+2	; 0x02
    2a60:	93 81       	ldd	r25, Z+3	; 0x03
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4a ef       	ldi	r20, 0xFA	; 250
    2a68:	54 e4       	ldi	r21, 0x44	; 68
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	f8 01       	movw	r30, r16
    2a74:	80 83       	st	Z, r24
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	a2 83       	std	Z+2, r26	; 0x02
    2a7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e7 59       	subi	r30, 0x97	; 151
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	5f e3       	ldi	r21, 0x3F	; 63
    2a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a96:	88 23       	and	r24, r24
    2a98:	44 f4       	brge	.+16     	; 0x2aaa <system+0x1f4>
		__ticks = 1;
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e9 59       	subi	r30, 0x99	; 153
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	80 83       	st	Z, r24
    2aa8:	64 c0       	rjmp	.+200    	; 0x2b72 <system+0x2bc>
	else if (__tmp > 65535)
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e7 59       	subi	r30, 0x97	; 151
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	60 81       	ld	r22, Z
    2ab2:	71 81       	ldd	r23, Z+1	; 0x01
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	93 81       	ldd	r25, Z+3	; 0x03
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	3f ef       	ldi	r19, 0xFF	; 255
    2abc:	4f e7       	ldi	r20, 0x7F	; 127
    2abe:	57 e4       	ldi	r21, 0x47	; 71
    2ac0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac4:	18 16       	cp	r1, r24
    2ac6:	0c f0       	brlt	.+2      	; 0x2aca <system+0x214>
    2ac8:	43 c0       	rjmp	.+134    	; 0x2b50 <system+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aca:	fe 01       	movw	r30, r28
    2acc:	e3 59       	subi	r30, 0x93	; 147
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	60 81       	ld	r22, Z
    2ad2:	71 81       	ldd	r23, Z+1	; 0x01
    2ad4:	82 81       	ldd	r24, Z+2	; 0x02
    2ad6:	93 81       	ldd	r25, Z+3	; 0x03
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e2       	ldi	r20, 0x20	; 32
    2ade:	51 e4       	ldi	r21, 0x41	; 65
    2ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	8e 01       	movw	r16, r28
    2aea:	09 59       	subi	r16, 0x99	; 153
    2aec:	1f 4f       	sbci	r17, 0xFF	; 255
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	f8 01       	movw	r30, r16
    2afc:	91 83       	std	Z+1, r25	; 0x01
    2afe:	80 83       	st	Z, r24
    2b00:	1f c0       	rjmp	.+62     	; 0x2b40 <system+0x28a>
    2b02:	fe 01       	movw	r30, r28
    2b04:	eb 59       	subi	r30, 0x9B	; 155
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	88 ec       	ldi	r24, 0xC8	; 200
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	91 83       	std	Z+1, r25	; 0x01
    2b0e:	80 83       	st	Z, r24
    2b10:	fe 01       	movw	r30, r28
    2b12:	eb 59       	subi	r30, 0x9B	; 155
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	80 81       	ld	r24, Z
    2b18:	91 81       	ldd	r25, Z+1	; 0x01
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <system+0x264>
    2b1e:	fe 01       	movw	r30, r28
    2b20:	eb 59       	subi	r30, 0x9B	; 155
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	91 83       	std	Z+1, r25	; 0x01
    2b26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b28:	de 01       	movw	r26, r28
    2b2a:	a9 59       	subi	r26, 0x99	; 153
    2b2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2e:	fe 01       	movw	r30, r28
    2b30:	e9 59       	subi	r30, 0x99	; 153
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 81       	ld	r24, Z
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	11 96       	adiw	r26, 0x01	; 1
    2b3c:	9c 93       	st	X, r25
    2b3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b40:	fe 01       	movw	r30, r28
    2b42:	e9 59       	subi	r30, 0x99	; 153
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	80 81       	ld	r24, Z
    2b48:	91 81       	ldd	r25, Z+1	; 0x01
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	d1 f6       	brne	.-76     	; 0x2b02 <system+0x24c>
    2b4e:	27 c0       	rjmp	.+78     	; 0x2b9e <system+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b50:	8e 01       	movw	r16, r28
    2b52:	09 59       	subi	r16, 0x99	; 153
    2b54:	1f 4f       	sbci	r17, 0xFF	; 255
    2b56:	fe 01       	movw	r30, r28
    2b58:	e7 59       	subi	r30, 0x97	; 151
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	60 81       	ld	r22, Z
    2b5e:	71 81       	ldd	r23, Z+1	; 0x01
    2b60:	82 81       	ldd	r24, Z+2	; 0x02
    2b62:	93 81       	ldd	r25, Z+3	; 0x03
    2b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	f8 01       	movw	r30, r16
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	80 83       	st	Z, r24
    2b72:	de 01       	movw	r26, r28
    2b74:	ad 59       	subi	r26, 0x9D	; 157
    2b76:	bf 4f       	sbci	r27, 0xFF	; 255
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e9 59       	subi	r30, 0x99	; 153
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 81       	ld	r24, Z
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	8d 93       	st	X+, r24
    2b84:	9c 93       	st	X, r25
    2b86:	fe 01       	movw	r30, r28
    2b88:	ed 59       	subi	r30, 0x9D	; 157
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	80 81       	ld	r24, Z
    2b8e:	91 81       	ldd	r25, Z+1	; 0x01
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <system+0x2da>
    2b94:	fe 01       	movw	r30, r28
    2b96:	ed 59       	subi	r30, 0x9D	; 157
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	80 83       	st	Z, r24
	_delay_ms(3 * 1000) ;

	// enter id

	LCD_voidSendCommand(0x01) ;
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
	LCD_voidGoToXY(0 , 1) ;
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	61 e0       	ldi	r22, 0x01	; 1
    2ba8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
	LCD_Display("Enter ID:");
    2bac:	88 e6       	ldi	r24, 0x68	; 104
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>

	u8 key;

	while(1)
	{
		key = NO_KEY ;
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ef 58       	subi	r30, 0x8F	; 143
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 e3       	ldi	r24, 0x30	; 48
    2bbc:	80 83       	st	Z, r24
		key = KPD_u8GetPressedKey();
    2bbe:	0e 94 d6 08 	call	0x11ac	; 0x11ac <KPD_u8GetPressedKey>
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ef 58       	subi	r30, 0x8F	; 143
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	80 83       	st	Z, r24

		if(state == 0)
    2bca:	80 91 10 01 	lds	r24, 0x0110
    2bce:	88 23       	and	r24, r24
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <system+0x31e>
    2bd2:	2b c2       	rjmp	.+1110   	; 0x302a <system+0x774>
		{
			 if(key != NO_KEY && (key == 0 || key == 1 || key == 2 || key == 3 || key == 4 || key == 5 || key == 6 || key == 7 || key == 8 || key == 9))
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ef 58       	subi	r30, 0x8F	; 143
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	80 33       	cpi	r24, 0x30	; 48
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <system+0x32c>
    2be0:	5f c0       	rjmp	.+190    	; 0x2ca0 <system+0x3ea>
    2be2:	fe 01       	movw	r30, r28
    2be4:	ef 58       	subi	r30, 0x8F	; 143
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	80 81       	ld	r24, Z
    2bea:	88 23       	and	r24, r24
    2bec:	b1 f1       	breq	.+108    	; 0x2c5a <system+0x3a4>
    2bee:	fe 01       	movw	r30, r28
    2bf0:	ef 58       	subi	r30, 0x8F	; 143
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	80 81       	ld	r24, Z
    2bf6:	81 30       	cpi	r24, 0x01	; 1
    2bf8:	81 f1       	breq	.+96     	; 0x2c5a <system+0x3a4>
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	ef 58       	subi	r30, 0x8F	; 143
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 81       	ld	r24, Z
    2c02:	82 30       	cpi	r24, 0x02	; 2
    2c04:	51 f1       	breq	.+84     	; 0x2c5a <system+0x3a4>
    2c06:	fe 01       	movw	r30, r28
    2c08:	ef 58       	subi	r30, 0x8F	; 143
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 81       	ld	r24, Z
    2c0e:	83 30       	cpi	r24, 0x03	; 3
    2c10:	21 f1       	breq	.+72     	; 0x2c5a <system+0x3a4>
    2c12:	fe 01       	movw	r30, r28
    2c14:	ef 58       	subi	r30, 0x8F	; 143
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	80 81       	ld	r24, Z
    2c1a:	84 30       	cpi	r24, 0x04	; 4
    2c1c:	f1 f0       	breq	.+60     	; 0x2c5a <system+0x3a4>
    2c1e:	fe 01       	movw	r30, r28
    2c20:	ef 58       	subi	r30, 0x8F	; 143
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	80 81       	ld	r24, Z
    2c26:	85 30       	cpi	r24, 0x05	; 5
    2c28:	c1 f0       	breq	.+48     	; 0x2c5a <system+0x3a4>
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	ef 58       	subi	r30, 0x8F	; 143
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	86 30       	cpi	r24, 0x06	; 6
    2c34:	91 f0       	breq	.+36     	; 0x2c5a <system+0x3a4>
    2c36:	fe 01       	movw	r30, r28
    2c38:	ef 58       	subi	r30, 0x8F	; 143
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	80 81       	ld	r24, Z
    2c3e:	87 30       	cpi	r24, 0x07	; 7
    2c40:	61 f0       	breq	.+24     	; 0x2c5a <system+0x3a4>
    2c42:	fe 01       	movw	r30, r28
    2c44:	ef 58       	subi	r30, 0x8F	; 143
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 81       	ld	r24, Z
    2c4a:	88 30       	cpi	r24, 0x08	; 8
    2c4c:	31 f0       	breq	.+12     	; 0x2c5a <system+0x3a4>
    2c4e:	fe 01       	movw	r30, r28
    2c50:	ef 58       	subi	r30, 0x8F	; 143
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 81       	ld	r24, Z
    2c56:	89 30       	cpi	r24, 0x09	; 9
    2c58:	19 f5       	brne	.+70     	; 0x2ca0 <system+0x3ea>
			 {
				 id = 10 * id + (u16)key ;
    2c5a:	80 91 0c 01 	lds	r24, 0x010C
    2c5e:	90 91 0d 01 	lds	r25, 0x010D
    2c62:	9c 01       	movw	r18, r24
    2c64:	22 0f       	add	r18, r18
    2c66:	33 1f       	adc	r19, r19
    2c68:	c9 01       	movw	r24, r18
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	88 0f       	add	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	28 0f       	add	r18, r24
    2c74:	39 1f       	adc	r19, r25
    2c76:	fe 01       	movw	r30, r28
    2c78:	ef 58       	subi	r30, 0x8F	; 143
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 81       	ld	r24, Z
    2c7e:	88 2f       	mov	r24, r24
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	82 0f       	add	r24, r18
    2c84:	93 1f       	adc	r25, r19
    2c86:	90 93 0d 01 	sts	0x010D, r25
    2c8a:	80 93 0c 01 	sts	0x010C, r24
				 LCD_voidWriteNumber((u16)key) ;
    2c8e:	fe 01       	movw	r30, r28
    2c90:	ef 58       	subi	r30, 0x8F	; 143
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 81       	ld	r24, Z
    2c96:	88 2f       	mov	r24, r24
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_voidWriteNumber>
    2c9e:	8a cf       	rjmp	.-236    	; 0x2bb4 <system+0x2fe>
			 }

			 else if(key != NO_KEY && key == '=')
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	ef 58       	subi	r30, 0x8F	; 143
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	80 81       	ld	r24, Z
    2ca8:	80 33       	cpi	r24, 0x30	; 48
    2caa:	09 f4       	brne	.+2      	; 0x2cae <system+0x3f8>
    2cac:	83 cf       	rjmp	.-250    	; 0x2bb4 <system+0x2fe>
    2cae:	fe 01       	movw	r30, r28
    2cb0:	ef 58       	subi	r30, 0x8F	; 143
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	80 81       	ld	r24, Z
    2cb6:	8d 33       	cpi	r24, 0x3D	; 61
    2cb8:	09 f0       	breq	.+2      	; 0x2cbc <system+0x406>
    2cba:	7c cf       	rjmp	.-264    	; 0x2bb4 <system+0x2fe>
			 {
				 state = 1 ;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	80 93 10 01 	sts	0x0110, r24
				 arr_id = id_arr(id);
    2cc2:	80 91 0c 01 	lds	r24, 0x010C
    2cc6:	90 91 0d 01 	lds	r25, 0x010D
    2cca:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <id_arr>
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e8 58       	subi	r30, 0x88	; 136
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	80 83       	st	Z, r24
				 id_copy = id ;
    2cd8:	80 91 0c 01 	lds	r24, 0x010C
    2cdc:	90 91 0d 01 	lds	r25, 0x010D
    2ce0:	90 93 1c 01 	sts	0x011C, r25
    2ce4:	80 93 1b 01 	sts	0x011B, r24
    2ce8:	13 c0       	rjmp	.+38     	; 0x2d10 <system+0x45a>
				 while(id_copy != 0)
				 {
					id_copy /= 10 ;
    2cea:	80 91 1b 01 	lds	r24, 0x011B
    2cee:	90 91 1c 01 	lds	r25, 0x011C
    2cf2:	2a e0       	ldi	r18, 0x0A	; 10
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	b9 01       	movw	r22, r18
    2cf8:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__udivmodhi4>
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	90 93 1c 01 	sts	0x011C, r25
    2d02:	80 93 1b 01 	sts	0x011B, r24
					id_digit += 1 ;
    2d06:	80 91 0a 01 	lds	r24, 0x010A
    2d0a:	8f 5f       	subi	r24, 0xFF	; 255
    2d0c:	80 93 0a 01 	sts	0x010A, r24
			 else if(key != NO_KEY && key == '=')
			 {
				 state = 1 ;
				 arr_id = id_arr(id);
				 id_copy = id ;
				 while(id_copy != 0)
    2d10:	80 91 1b 01 	lds	r24, 0x011B
    2d14:	90 91 1c 01 	lds	r25, 0x011C
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	39 f7       	brne	.-50     	; 0x2cea <system+0x434>
				 {
					id_copy /= 10 ;
					id_digit += 1 ;
				 }

				if(id_digit == 4)
    2d1c:	80 91 0a 01 	lds	r24, 0x010A
    2d20:	84 30       	cpi	r24, 0x04	; 4
    2d22:	09 f0       	breq	.+2      	; 0x2d26 <system+0x470>
    2d24:	c3 c0       	rjmp	.+390    	; 0x2eac <system+0x5f6>
    2d26:	fe 01       	movw	r30, r28
    2d28:	e1 5a       	subi	r30, 0xA1	; 161
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	aa e7       	ldi	r26, 0x7A	; 122
    2d32:	b4 e4       	ldi	r27, 0x44	; 68
    2d34:	80 83       	st	Z, r24
    2d36:	91 83       	std	Z+1, r25	; 0x01
    2d38:	a2 83       	std	Z+2, r26	; 0x02
    2d3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3c:	8e 01       	movw	r16, r28
    2d3e:	05 5a       	subi	r16, 0xA5	; 165
    2d40:	1f 4f       	sbci	r17, 0xFF	; 255
    2d42:	fe 01       	movw	r30, r28
    2d44:	e1 5a       	subi	r30, 0xA1	; 161
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	60 81       	ld	r22, Z
    2d4a:	71 81       	ldd	r23, Z+1	; 0x01
    2d4c:	82 81       	ldd	r24, Z+2	; 0x02
    2d4e:	93 81       	ldd	r25, Z+3	; 0x03
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	4a ef       	ldi	r20, 0xFA	; 250
    2d56:	54 e4       	ldi	r21, 0x44	; 68
    2d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	f8 01       	movw	r30, r16
    2d62:	80 83       	st	Z, r24
    2d64:	91 83       	std	Z+1, r25	; 0x01
    2d66:	a2 83       	std	Z+2, r26	; 0x02
    2d68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e5 5a       	subi	r30, 0xA5	; 165
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	60 81       	ld	r22, Z
    2d72:	71 81       	ldd	r23, Z+1	; 0x01
    2d74:	82 81       	ldd	r24, Z+2	; 0x02
    2d76:	93 81       	ldd	r25, Z+3	; 0x03
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	40 e8       	ldi	r20, 0x80	; 128
    2d7e:	5f e3       	ldi	r21, 0x3F	; 63
    2d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d84:	88 23       	and	r24, r24
    2d86:	44 f4       	brge	.+16     	; 0x2d98 <system+0x4e2>
		__ticks = 1;
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e7 5a       	subi	r30, 0xA7	; 167
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	91 83       	std	Z+1, r25	; 0x01
    2d94:	80 83       	st	Z, r24
    2d96:	64 c0       	rjmp	.+200    	; 0x2e60 <system+0x5aa>
	else if (__tmp > 65535)
    2d98:	fe 01       	movw	r30, r28
    2d9a:	e5 5a       	subi	r30, 0xA5	; 165
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	60 81       	ld	r22, Z
    2da0:	71 81       	ldd	r23, Z+1	; 0x01
    2da2:	82 81       	ldd	r24, Z+2	; 0x02
    2da4:	93 81       	ldd	r25, Z+3	; 0x03
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	3f ef       	ldi	r19, 0xFF	; 255
    2daa:	4f e7       	ldi	r20, 0x7F	; 127
    2dac:	57 e4       	ldi	r21, 0x47	; 71
    2dae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db2:	18 16       	cp	r1, r24
    2db4:	0c f0       	brlt	.+2      	; 0x2db8 <system+0x502>
    2db6:	43 c0       	rjmp	.+134    	; 0x2e3e <system+0x588>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db8:	fe 01       	movw	r30, r28
    2dba:	e1 5a       	subi	r30, 0xA1	; 161
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	60 81       	ld	r22, Z
    2dc0:	71 81       	ldd	r23, Z+1	; 0x01
    2dc2:	82 81       	ldd	r24, Z+2	; 0x02
    2dc4:	93 81       	ldd	r25, Z+3	; 0x03
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e2       	ldi	r20, 0x20	; 32
    2dcc:	51 e4       	ldi	r21, 0x41	; 65
    2dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	8e 01       	movw	r16, r28
    2dd8:	07 5a       	subi	r16, 0xA7	; 167
    2dda:	1f 4f       	sbci	r17, 0xFF	; 255
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	f8 01       	movw	r30, r16
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	80 83       	st	Z, r24
    2dee:	1f c0       	rjmp	.+62     	; 0x2e2e <system+0x578>
    2df0:	fe 01       	movw	r30, r28
    2df2:	e9 5a       	subi	r30, 0xA9	; 169
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	88 ec       	ldi	r24, 0xC8	; 200
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
    2dfe:	fe 01       	movw	r30, r28
    2e00:	e9 5a       	subi	r30, 0xA9	; 169
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	80 81       	ld	r24, Z
    2e06:	91 81       	ldd	r25, Z+1	; 0x01
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <system+0x552>
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	e9 5a       	subi	r30, 0xA9	; 169
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	91 83       	std	Z+1, r25	; 0x01
    2e14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e16:	de 01       	movw	r26, r28
    2e18:	a7 5a       	subi	r26, 0xA7	; 167
    2e1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	e7 5a       	subi	r30, 0xA7	; 167
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	11 96       	adiw	r26, 0x01	; 1
    2e2a:	9c 93       	st	X, r25
    2e2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2e:	fe 01       	movw	r30, r28
    2e30:	e7 5a       	subi	r30, 0xA7	; 167
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	80 81       	ld	r24, Z
    2e36:	91 81       	ldd	r25, Z+1	; 0x01
    2e38:	00 97       	sbiw	r24, 0x00	; 0
    2e3a:	d1 f6       	brne	.-76     	; 0x2df0 <system+0x53a>
    2e3c:	27 c0       	rjmp	.+78     	; 0x2e8c <system+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3e:	8e 01       	movw	r16, r28
    2e40:	07 5a       	subi	r16, 0xA7	; 167
    2e42:	1f 4f       	sbci	r17, 0xFF	; 255
    2e44:	fe 01       	movw	r30, r28
    2e46:	e5 5a       	subi	r30, 0xA5	; 165
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	60 81       	ld	r22, Z
    2e4c:	71 81       	ldd	r23, Z+1	; 0x01
    2e4e:	82 81       	ldd	r24, Z+2	; 0x02
    2e50:	93 81       	ldd	r25, Z+3	; 0x03
    2e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	f8 01       	movw	r30, r16
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	80 83       	st	Z, r24
    2e60:	de 01       	movw	r26, r28
    2e62:	ab 5a       	subi	r26, 0xAB	; 171
    2e64:	bf 4f       	sbci	r27, 0xFF	; 255
    2e66:	fe 01       	movw	r30, r28
    2e68:	e7 5a       	subi	r30, 0xA7	; 167
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	80 81       	ld	r24, Z
    2e6e:	91 81       	ldd	r25, Z+1	; 0x01
    2e70:	8d 93       	st	X+, r24
    2e72:	9c 93       	st	X, r25
    2e74:	fe 01       	movw	r30, r28
    2e76:	eb 5a       	subi	r30, 0xAB	; 171
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	80 81       	ld	r24, Z
    2e7c:	91 81       	ldd	r25, Z+1	; 0x01
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	f1 f7       	brne	.-4      	; 0x2e7e <system+0x5c8>
    2e82:	fe 01       	movw	r30, r28
    2e84:	eb 5a       	subi	r30, 0xAB	; 171
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	91 83       	std	Z+1, r25	; 0x01
    2e8a:	80 83       	st	Z, r24
				{

					_delay_ms(1000);
					LCD_voidSendCommand(0x01);
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
					LCD_voidGoToXY(0, 1) ;
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	61 e0       	ldi	r22, 0x01	; 1
    2e96:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
					LCD_Display("Password:");
    2e9a:	82 e7       	ldi	r24, 0x72	; 114
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>
					SEVENSEGMENT_voidSetNumber(0 , PORTB);
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	61 e0       	ldi	r22, 0x01	; 1
    2ea6:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <SEVENSEGMENT_voidSetNumber>
    2eaa:	84 ce       	rjmp	.-760    	; 0x2bb4 <system+0x2fe>
				}

				else
				{
					LCD_voidGoToXY(1, 2) ;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	62 e0       	ldi	r22, 0x02	; 2
    2eb0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
					LCD_Display("ID Invalid!");
    2eb4:	8c e7       	ldi	r24, 0x7C	; 124
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ef 5a       	subi	r30, 0xAF	; 175
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e8       	ldi	r25, 0x80	; 128
    2ec6:	ab e3       	ldi	r26, 0x3B	; 59
    2ec8:	b5 e4       	ldi	r27, 0x45	; 69
    2eca:	80 83       	st	Z, r24
    2ecc:	91 83       	std	Z+1, r25	; 0x01
    2ece:	a2 83       	std	Z+2, r26	; 0x02
    2ed0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed2:	8e 01       	movw	r16, r28
    2ed4:	03 5b       	subi	r16, 0xB3	; 179
    2ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed8:	fe 01       	movw	r30, r28
    2eda:	ef 5a       	subi	r30, 0xAF	; 175
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	60 81       	ld	r22, Z
    2ee0:	71 81       	ldd	r23, Z+1	; 0x01
    2ee2:	82 81       	ldd	r24, Z+2	; 0x02
    2ee4:	93 81       	ldd	r25, Z+3	; 0x03
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	4a ef       	ldi	r20, 0xFA	; 250
    2eec:	54 e4       	ldi	r21, 0x44	; 68
    2eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	f8 01       	movw	r30, r16
    2ef8:	80 83       	st	Z, r24
    2efa:	91 83       	std	Z+1, r25	; 0x01
    2efc:	a2 83       	std	Z+2, r26	; 0x02
    2efe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f00:	fe 01       	movw	r30, r28
    2f02:	e3 5b       	subi	r30, 0xB3	; 179
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	60 81       	ld	r22, Z
    2f08:	71 81       	ldd	r23, Z+1	; 0x01
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	40 e8       	ldi	r20, 0x80	; 128
    2f14:	5f e3       	ldi	r21, 0x3F	; 63
    2f16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f1a:	88 23       	and	r24, r24
    2f1c:	44 f4       	brge	.+16     	; 0x2f2e <system+0x678>
		__ticks = 1;
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e5 5b       	subi	r30, 0xB5	; 181
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
    2f2c:	64 c0       	rjmp	.+200    	; 0x2ff6 <system+0x740>
	else if (__tmp > 65535)
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e3 5b       	subi	r30, 0xB3	; 179
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	60 81       	ld	r22, Z
    2f36:	71 81       	ldd	r23, Z+1	; 0x01
    2f38:	82 81       	ldd	r24, Z+2	; 0x02
    2f3a:	93 81       	ldd	r25, Z+3	; 0x03
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	3f ef       	ldi	r19, 0xFF	; 255
    2f40:	4f e7       	ldi	r20, 0x7F	; 127
    2f42:	57 e4       	ldi	r21, 0x47	; 71
    2f44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f48:	18 16       	cp	r1, r24
    2f4a:	0c f0       	brlt	.+2      	; 0x2f4e <system+0x698>
    2f4c:	43 c0       	rjmp	.+134    	; 0x2fd4 <system+0x71e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4e:	fe 01       	movw	r30, r28
    2f50:	ef 5a       	subi	r30, 0xAF	; 175
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	60 81       	ld	r22, Z
    2f56:	71 81       	ldd	r23, Z+1	; 0x01
    2f58:	82 81       	ldd	r24, Z+2	; 0x02
    2f5a:	93 81       	ldd	r25, Z+3	; 0x03
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e2       	ldi	r20, 0x20	; 32
    2f62:	51 e4       	ldi	r21, 0x41	; 65
    2f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	8e 01       	movw	r16, r28
    2f6e:	05 5b       	subi	r16, 0xB5	; 181
    2f70:	1f 4f       	sbci	r17, 0xFF	; 255
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	f8 01       	movw	r30, r16
    2f80:	91 83       	std	Z+1, r25	; 0x01
    2f82:	80 83       	st	Z, r24
    2f84:	1f c0       	rjmp	.+62     	; 0x2fc4 <system+0x70e>
    2f86:	fe 01       	movw	r30, r28
    2f88:	e7 5b       	subi	r30, 0xB7	; 183
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	88 ec       	ldi	r24, 0xC8	; 200
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	80 83       	st	Z, r24
    2f94:	fe 01       	movw	r30, r28
    2f96:	e7 5b       	subi	r30, 0xB7	; 183
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 81       	ld	r24, Z
    2f9c:	91 81       	ldd	r25, Z+1	; 0x01
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	f1 f7       	brne	.-4      	; 0x2f9e <system+0x6e8>
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e7 5b       	subi	r30, 0xB7	; 183
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	91 83       	std	Z+1, r25	; 0x01
    2faa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fac:	de 01       	movw	r26, r28
    2fae:	a5 5b       	subi	r26, 0xB5	; 181
    2fb0:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	e5 5b       	subi	r30, 0xB5	; 181
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	80 81       	ld	r24, Z
    2fba:	91 81       	ldd	r25, Z+1	; 0x01
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	11 96       	adiw	r26, 0x01	; 1
    2fc0:	9c 93       	st	X, r25
    2fc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	e5 5b       	subi	r30, 0xB5	; 181
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	80 81       	ld	r24, Z
    2fcc:	91 81       	ldd	r25, Z+1	; 0x01
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	d1 f6       	brne	.-76     	; 0x2f86 <system+0x6d0>
    2fd2:	27 c0       	rjmp	.+78     	; 0x3022 <system+0x76c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd4:	8e 01       	movw	r16, r28
    2fd6:	05 5b       	subi	r16, 0xB5	; 181
    2fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e3 5b       	subi	r30, 0xB3	; 179
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	60 81       	ld	r22, Z
    2fe2:	71 81       	ldd	r23, Z+1	; 0x01
    2fe4:	82 81       	ldd	r24, Z+2	; 0x02
    2fe6:	93 81       	ldd	r25, Z+3	; 0x03
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	f8 01       	movw	r30, r16
    2ff2:	91 83       	std	Z+1, r25	; 0x01
    2ff4:	80 83       	st	Z, r24
    2ff6:	de 01       	movw	r26, r28
    2ff8:	a9 5b       	subi	r26, 0xB9	; 185
    2ffa:	bf 4f       	sbci	r27, 0xFF	; 255
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e5 5b       	subi	r30, 0xB5	; 181
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	80 81       	ld	r24, Z
    3004:	91 81       	ldd	r25, Z+1	; 0x01
    3006:	8d 93       	st	X+, r24
    3008:	9c 93       	st	X, r25
    300a:	fe 01       	movw	r30, r28
    300c:	e9 5b       	subi	r30, 0xB9	; 185
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	80 81       	ld	r24, Z
    3012:	91 81       	ldd	r25, Z+1	; 0x01
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	f1 f7       	brne	.-4      	; 0x3014 <system+0x75e>
    3018:	fe 01       	movw	r30, r28
    301a:	e9 5b       	subi	r30, 0xB9	; 185
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	91 83       	std	Z+1, r25	; 0x01
    3020:	80 83       	st	Z, r24
					_delay_ms(3* 1000);
					LCD_voidSendCommand(0x01);
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
    3028:	c1 c4       	rjmp	.+2434   	; 0x39ac <system+0x10f6>

			 }
		}

		// get password
		else if(state == 1)
    302a:	80 91 10 01 	lds	r24, 0x0110
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	09 f0       	breq	.+2      	; 0x3034 <system+0x77e>
    3032:	f8 c2       	rjmp	.+1520   	; 0x3624 <system+0xd6e>
		{
			 if(key != NO_KEY && (key == 0 || key == 1 || key == 2 || key == 3 || key == 4 || key == 5 || key == 6 || key == 7 || key == 8 || key == 9))
    3034:	fe 01       	movw	r30, r28
    3036:	ef 58       	subi	r30, 0x8F	; 143
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	80 81       	ld	r24, Z
    303c:	80 33       	cpi	r24, 0x30	; 48
    303e:	09 f4       	brne	.+2      	; 0x3042 <system+0x78c>
    3040:	5f c0       	rjmp	.+190    	; 0x3100 <system+0x84a>
    3042:	fe 01       	movw	r30, r28
    3044:	ef 58       	subi	r30, 0x8F	; 143
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	80 81       	ld	r24, Z
    304a:	88 23       	and	r24, r24
    304c:	b1 f1       	breq	.+108    	; 0x30ba <system+0x804>
    304e:	fe 01       	movw	r30, r28
    3050:	ef 58       	subi	r30, 0x8F	; 143
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	80 81       	ld	r24, Z
    3056:	81 30       	cpi	r24, 0x01	; 1
    3058:	81 f1       	breq	.+96     	; 0x30ba <system+0x804>
    305a:	fe 01       	movw	r30, r28
    305c:	ef 58       	subi	r30, 0x8F	; 143
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	80 81       	ld	r24, Z
    3062:	82 30       	cpi	r24, 0x02	; 2
    3064:	51 f1       	breq	.+84     	; 0x30ba <system+0x804>
    3066:	fe 01       	movw	r30, r28
    3068:	ef 58       	subi	r30, 0x8F	; 143
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	80 81       	ld	r24, Z
    306e:	83 30       	cpi	r24, 0x03	; 3
    3070:	21 f1       	breq	.+72     	; 0x30ba <system+0x804>
    3072:	fe 01       	movw	r30, r28
    3074:	ef 58       	subi	r30, 0x8F	; 143
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	80 81       	ld	r24, Z
    307a:	84 30       	cpi	r24, 0x04	; 4
    307c:	f1 f0       	breq	.+60     	; 0x30ba <system+0x804>
    307e:	fe 01       	movw	r30, r28
    3080:	ef 58       	subi	r30, 0x8F	; 143
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	80 81       	ld	r24, Z
    3086:	85 30       	cpi	r24, 0x05	; 5
    3088:	c1 f0       	breq	.+48     	; 0x30ba <system+0x804>
    308a:	fe 01       	movw	r30, r28
    308c:	ef 58       	subi	r30, 0x8F	; 143
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	80 81       	ld	r24, Z
    3092:	86 30       	cpi	r24, 0x06	; 6
    3094:	91 f0       	breq	.+36     	; 0x30ba <system+0x804>
    3096:	fe 01       	movw	r30, r28
    3098:	ef 58       	subi	r30, 0x8F	; 143
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	80 81       	ld	r24, Z
    309e:	87 30       	cpi	r24, 0x07	; 7
    30a0:	61 f0       	breq	.+24     	; 0x30ba <system+0x804>
    30a2:	fe 01       	movw	r30, r28
    30a4:	ef 58       	subi	r30, 0x8F	; 143
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 81       	ld	r24, Z
    30aa:	88 30       	cpi	r24, 0x08	; 8
    30ac:	31 f0       	breq	.+12     	; 0x30ba <system+0x804>
    30ae:	fe 01       	movw	r30, r28
    30b0:	ef 58       	subi	r30, 0x8F	; 143
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	80 81       	ld	r24, Z
    30b6:	89 30       	cpi	r24, 0x09	; 9
    30b8:	19 f5       	brne	.+70     	; 0x3100 <system+0x84a>
			 {
				 pass = 10 * pass + (u16)key ;
    30ba:	80 91 0e 01 	lds	r24, 0x010E
    30be:	90 91 0f 01 	lds	r25, 0x010F
    30c2:	9c 01       	movw	r18, r24
    30c4:	22 0f       	add	r18, r18
    30c6:	33 1f       	adc	r19, r19
    30c8:	c9 01       	movw	r24, r18
    30ca:	88 0f       	add	r24, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	88 0f       	add	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	28 0f       	add	r18, r24
    30d4:	39 1f       	adc	r19, r25
    30d6:	fe 01       	movw	r30, r28
    30d8:	ef 58       	subi	r30, 0x8F	; 143
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	80 81       	ld	r24, Z
    30de:	88 2f       	mov	r24, r24
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	82 0f       	add	r24, r18
    30e4:	93 1f       	adc	r25, r19
    30e6:	90 93 0f 01 	sts	0x010F, r25
    30ea:	80 93 0e 01 	sts	0x010E, r24
				 LCD_voidWriteNumber((u16)key) ;
    30ee:	fe 01       	movw	r30, r28
    30f0:	ef 58       	subi	r30, 0x8F	; 143
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	80 81       	ld	r24, Z
    30f6:	88 2f       	mov	r24, r24
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_voidWriteNumber>
    30fe:	5a cd       	rjmp	.-1356   	; 0x2bb4 <system+0x2fe>
			 }

			 else if(key != NO_KEY && key == '=')
    3100:	fe 01       	movw	r30, r28
    3102:	ef 58       	subi	r30, 0x8F	; 143
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	80 81       	ld	r24, Z
    3108:	80 33       	cpi	r24, 0x30	; 48
    310a:	09 f4       	brne	.+2      	; 0x310e <system+0x858>
    310c:	53 cd       	rjmp	.-1370   	; 0x2bb4 <system+0x2fe>
    310e:	fe 01       	movw	r30, r28
    3110:	ef 58       	subi	r30, 0x8F	; 143
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	80 81       	ld	r24, Z
    3116:	8d 33       	cpi	r24, 0x3D	; 61
    3118:	09 f0       	breq	.+2      	; 0x311c <system+0x866>
    311a:	4c cd       	rjmp	.-1384   	; 0x2bb4 <system+0x2fe>
			 {

				arr_pass = pass_arr(pass) ;
    311c:	80 91 0e 01 	lds	r24, 0x010E
    3120:	90 91 0f 01 	lds	r25, 0x010F
    3124:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <pass_arr>
    3128:	fe 01       	movw	r30, r28
    312a:	ea 58       	subi	r30, 0x8A	; 138
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	91 83       	std	Z+1, r25	; 0x01
    3130:	80 83       	st	Z, r24

				 pass_copy = pass ;
    3132:	80 91 0e 01 	lds	r24, 0x010E
    3136:	90 91 0f 01 	lds	r25, 0x010F
    313a:	90 93 1a 01 	sts	0x011A, r25
    313e:	80 93 19 01 	sts	0x0119, r24
    3142:	13 c0       	rjmp	.+38     	; 0x316a <system+0x8b4>
				 while(pass_copy != 0)
				 {
					pass_copy /= 10 ;
    3144:	80 91 19 01 	lds	r24, 0x0119
    3148:	90 91 1a 01 	lds	r25, 0x011A
    314c:	2a e0       	ldi	r18, 0x0A	; 10
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	b9 01       	movw	r22, r18
    3152:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__udivmodhi4>
    3156:	cb 01       	movw	r24, r22
    3158:	90 93 1a 01 	sts	0x011A, r25
    315c:	80 93 19 01 	sts	0x0119, r24
					pass_digit += 1 ;
    3160:	80 91 0b 01 	lds	r24, 0x010B
    3164:	8f 5f       	subi	r24, 0xFF	; 255
    3166:	80 93 0b 01 	sts	0x010B, r24
			 {

				arr_pass = pass_arr(pass) ;

				 pass_copy = pass ;
				 while(pass_copy != 0)
    316a:	80 91 19 01 	lds	r24, 0x0119
    316e:	90 91 1a 01 	lds	r25, 0x011A
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	39 f7       	brne	.-50     	; 0x3144 <system+0x88e>
				 {
					pass_copy /= 10 ;
					pass_digit += 1 ;
				 }

				 if(pass_digit == 4 && arr_id[0] == arr_pass[3] && arr_id[1] == arr_pass[2] && arr_id[2] == arr_pass[1] && arr_id[3] == arr_pass[0])
    3176:	80 91 0b 01 	lds	r24, 0x010B
    317a:	84 30       	cpi	r24, 0x04	; 4
    317c:	09 f0       	breq	.+2      	; 0x3180 <system+0x8ca>
    317e:	f9 c0       	rjmp	.+498    	; 0x3372 <system+0xabc>
    3180:	fe 01       	movw	r30, r28
    3182:	e8 58       	subi	r30, 0x88	; 136
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	01 90       	ld	r0, Z+
    3188:	f0 81       	ld	r31, Z
    318a:	e0 2d       	mov	r30, r0
    318c:	20 81       	ld	r18, Z
    318e:	fe 01       	movw	r30, r28
    3190:	ea 58       	subi	r30, 0x8A	; 138
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	80 81       	ld	r24, Z
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	fc 01       	movw	r30, r24
    319a:	33 96       	adiw	r30, 0x03	; 3
    319c:	80 81       	ld	r24, Z
    319e:	28 17       	cp	r18, r24
    31a0:	09 f0       	breq	.+2      	; 0x31a4 <system+0x8ee>
    31a2:	e7 c0       	rjmp	.+462    	; 0x3372 <system+0xabc>
    31a4:	fe 01       	movw	r30, r28
    31a6:	e8 58       	subi	r30, 0x88	; 136
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	80 81       	ld	r24, Z
    31ac:	91 81       	ldd	r25, Z+1	; 0x01
    31ae:	fc 01       	movw	r30, r24
    31b0:	31 96       	adiw	r30, 0x01	; 1
    31b2:	20 81       	ld	r18, Z
    31b4:	fe 01       	movw	r30, r28
    31b6:	ea 58       	subi	r30, 0x8A	; 138
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	80 81       	ld	r24, Z
    31bc:	91 81       	ldd	r25, Z+1	; 0x01
    31be:	fc 01       	movw	r30, r24
    31c0:	32 96       	adiw	r30, 0x02	; 2
    31c2:	80 81       	ld	r24, Z
    31c4:	28 17       	cp	r18, r24
    31c6:	09 f0       	breq	.+2      	; 0x31ca <system+0x914>
    31c8:	d4 c0       	rjmp	.+424    	; 0x3372 <system+0xabc>
    31ca:	fe 01       	movw	r30, r28
    31cc:	e8 58       	subi	r30, 0x88	; 136
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	80 81       	ld	r24, Z
    31d2:	91 81       	ldd	r25, Z+1	; 0x01
    31d4:	fc 01       	movw	r30, r24
    31d6:	32 96       	adiw	r30, 0x02	; 2
    31d8:	20 81       	ld	r18, Z
    31da:	fe 01       	movw	r30, r28
    31dc:	ea 58       	subi	r30, 0x8A	; 138
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	80 81       	ld	r24, Z
    31e2:	91 81       	ldd	r25, Z+1	; 0x01
    31e4:	fc 01       	movw	r30, r24
    31e6:	31 96       	adiw	r30, 0x01	; 1
    31e8:	80 81       	ld	r24, Z
    31ea:	28 17       	cp	r18, r24
    31ec:	09 f0       	breq	.+2      	; 0x31f0 <system+0x93a>
    31ee:	c1 c0       	rjmp	.+386    	; 0x3372 <system+0xabc>
    31f0:	fe 01       	movw	r30, r28
    31f2:	e8 58       	subi	r30, 0x88	; 136
    31f4:	ff 4f       	sbci	r31, 0xFF	; 255
    31f6:	80 81       	ld	r24, Z
    31f8:	91 81       	ldd	r25, Z+1	; 0x01
    31fa:	fc 01       	movw	r30, r24
    31fc:	33 96       	adiw	r30, 0x03	; 3
    31fe:	90 81       	ld	r25, Z
    3200:	fe 01       	movw	r30, r28
    3202:	ea 58       	subi	r30, 0x8A	; 138
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	01 90       	ld	r0, Z+
    3208:	f0 81       	ld	r31, Z
    320a:	e0 2d       	mov	r30, r0
    320c:	80 81       	ld	r24, Z
    320e:	98 17       	cp	r25, r24
    3210:	09 f0       	breq	.+2      	; 0x3214 <system+0x95e>
    3212:	af c0       	rjmp	.+350    	; 0x3372 <system+0xabc>
				 {
					 LCD_voidSendCommand(0x01);
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
					 LCD_voidGoToXY(0, 1) ;
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	61 e0       	ldi	r22, 0x01	; 1
    321e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
					 LCD_Display("System Unlock");
    3222:	88 e8       	ldi	r24, 0x88	; 136
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>
					 LCD_voidGoToXY(1, 1) ;
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	61 e0       	ldi	r22, 0x01	; 1
    322e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
					 LCD_Display("Stepper control");
    3232:	86 e9       	ldi	r24, 0x96	; 150
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>
    323a:	fe 01       	movw	r30, r28
    323c:	ed 5b       	subi	r30, 0xBD	; 189
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	90 e8       	ldi	r25, 0x80	; 128
    3244:	ab e3       	ldi	r26, 0x3B	; 59
    3246:	b5 e4       	ldi	r27, 0x45	; 69
    3248:	80 83       	st	Z, r24
    324a:	91 83       	std	Z+1, r25	; 0x01
    324c:	a2 83       	std	Z+2, r26	; 0x02
    324e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3250:	8e 01       	movw	r16, r28
    3252:	01 5c       	subi	r16, 0xC1	; 193
    3254:	1f 4f       	sbci	r17, 0xFF	; 255
    3256:	fe 01       	movw	r30, r28
    3258:	ed 5b       	subi	r30, 0xBD	; 189
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	82 81       	ldd	r24, Z+2	; 0x02
    3262:	93 81       	ldd	r25, Z+3	; 0x03
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	4a ef       	ldi	r20, 0xFA	; 250
    326a:	54 e4       	ldi	r21, 0x44	; 68
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	f8 01       	movw	r30, r16
    3276:	80 83       	st	Z, r24
    3278:	91 83       	std	Z+1, r25	; 0x01
    327a:	a2 83       	std	Z+2, r26	; 0x02
    327c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    327e:	fe 01       	movw	r30, r28
    3280:	ff 96       	adiw	r30, 0x3f	; 63
    3282:	60 81       	ld	r22, Z
    3284:	71 81       	ldd	r23, Z+1	; 0x01
    3286:	82 81       	ldd	r24, Z+2	; 0x02
    3288:	93 81       	ldd	r25, Z+3	; 0x03
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	40 e8       	ldi	r20, 0x80	; 128
    3290:	5f e3       	ldi	r21, 0x3F	; 63
    3292:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3296:	88 23       	and	r24, r24
    3298:	2c f4       	brge	.+10     	; 0x32a4 <system+0x9ee>
		__ticks = 1;
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	9e af       	std	Y+62, r25	; 0x3e
    32a0:	8d af       	std	Y+61, r24	; 0x3d
    32a2:	46 c0       	rjmp	.+140    	; 0x3330 <system+0xa7a>
	else if (__tmp > 65535)
    32a4:	fe 01       	movw	r30, r28
    32a6:	ff 96       	adiw	r30, 0x3f	; 63
    32a8:	60 81       	ld	r22, Z
    32aa:	71 81       	ldd	r23, Z+1	; 0x01
    32ac:	82 81       	ldd	r24, Z+2	; 0x02
    32ae:	93 81       	ldd	r25, Z+3	; 0x03
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	3f ef       	ldi	r19, 0xFF	; 255
    32b4:	4f e7       	ldi	r20, 0x7F	; 127
    32b6:	57 e4       	ldi	r21, 0x47	; 71
    32b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32bc:	18 16       	cp	r1, r24
    32be:	64 f5       	brge	.+88     	; 0x3318 <system+0xa62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c0:	fe 01       	movw	r30, r28
    32c2:	ed 5b       	subi	r30, 0xBD	; 189
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	60 81       	ld	r22, Z
    32c8:	71 81       	ldd	r23, Z+1	; 0x01
    32ca:	82 81       	ldd	r24, Z+2	; 0x02
    32cc:	93 81       	ldd	r25, Z+3	; 0x03
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e2       	ldi	r20, 0x20	; 32
    32d4:	51 e4       	ldi	r21, 0x41	; 65
    32d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	bc 01       	movw	r22, r24
    32e0:	cd 01       	movw	r24, r26
    32e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	9e af       	std	Y+62, r25	; 0x3e
    32ec:	8d af       	std	Y+61, r24	; 0x3d
    32ee:	0f c0       	rjmp	.+30     	; 0x330e <system+0xa58>
    32f0:	88 ec       	ldi	r24, 0xC8	; 200
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	9c af       	std	Y+60, r25	; 0x3c
    32f6:	8b af       	std	Y+59, r24	; 0x3b
    32f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    32fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	f1 f7       	brne	.-4      	; 0x32fc <system+0xa46>
    3300:	9c af       	std	Y+60, r25	; 0x3c
    3302:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3304:	8d ad       	ldd	r24, Y+61	; 0x3d
    3306:	9e ad       	ldd	r25, Y+62	; 0x3e
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	9e af       	std	Y+62, r25	; 0x3e
    330c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3310:	9e ad       	ldd	r25, Y+62	; 0x3e
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	69 f7       	brne	.-38     	; 0x32f0 <system+0xa3a>
    3316:	16 c0       	rjmp	.+44     	; 0x3344 <system+0xa8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3318:	fe 01       	movw	r30, r28
    331a:	ff 96       	adiw	r30, 0x3f	; 63
    331c:	60 81       	ld	r22, Z
    331e:	71 81       	ldd	r23, Z+1	; 0x01
    3320:	82 81       	ldd	r24, Z+2	; 0x02
    3322:	93 81       	ldd	r25, Z+3	; 0x03
    3324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	9e af       	std	Y+62, r25	; 0x3e
    332e:	8d af       	std	Y+61, r24	; 0x3d
    3330:	8d ad       	ldd	r24, Y+61	; 0x3d
    3332:	9e ad       	ldd	r25, Y+62	; 0x3e
    3334:	9a af       	std	Y+58, r25	; 0x3a
    3336:	89 af       	std	Y+57, r24	; 0x39
    3338:	89 ad       	ldd	r24, Y+57	; 0x39
    333a:	9a ad       	ldd	r25, Y+58	; 0x3a
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <system+0xa86>
    3340:	9a af       	std	Y+58, r25	; 0x3a
    3342:	89 af       	std	Y+57, r24	; 0x39

					 _delay_ms(3 *1000) ;

					 state = 2 ;
    3344:	82 e0       	ldi	r24, 0x02	; 2
    3346:	80 93 10 01 	sts	0x0110, r24

					 LCD_voidSendCommand(0x01);
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
					 LCD_voidGoToXY(0, 1) ;
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	61 e0       	ldi	r22, 0x01	; 1
    3354:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
					 LCD_Display("Enter Direction") ;
    3358:	86 ea       	ldi	r24, 0xA6	; 166
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>
					 LCD_voidGoToXY(1, 1) ;
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	61 e0       	ldi	r22, 0x01	; 1
    3364:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
					 LCD_Display("1:CW  2:CCW") ;
    3368:	86 eb       	ldi	r24, 0xB6	; 182
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>
    3370:	21 cc       	rjmp	.-1982   	; 0x2bb4 <system+0x2fe>

				 }
				 else
				 {
					 if(count <= 3)
    3372:	fe 01       	movw	r30, r28
    3374:	e6 58       	subi	r30, 0x86	; 134
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	80 81       	ld	r24, Z
    337a:	84 30       	cpi	r24, 0x04	; 4
    337c:	08 f0       	brcs	.+2      	; 0x3380 <system+0xaca>
    337e:	a7 c0       	rjmp	.+334    	; 0x34ce <system+0xc18>
					 {
						 LCD_voidSendCommand(0x01);
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
						 LCD_voidGoToXY(0 , 1) ;
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	61 e0       	ldi	r22, 0x01	; 1
    338a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
						 LCD_Display("Try again:") ;
    338e:	82 ec       	ldi	r24, 0xC2	; 194
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>

						 SEVENSEGMENT_voidSetNumber(count , PORTB) ;
    3396:	fe 01       	movw	r30, r28
    3398:	e6 58       	subi	r30, 0x86	; 134
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	80 81       	ld	r24, Z
    339e:	61 e0       	ldi	r22, 0x01	; 1
    33a0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <SEVENSEGMENT_voidSetNumber>

						 LCD_voidWriteSpecialChar(try_again , 1 , 0 , 12);
    33a4:	ce 01       	movw	r24, r28
    33a6:	8d 57       	subi	r24, 0x7D	; 125
    33a8:	9f 4f       	sbci	r25, 0xFF	; 255
    33aa:	61 e0       	ldi	r22, 0x01	; 1
    33ac:	40 e0       	ldi	r20, 0x00	; 0
    33ae:	2c e0       	ldi	r18, 0x0C	; 12
    33b0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_voidWriteSpecialChar>
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	aa e7       	ldi	r26, 0x7A	; 122
    33ba:	b4 e4       	ldi	r27, 0x44	; 68
    33bc:	8d ab       	std	Y+53, r24	; 0x35
    33be:	9e ab       	std	Y+54, r25	; 0x36
    33c0:	af ab       	std	Y+55, r26	; 0x37
    33c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c4:	6d a9       	ldd	r22, Y+53	; 0x35
    33c6:	7e a9       	ldd	r23, Y+54	; 0x36
    33c8:	8f a9       	ldd	r24, Y+55	; 0x37
    33ca:	98 ad       	ldd	r25, Y+56	; 0x38
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	4a ef       	ldi	r20, 0xFA	; 250
    33d2:	54 e4       	ldi	r21, 0x44	; 68
    33d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	89 ab       	std	Y+49, r24	; 0x31
    33de:	9a ab       	std	Y+50, r25	; 0x32
    33e0:	ab ab       	std	Y+51, r26	; 0x33
    33e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33e4:	69 a9       	ldd	r22, Y+49	; 0x31
    33e6:	7a a9       	ldd	r23, Y+50	; 0x32
    33e8:	8b a9       	ldd	r24, Y+51	; 0x33
    33ea:	9c a9       	ldd	r25, Y+52	; 0x34
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e8       	ldi	r20, 0x80	; 128
    33f2:	5f e3       	ldi	r21, 0x3F	; 63
    33f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33f8:	88 23       	and	r24, r24
    33fa:	2c f4       	brge	.+10     	; 0x3406 <system+0xb50>
		__ticks = 1;
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	98 ab       	std	Y+48, r25	; 0x30
    3402:	8f a7       	std	Y+47, r24	; 0x2f
    3404:	3f c0       	rjmp	.+126    	; 0x3484 <system+0xbce>
	else if (__tmp > 65535)
    3406:	69 a9       	ldd	r22, Y+49	; 0x31
    3408:	7a a9       	ldd	r23, Y+50	; 0x32
    340a:	8b a9       	ldd	r24, Y+51	; 0x33
    340c:	9c a9       	ldd	r25, Y+52	; 0x34
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	3f ef       	ldi	r19, 0xFF	; 255
    3412:	4f e7       	ldi	r20, 0x7F	; 127
    3414:	57 e4       	ldi	r21, 0x47	; 71
    3416:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    341a:	18 16       	cp	r1, r24
    341c:	4c f5       	brge	.+82     	; 0x3470 <system+0xbba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    341e:	6d a9       	ldd	r22, Y+53	; 0x35
    3420:	7e a9       	ldd	r23, Y+54	; 0x36
    3422:	8f a9       	ldd	r24, Y+55	; 0x37
    3424:	98 ad       	ldd	r25, Y+56	; 0x38
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	40 e2       	ldi	r20, 0x20	; 32
    342c:	51 e4       	ldi	r21, 0x41	; 65
    342e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	bc 01       	movw	r22, r24
    3438:	cd 01       	movw	r24, r26
    343a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	98 ab       	std	Y+48, r25	; 0x30
    3444:	8f a7       	std	Y+47, r24	; 0x2f
    3446:	0f c0       	rjmp	.+30     	; 0x3466 <system+0xbb0>
    3448:	88 ec       	ldi	r24, 0xC8	; 200
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	9e a7       	std	Y+46, r25	; 0x2e
    344e:	8d a7       	std	Y+45, r24	; 0x2d
    3450:	8d a5       	ldd	r24, Y+45	; 0x2d
    3452:	9e a5       	ldd	r25, Y+46	; 0x2e
    3454:	01 97       	sbiw	r24, 0x01	; 1
    3456:	f1 f7       	brne	.-4      	; 0x3454 <system+0xb9e>
    3458:	9e a7       	std	Y+46, r25	; 0x2e
    345a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    345c:	8f a5       	ldd	r24, Y+47	; 0x2f
    345e:	98 a9       	ldd	r25, Y+48	; 0x30
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	98 ab       	std	Y+48, r25	; 0x30
    3464:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3466:	8f a5       	ldd	r24, Y+47	; 0x2f
    3468:	98 a9       	ldd	r25, Y+48	; 0x30
    346a:	00 97       	sbiw	r24, 0x00	; 0
    346c:	69 f7       	brne	.-38     	; 0x3448 <system+0xb92>
    346e:	14 c0       	rjmp	.+40     	; 0x3498 <system+0xbe2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3470:	69 a9       	ldd	r22, Y+49	; 0x31
    3472:	7a a9       	ldd	r23, Y+50	; 0x32
    3474:	8b a9       	ldd	r24, Y+51	; 0x33
    3476:	9c a9       	ldd	r25, Y+52	; 0x34
    3478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	98 ab       	std	Y+48, r25	; 0x30
    3482:	8f a7       	std	Y+47, r24	; 0x2f
    3484:	8f a5       	ldd	r24, Y+47	; 0x2f
    3486:	98 a9       	ldd	r25, Y+48	; 0x30
    3488:	9c a7       	std	Y+44, r25	; 0x2c
    348a:	8b a7       	std	Y+43, r24	; 0x2b
    348c:	8b a5       	ldd	r24, Y+43	; 0x2b
    348e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3490:	01 97       	sbiw	r24, 0x01	; 1
    3492:	f1 f7       	brne	.-4      	; 0x3490 <system+0xbda>
    3494:	9c a7       	std	Y+44, r25	; 0x2c
    3496:	8b a7       	std	Y+43, r24	; 0x2b
						 _delay_ms(1000);

						 LCD_voidGoToXY(1, 1) ;
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	61 e0       	ldi	r22, 0x01	; 1
    349c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
						 LCD_Display("Password:") ;
    34a0:	82 e7       	ldi	r24, 0x72	; 114
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>
						 count += 1;
    34a8:	de 01       	movw	r26, r28
    34aa:	a6 58       	subi	r26, 0x86	; 134
    34ac:	bf 4f       	sbci	r27, 0xFF	; 255
    34ae:	fe 01       	movw	r30, r28
    34b0:	e6 58       	subi	r30, 0x86	; 134
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	80 81       	ld	r24, Z
    34b6:	8f 5f       	subi	r24, 0xFF	; 255
    34b8:	8c 93       	st	X, r24
						 state = 1;
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	80 93 10 01 	sts	0x0110, r24
						 pass = 0;
    34c0:	10 92 0f 01 	sts	0x010F, r1
    34c4:	10 92 0e 01 	sts	0x010E, r1
						 pass_digit = 0;
    34c8:	10 92 0b 01 	sts	0x010B, r1
    34cc:	73 cb       	rjmp	.-2330   	; 0x2bb4 <system+0x2fe>
						 continue ;
					 }
					 else
					 {
						 LCD_voidSendCommand(0x01);
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
						 LCD_voidGoToXY(0, 3) ;
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	63 e0       	ldi	r22, 0x03	; 3
    34d8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
						 LCD_Display("Bye Bye") ;
    34dc:	8d ec       	ldi	r24, 0xCD	; 205
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>
						 LCD_voidWriteSpecialChar(bye , 2 , 0 , 12);
    34e4:	ce 01       	movw	r24, r28
    34e6:	85 58       	subi	r24, 0x85	; 133
    34e8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ea:	62 e0       	ldi	r22, 0x02	; 2
    34ec:	40 e0       	ldi	r20, 0x00	; 0
    34ee:	2c e0       	ldi	r18, 0x0C	; 12
    34f0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_voidWriteSpecialChar>

						 for (i = 5 ; i > 1 ; i--)
    34f4:	fe 01       	movw	r30, r28
    34f6:	ed 58       	subi	r30, 0x8D	; 141
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	85 e0       	ldi	r24, 0x05	; 5
    34fc:	80 83       	st	Z, r24
    34fe:	83 c0       	rjmp	.+262    	; 0x3606 <system+0xd50>
						 {
							 SEVENSEGMENT_voidSetNumber(i-2 , PORTB);
    3500:	fe 01       	movw	r30, r28
    3502:	ed 58       	subi	r30, 0x8D	; 141
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	80 81       	ld	r24, Z
    3508:	82 50       	subi	r24, 0x02	; 2
    350a:	61 e0       	ldi	r22, 0x01	; 1
    350c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <SEVENSEGMENT_voidSetNumber>
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	aa e7       	ldi	r26, 0x7A	; 122
    3516:	b4 e4       	ldi	r27, 0x44	; 68
    3518:	8f a3       	std	Y+39, r24	; 0x27
    351a:	98 a7       	std	Y+40, r25	; 0x28
    351c:	a9 a7       	std	Y+41, r26	; 0x29
    351e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3520:	6f a1       	ldd	r22, Y+39	; 0x27
    3522:	78 a5       	ldd	r23, Y+40	; 0x28
    3524:	89 a5       	ldd	r24, Y+41	; 0x29
    3526:	9a a5       	ldd	r25, Y+42	; 0x2a
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	4a ef       	ldi	r20, 0xFA	; 250
    352e:	54 e4       	ldi	r21, 0x44	; 68
    3530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	8b a3       	std	Y+35, r24	; 0x23
    353a:	9c a3       	std	Y+36, r25	; 0x24
    353c:	ad a3       	std	Y+37, r26	; 0x25
    353e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3540:	6b a1       	ldd	r22, Y+35	; 0x23
    3542:	7c a1       	ldd	r23, Y+36	; 0x24
    3544:	8d a1       	ldd	r24, Y+37	; 0x25
    3546:	9e a1       	ldd	r25, Y+38	; 0x26
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e8       	ldi	r20, 0x80	; 128
    354e:	5f e3       	ldi	r21, 0x3F	; 63
    3550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3554:	88 23       	and	r24, r24
    3556:	2c f4       	brge	.+10     	; 0x3562 <system+0xcac>
		__ticks = 1;
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	9a a3       	std	Y+34, r25	; 0x22
    355e:	89 a3       	std	Y+33, r24	; 0x21
    3560:	3f c0       	rjmp	.+126    	; 0x35e0 <system+0xd2a>
	else if (__tmp > 65535)
    3562:	6b a1       	ldd	r22, Y+35	; 0x23
    3564:	7c a1       	ldd	r23, Y+36	; 0x24
    3566:	8d a1       	ldd	r24, Y+37	; 0x25
    3568:	9e a1       	ldd	r25, Y+38	; 0x26
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	3f ef       	ldi	r19, 0xFF	; 255
    356e:	4f e7       	ldi	r20, 0x7F	; 127
    3570:	57 e4       	ldi	r21, 0x47	; 71
    3572:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3576:	18 16       	cp	r1, r24
    3578:	4c f5       	brge	.+82     	; 0x35cc <system+0xd16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357a:	6f a1       	ldd	r22, Y+39	; 0x27
    357c:	78 a5       	ldd	r23, Y+40	; 0x28
    357e:	89 a5       	ldd	r24, Y+41	; 0x29
    3580:	9a a5       	ldd	r25, Y+42	; 0x2a
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e2       	ldi	r20, 0x20	; 32
    3588:	51 e4       	ldi	r21, 0x41	; 65
    358a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	bc 01       	movw	r22, r24
    3594:	cd 01       	movw	r24, r26
    3596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	9a a3       	std	Y+34, r25	; 0x22
    35a0:	89 a3       	std	Y+33, r24	; 0x21
    35a2:	0f c0       	rjmp	.+30     	; 0x35c2 <system+0xd0c>
    35a4:	88 ec       	ldi	r24, 0xC8	; 200
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	98 a3       	std	Y+32, r25	; 0x20
    35aa:	8f 8f       	std	Y+31, r24	; 0x1f
    35ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35ae:	98 a1       	ldd	r25, Y+32	; 0x20
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	f1 f7       	brne	.-4      	; 0x35b0 <system+0xcfa>
    35b4:	98 a3       	std	Y+32, r25	; 0x20
    35b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b8:	89 a1       	ldd	r24, Y+33	; 0x21
    35ba:	9a a1       	ldd	r25, Y+34	; 0x22
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	9a a3       	std	Y+34, r25	; 0x22
    35c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c2:	89 a1       	ldd	r24, Y+33	; 0x21
    35c4:	9a a1       	ldd	r25, Y+34	; 0x22
    35c6:	00 97       	sbiw	r24, 0x00	; 0
    35c8:	69 f7       	brne	.-38     	; 0x35a4 <system+0xcee>
    35ca:	14 c0       	rjmp	.+40     	; 0x35f4 <system+0xd3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35cc:	6b a1       	ldd	r22, Y+35	; 0x23
    35ce:	7c a1       	ldd	r23, Y+36	; 0x24
    35d0:	8d a1       	ldd	r24, Y+37	; 0x25
    35d2:	9e a1       	ldd	r25, Y+38	; 0x26
    35d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	9a a3       	std	Y+34, r25	; 0x22
    35de:	89 a3       	std	Y+33, r24	; 0x21
    35e0:	89 a1       	ldd	r24, Y+33	; 0x21
    35e2:	9a a1       	ldd	r25, Y+34	; 0x22
    35e4:	9e 8f       	std	Y+30, r25	; 0x1e
    35e6:	8d 8f       	std	Y+29, r24	; 0x1d
    35e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	f1 f7       	brne	.-4      	; 0x35ec <system+0xd36>
    35f0:	9e 8f       	std	Y+30, r25	; 0x1e
    35f2:	8d 8f       	std	Y+29, r24	; 0x1d
						 LCD_voidSendCommand(0x01);
						 LCD_voidGoToXY(0, 3) ;
						 LCD_Display("Bye Bye") ;
						 LCD_voidWriteSpecialChar(bye , 2 , 0 , 12);

						 for (i = 5 ; i > 1 ; i--)
    35f4:	de 01       	movw	r26, r28
    35f6:	ad 58       	subi	r26, 0x8D	; 141
    35f8:	bf 4f       	sbci	r27, 0xFF	; 255
    35fa:	fe 01       	movw	r30, r28
    35fc:	ed 58       	subi	r30, 0x8D	; 141
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	80 81       	ld	r24, Z
    3602:	81 50       	subi	r24, 0x01	; 1
    3604:	8c 93       	st	X, r24
    3606:	fe 01       	movw	r30, r28
    3608:	ed 58       	subi	r30, 0x8D	; 141
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	80 81       	ld	r24, Z
    360e:	82 30       	cpi	r24, 0x02	; 2
    3610:	08 f0       	brcs	.+2      	; 0x3614 <system+0xd5e>
    3612:	76 cf       	rjmp	.-276    	; 0x3500 <system+0xc4a>
						 {
							 SEVENSEGMENT_voidSetNumber(i-2 , PORTB);
							 _delay_ms(1000) ;
						 }

						 LCD_voidSendCommand(0x01);
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
						 SEVENSEGMENT_voidSetNumber(' ' , PORTB);
    361a:	80 e2       	ldi	r24, 0x20	; 32
    361c:	61 e0       	ldi	r22, 0x01	; 1
    361e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <SEVENSEGMENT_voidSetNumber>
    3622:	c4 c1       	rjmp	.+904    	; 0x39ac <system+0x10f6>
			 }
		}

		// function that control motor if password is write

		else if(state == 2)
    3624:	80 91 10 01 	lds	r24, 0x0110
    3628:	82 30       	cpi	r24, 0x02	; 2
    362a:	79 f5       	brne	.+94     	; 0x368a <system+0xdd4>
		{

			 if(key != NO_KEY && (key == 1 || key == 2 ))
    362c:	fe 01       	movw	r30, r28
    362e:	ef 58       	subi	r30, 0x8F	; 143
    3630:	ff 4f       	sbci	r31, 0xFF	; 255
    3632:	80 81       	ld	r24, Z
    3634:	80 33       	cpi	r24, 0x30	; 48
    3636:	09 f4       	brne	.+2      	; 0x363a <system+0xd84>
    3638:	bd ca       	rjmp	.-2694   	; 0x2bb4 <system+0x2fe>
    363a:	fe 01       	movw	r30, r28
    363c:	ef 58       	subi	r30, 0x8F	; 143
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	80 81       	ld	r24, Z
    3642:	81 30       	cpi	r24, 0x01	; 1
    3644:	39 f0       	breq	.+14     	; 0x3654 <system+0xd9e>
    3646:	fe 01       	movw	r30, r28
    3648:	ef 58       	subi	r30, 0x8F	; 143
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	80 81       	ld	r24, Z
    364e:	82 30       	cpi	r24, 0x02	; 2
    3650:	09 f0       	breq	.+2      	; 0x3654 <system+0xd9e>
    3652:	b0 ca       	rjmp	.-2720   	; 0x2bb4 <system+0x2fe>
			 {
				 direction = key ;
    3654:	de 01       	movw	r26, r28
    3656:	ae 58       	subi	r26, 0x8E	; 142
    3658:	bf 4f       	sbci	r27, 0xFF	; 255
    365a:	fe 01       	movw	r30, r28
    365c:	ef 58       	subi	r30, 0x8F	; 143
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	80 81       	ld	r24, Z
    3662:	8c 93       	st	X, r24
				 LCD_voidSendCommand(0x01);
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
				 LCD_voidGoToXY(0, 1) ;
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	61 e0       	ldi	r22, 0x01	; 1
    366e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
				 LCD_Display("Enter Angle:") ;
    3672:	85 ed       	ldi	r24, 0xD5	; 213
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>
				 LCD_voidGoToXY(1, 3);
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	63 e0       	ldi	r22, 0x03	; 3
    367e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
				 state = 3 ;
    3682:	83 e0       	ldi	r24, 0x03	; 3
    3684:	80 93 10 01 	sts	0x0110, r24
    3688:	95 ca       	rjmp	.-2774   	; 0x2bb4 <system+0x2fe>
			 }

		}

		else if(state == 3)
    368a:	80 91 10 01 	lds	r24, 0x0110
    368e:	83 30       	cpi	r24, 0x03	; 3
    3690:	09 f0       	breq	.+2      	; 0x3694 <system+0xdde>
    3692:	90 ca       	rjmp	.-2784   	; 0x2bb4 <system+0x2fe>
		{
			if(key != NO_KEY && (key == 0 || key == 1 || key == 2 || key == 3 || key == 4 || key == 5 || key == 6 || key == 7 || key == 8 || key == 9))
    3694:	fe 01       	movw	r30, r28
    3696:	ef 58       	subi	r30, 0x8F	; 143
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	80 81       	ld	r24, Z
    369c:	80 33       	cpi	r24, 0x30	; 48
    369e:	09 f4       	brne	.+2      	; 0x36a2 <system+0xdec>
    36a0:	61 c0       	rjmp	.+194    	; 0x3764 <system+0xeae>
    36a2:	fe 01       	movw	r30, r28
    36a4:	ef 58       	subi	r30, 0x8F	; 143
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	80 81       	ld	r24, Z
    36aa:	88 23       	and	r24, r24
    36ac:	b1 f1       	breq	.+108    	; 0x371a <system+0xe64>
    36ae:	fe 01       	movw	r30, r28
    36b0:	ef 58       	subi	r30, 0x8F	; 143
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	80 81       	ld	r24, Z
    36b6:	81 30       	cpi	r24, 0x01	; 1
    36b8:	81 f1       	breq	.+96     	; 0x371a <system+0xe64>
    36ba:	fe 01       	movw	r30, r28
    36bc:	ef 58       	subi	r30, 0x8F	; 143
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	80 81       	ld	r24, Z
    36c2:	82 30       	cpi	r24, 0x02	; 2
    36c4:	51 f1       	breq	.+84     	; 0x371a <system+0xe64>
    36c6:	fe 01       	movw	r30, r28
    36c8:	ef 58       	subi	r30, 0x8F	; 143
    36ca:	ff 4f       	sbci	r31, 0xFF	; 255
    36cc:	80 81       	ld	r24, Z
    36ce:	83 30       	cpi	r24, 0x03	; 3
    36d0:	21 f1       	breq	.+72     	; 0x371a <system+0xe64>
    36d2:	fe 01       	movw	r30, r28
    36d4:	ef 58       	subi	r30, 0x8F	; 143
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	80 81       	ld	r24, Z
    36da:	84 30       	cpi	r24, 0x04	; 4
    36dc:	f1 f0       	breq	.+60     	; 0x371a <system+0xe64>
    36de:	fe 01       	movw	r30, r28
    36e0:	ef 58       	subi	r30, 0x8F	; 143
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	80 81       	ld	r24, Z
    36e6:	85 30       	cpi	r24, 0x05	; 5
    36e8:	c1 f0       	breq	.+48     	; 0x371a <system+0xe64>
    36ea:	fe 01       	movw	r30, r28
    36ec:	ef 58       	subi	r30, 0x8F	; 143
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	80 81       	ld	r24, Z
    36f2:	86 30       	cpi	r24, 0x06	; 6
    36f4:	91 f0       	breq	.+36     	; 0x371a <system+0xe64>
    36f6:	fe 01       	movw	r30, r28
    36f8:	ef 58       	subi	r30, 0x8F	; 143
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	80 81       	ld	r24, Z
    36fe:	87 30       	cpi	r24, 0x07	; 7
    3700:	61 f0       	breq	.+24     	; 0x371a <system+0xe64>
    3702:	fe 01       	movw	r30, r28
    3704:	ef 58       	subi	r30, 0x8F	; 143
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	80 81       	ld	r24, Z
    370a:	88 30       	cpi	r24, 0x08	; 8
    370c:	31 f0       	breq	.+12     	; 0x371a <system+0xe64>
    370e:	fe 01       	movw	r30, r28
    3710:	ef 58       	subi	r30, 0x8F	; 143
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	80 81       	ld	r24, Z
    3716:	89 30       	cpi	r24, 0x09	; 9
    3718:	29 f5       	brne	.+74     	; 0x3764 <system+0xeae>
			{
				angle = angle * 10 + (u16)key ;
    371a:	fe 01       	movw	r30, r28
    371c:	ec 58       	subi	r30, 0x8C	; 140
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	80 81       	ld	r24, Z
    3722:	91 81       	ldd	r25, Z+1	; 0x01
    3724:	9c 01       	movw	r18, r24
    3726:	22 0f       	add	r18, r18
    3728:	33 1f       	adc	r19, r19
    372a:	c9 01       	movw	r24, r18
    372c:	88 0f       	add	r24, r24
    372e:	99 1f       	adc	r25, r25
    3730:	88 0f       	add	r24, r24
    3732:	99 1f       	adc	r25, r25
    3734:	28 0f       	add	r18, r24
    3736:	39 1f       	adc	r19, r25
    3738:	fe 01       	movw	r30, r28
    373a:	ef 58       	subi	r30, 0x8F	; 143
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	80 81       	ld	r24, Z
    3740:	88 2f       	mov	r24, r24
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	fe 01       	movw	r30, r28
    3746:	ec 58       	subi	r30, 0x8C	; 140
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	82 0f       	add	r24, r18
    374c:	93 1f       	adc	r25, r19
    374e:	91 83       	std	Z+1, r25	; 0x01
    3750:	80 83       	st	Z, r24
				LCD_voidWriteNumber((u16)key) ;
    3752:	fe 01       	movw	r30, r28
    3754:	ef 58       	subi	r30, 0x8F	; 143
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	80 81       	ld	r24, Z
    375a:	88 2f       	mov	r24, r24
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_voidWriteNumber>
    3762:	28 ca       	rjmp	.-2992   	; 0x2bb4 <system+0x2fe>
			}

			else if(key != NO_KEY && key == '=')
    3764:	fe 01       	movw	r30, r28
    3766:	ef 58       	subi	r30, 0x8F	; 143
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	80 81       	ld	r24, Z
    376c:	80 33       	cpi	r24, 0x30	; 48
    376e:	09 f4       	brne	.+2      	; 0x3772 <system+0xebc>
    3770:	21 ca       	rjmp	.-3006   	; 0x2bb4 <system+0x2fe>
    3772:	fe 01       	movw	r30, r28
    3774:	ef 58       	subi	r30, 0x8F	; 143
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	80 81       	ld	r24, Z
    377a:	8d 33       	cpi	r24, 0x3D	; 61
    377c:	09 f0       	breq	.+2      	; 0x3780 <system+0xeca>
    377e:	1a ca       	rjmp	.-3020   	; 0x2bb4 <system+0x2fe>
			{
				if(direction == 1)
    3780:	fe 01       	movw	r30, r28
    3782:	ee 58       	subi	r30, 0x8E	; 142
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	80 81       	ld	r24, Z
    3788:	81 30       	cpi	r24, 0x01	; 1
    378a:	09 f0       	breq	.+2      	; 0x378e <system+0xed8>
    378c:	7a c0       	rjmp	.+244    	; 0x3882 <system+0xfcc>
				{
					STEPPER_voidSetAngleCW(angle) ;
    378e:	fe 01       	movw	r30, r28
    3790:	ec 58       	subi	r30, 0x8C	; 140
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	80 81       	ld	r24, Z
    3796:	91 81       	ldd	r25, Z+1	; 0x01
    3798:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <STEPPER_voidSetAngleCW>
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	90 e8       	ldi	r25, 0x80	; 128
    37a0:	ab e3       	ldi	r26, 0x3B	; 59
    37a2:	b5 e4       	ldi	r27, 0x45	; 69
    37a4:	89 8f       	std	Y+25, r24	; 0x19
    37a6:	9a 8f       	std	Y+26, r25	; 0x1a
    37a8:	ab 8f       	std	Y+27, r26	; 0x1b
    37aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ac:	69 8d       	ldd	r22, Y+25	; 0x19
    37ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	4a ef       	ldi	r20, 0xFA	; 250
    37ba:	54 e4       	ldi	r21, 0x44	; 68
    37bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	8d 8b       	std	Y+21, r24	; 0x15
    37c6:	9e 8b       	std	Y+22, r25	; 0x16
    37c8:	af 8b       	std	Y+23, r26	; 0x17
    37ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37cc:	6d 89       	ldd	r22, Y+21	; 0x15
    37ce:	7e 89       	ldd	r23, Y+22	; 0x16
    37d0:	8f 89       	ldd	r24, Y+23	; 0x17
    37d2:	98 8d       	ldd	r25, Y+24	; 0x18
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	40 e8       	ldi	r20, 0x80	; 128
    37da:	5f e3       	ldi	r21, 0x3F	; 63
    37dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37e0:	88 23       	and	r24, r24
    37e2:	2c f4       	brge	.+10     	; 0x37ee <system+0xf38>
		__ticks = 1;
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	9c 8b       	std	Y+20, r25	; 0x14
    37ea:	8b 8b       	std	Y+19, r24	; 0x13
    37ec:	3f c0       	rjmp	.+126    	; 0x386c <system+0xfb6>
	else if (__tmp > 65535)
    37ee:	6d 89       	ldd	r22, Y+21	; 0x15
    37f0:	7e 89       	ldd	r23, Y+22	; 0x16
    37f2:	8f 89       	ldd	r24, Y+23	; 0x17
    37f4:	98 8d       	ldd	r25, Y+24	; 0x18
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	3f ef       	ldi	r19, 0xFF	; 255
    37fa:	4f e7       	ldi	r20, 0x7F	; 127
    37fc:	57 e4       	ldi	r21, 0x47	; 71
    37fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3802:	18 16       	cp	r1, r24
    3804:	4c f5       	brge	.+82     	; 0x3858 <system+0xfa2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3806:	69 8d       	ldd	r22, Y+25	; 0x19
    3808:	7a 8d       	ldd	r23, Y+26	; 0x1a
    380a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    380c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	40 e2       	ldi	r20, 0x20	; 32
    3814:	51 e4       	ldi	r21, 0x41	; 65
    3816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	bc 01       	movw	r22, r24
    3820:	cd 01       	movw	r24, r26
    3822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22
    382a:	9c 8b       	std	Y+20, r25	; 0x14
    382c:	8b 8b       	std	Y+19, r24	; 0x13
    382e:	0f c0       	rjmp	.+30     	; 0x384e <system+0xf98>
    3830:	88 ec       	ldi	r24, 0xC8	; 200
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	9a 8b       	std	Y+18, r25	; 0x12
    3836:	89 8b       	std	Y+17, r24	; 0x11
    3838:	89 89       	ldd	r24, Y+17	; 0x11
    383a:	9a 89       	ldd	r25, Y+18	; 0x12
    383c:	01 97       	sbiw	r24, 0x01	; 1
    383e:	f1 f7       	brne	.-4      	; 0x383c <system+0xf86>
    3840:	9a 8b       	std	Y+18, r25	; 0x12
    3842:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3844:	8b 89       	ldd	r24, Y+19	; 0x13
    3846:	9c 89       	ldd	r25, Y+20	; 0x14
    3848:	01 97       	sbiw	r24, 0x01	; 1
    384a:	9c 8b       	std	Y+20, r25	; 0x14
    384c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    384e:	8b 89       	ldd	r24, Y+19	; 0x13
    3850:	9c 89       	ldd	r25, Y+20	; 0x14
    3852:	00 97       	sbiw	r24, 0x00	; 0
    3854:	69 f7       	brne	.-38     	; 0x3830 <system+0xf7a>
    3856:	8e c0       	rjmp	.+284    	; 0x3974 <system+0x10be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3858:	6d 89       	ldd	r22, Y+21	; 0x15
    385a:	7e 89       	ldd	r23, Y+22	; 0x16
    385c:	8f 89       	ldd	r24, Y+23	; 0x17
    385e:	98 8d       	ldd	r25, Y+24	; 0x18
    3860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	9c 8b       	std	Y+20, r25	; 0x14
    386a:	8b 8b       	std	Y+19, r24	; 0x13
    386c:	8b 89       	ldd	r24, Y+19	; 0x13
    386e:	9c 89       	ldd	r25, Y+20	; 0x14
    3870:	98 8b       	std	Y+16, r25	; 0x10
    3872:	8f 87       	std	Y+15, r24	; 0x0f
    3874:	8f 85       	ldd	r24, Y+15	; 0x0f
    3876:	98 89       	ldd	r25, Y+16	; 0x10
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	f1 f7       	brne	.-4      	; 0x3878 <system+0xfc2>
    387c:	98 8b       	std	Y+16, r25	; 0x10
    387e:	8f 87       	std	Y+15, r24	; 0x0f
    3880:	79 c0       	rjmp	.+242    	; 0x3974 <system+0x10be>
					_delay_ms(3 * 1000);
				}
				else
				{
					STEPPER_voidSetAngleCCW(angle) ;
    3882:	fe 01       	movw	r30, r28
    3884:	ec 58       	subi	r30, 0x8C	; 140
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	80 81       	ld	r24, Z
    388a:	91 81       	ldd	r25, Z+1	; 0x01
    388c:	0e 94 00 14 	call	0x2800	; 0x2800 <STEPPER_voidSetAngleCCW>
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	90 e4       	ldi	r25, 0x40	; 64
    3894:	ac e1       	ldi	r26, 0x1C	; 28
    3896:	b6 e4       	ldi	r27, 0x46	; 70
    3898:	8b 87       	std	Y+11, r24	; 0x0b
    389a:	9c 87       	std	Y+12, r25	; 0x0c
    389c:	ad 87       	std	Y+13, r26	; 0x0d
    389e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	4a ef       	ldi	r20, 0xFA	; 250
    38ae:	54 e4       	ldi	r21, 0x44	; 68
    38b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	8f 83       	std	Y+7, r24	; 0x07
    38ba:	98 87       	std	Y+8, r25	; 0x08
    38bc:	a9 87       	std	Y+9, r26	; 0x09
    38be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38c0:	6f 81       	ldd	r22, Y+7	; 0x07
    38c2:	78 85       	ldd	r23, Y+8	; 0x08
    38c4:	89 85       	ldd	r24, Y+9	; 0x09
    38c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	40 e8       	ldi	r20, 0x80	; 128
    38ce:	5f e3       	ldi	r21, 0x3F	; 63
    38d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38d4:	88 23       	and	r24, r24
    38d6:	2c f4       	brge	.+10     	; 0x38e2 <system+0x102c>
		__ticks = 1;
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9e 83       	std	Y+6, r25	; 0x06
    38de:	8d 83       	std	Y+5, r24	; 0x05
    38e0:	3f c0       	rjmp	.+126    	; 0x3960 <system+0x10aa>
	else if (__tmp > 65535)
    38e2:	6f 81       	ldd	r22, Y+7	; 0x07
    38e4:	78 85       	ldd	r23, Y+8	; 0x08
    38e6:	89 85       	ldd	r24, Y+9	; 0x09
    38e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	3f ef       	ldi	r19, 0xFF	; 255
    38ee:	4f e7       	ldi	r20, 0x7F	; 127
    38f0:	57 e4       	ldi	r21, 0x47	; 71
    38f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38f6:	18 16       	cp	r1, r24
    38f8:	4c f5       	brge	.+82     	; 0x394c <system+0x1096>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    38fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    38fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3900:	9e 85       	ldd	r25, Y+14	; 0x0e
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e2       	ldi	r20, 0x20	; 32
    3908:	51 e4       	ldi	r21, 0x41	; 65
    390a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	bc 01       	movw	r22, r24
    3914:	cd 01       	movw	r24, r26
    3916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	9e 83       	std	Y+6, r25	; 0x06
    3920:	8d 83       	std	Y+5, r24	; 0x05
    3922:	0f c0       	rjmp	.+30     	; 0x3942 <system+0x108c>
    3924:	88 ec       	ldi	r24, 0xC8	; 200
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	9c 83       	std	Y+4, r25	; 0x04
    392a:	8b 83       	std	Y+3, r24	; 0x03
    392c:	8b 81       	ldd	r24, Y+3	; 0x03
    392e:	9c 81       	ldd	r25, Y+4	; 0x04
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	f1 f7       	brne	.-4      	; 0x3930 <system+0x107a>
    3934:	9c 83       	std	Y+4, r25	; 0x04
    3936:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3938:	8d 81       	ldd	r24, Y+5	; 0x05
    393a:	9e 81       	ldd	r25, Y+6	; 0x06
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	9e 83       	std	Y+6, r25	; 0x06
    3940:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3942:	8d 81       	ldd	r24, Y+5	; 0x05
    3944:	9e 81       	ldd	r25, Y+6	; 0x06
    3946:	00 97       	sbiw	r24, 0x00	; 0
    3948:	69 f7       	brne	.-38     	; 0x3924 <system+0x106e>
    394a:	14 c0       	rjmp	.+40     	; 0x3974 <system+0x10be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    394c:	6f 81       	ldd	r22, Y+7	; 0x07
    394e:	78 85       	ldd	r23, Y+8	; 0x08
    3950:	89 85       	ldd	r24, Y+9	; 0x09
    3952:	9a 85       	ldd	r25, Y+10	; 0x0a
    3954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	9e 83       	std	Y+6, r25	; 0x06
    395e:	8d 83       	std	Y+5, r24	; 0x05
    3960:	8d 81       	ldd	r24, Y+5	; 0x05
    3962:	9e 81       	ldd	r25, Y+6	; 0x06
    3964:	9a 83       	std	Y+2, r25	; 0x02
    3966:	89 83       	std	Y+1, r24	; 0x01
    3968:	89 81       	ldd	r24, Y+1	; 0x01
    396a:	9a 81       	ldd	r25, Y+2	; 0x02
    396c:	01 97       	sbiw	r24, 0x01	; 1
    396e:	f1 f7       	brne	.-4      	; 0x396c <system+0x10b6>
    3970:	9a 83       	std	Y+2, r25	; 0x02
    3972:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(10 * 1000);
				}
				 state = 2 ;
    3974:	82 e0       	ldi	r24, 0x02	; 2
    3976:	80 93 10 01 	sts	0x0110, r24
				 LCD_voidSendCommand(0x01);
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_voidSendCommand>
				 LCD_voidGoToXY(0, 1) ;
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	61 e0       	ldi	r22, 0x01	; 1
    3984:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
				 LCD_Display("Enter Direction") ;
    3988:	86 ea       	ldi	r24, 0xA6	; 166
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>
				 LCD_voidGoToXY(1, 1) ;
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	61 e0       	ldi	r22, 0x01	; 1
    3994:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_voidGoToXY>
				 LCD_Display("1:CW  2:CCW") ;
    3998:	86 eb       	ldi	r24, 0xB6	; 182
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Display>
				 angle = 0;
    39a0:	fe 01       	movw	r30, r28
    39a2:	ec 58       	subi	r30, 0x8C	; 140
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	11 82       	std	Z+1, r1	; 0x01
    39a8:	10 82       	st	Z, r1
    39aa:	04 c9       	rjmp	.-3576   	; 0x2bb4 <system+0x2fe>
			}
		}
	}
}
    39ac:	cc 56       	subi	r28, 0x6C	; 108
    39ae:	df 4f       	sbci	r29, 0xFF	; 255
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	de bf       	out	0x3e, r29	; 62
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	cd bf       	out	0x3d, r28	; 61
    39ba:	cf 91       	pop	r28
    39bc:	df 91       	pop	r29
    39be:	1f 91       	pop	r17
    39c0:	0f 91       	pop	r16
    39c2:	08 95       	ret

000039c4 <id_arr>:


// function will convert id number into array of each digit

u8 * id_arr(u16 ID)
{
    39c4:	df 93       	push	r29
    39c6:	cf 93       	push	r28
    39c8:	00 d0       	rcall	.+0      	; 0x39ca <id_arr+0x6>
    39ca:	0f 92       	push	r0
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	9b 83       	std	Y+3, r25	; 0x03
    39d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	static u8 arr[4] ;

	for(i = 5 ; i>1 ; i--)
    39d4:	85 e0       	ldi	r24, 0x05	; 5
    39d6:	89 83       	std	Y+1, r24	; 0x01
    39d8:	1c c0       	rjmp	.+56     	; 0x3a12 <id_arr+0x4e>
	{
		arr[i-2] = (u8)(ID % 10) ;
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	88 2f       	mov	r24, r24
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	fc 01       	movw	r30, r24
    39e2:	32 97       	sbiw	r30, 0x02	; 2
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	9b 81       	ldd	r25, Y+3	; 0x03
    39e8:	2a e0       	ldi	r18, 0x0A	; 10
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	b9 01       	movw	r22, r18
    39ee:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__udivmodhi4>
    39f2:	ef 5e       	subi	r30, 0xEF	; 239
    39f4:	fe 4f       	sbci	r31, 0xFE	; 254
    39f6:	80 83       	st	Z, r24
		ID = ID /10 ;
    39f8:	8a 81       	ldd	r24, Y+2	; 0x02
    39fa:	9b 81       	ldd	r25, Y+3	; 0x03
    39fc:	2a e0       	ldi	r18, 0x0A	; 10
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	b9 01       	movw	r22, r18
    3a02:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__udivmodhi4>
    3a06:	cb 01       	movw	r24, r22
    3a08:	9b 83       	std	Y+3, r25	; 0x03
    3a0a:	8a 83       	std	Y+2, r24	; 0x02
u8 * id_arr(u16 ID)
{
	u8 i;
	static u8 arr[4] ;

	for(i = 5 ; i>1 ; i--)
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
    3a0e:	81 50       	subi	r24, 0x01	; 1
    3a10:	89 83       	std	Y+1, r24	; 0x01
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	82 30       	cpi	r24, 0x02	; 2
    3a16:	08 f7       	brcc	.-62     	; 0x39da <id_arr+0x16>
	{
		arr[i-2] = (u8)(ID % 10) ;
		ID = ID /10 ;
	}
	return arr ;
    3a18:	81 e1       	ldi	r24, 0x11	; 17
    3a1a:	91 e0       	ldi	r25, 0x01	; 1
}
    3a1c:	0f 90       	pop	r0
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <pass_arr>:

// function will convert password number into array of each digit number

u8 * pass_arr(u16 password)
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <pass_arr+0x6>
    3a2e:	0f 92       	push	r0
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
    3a34:	9b 83       	std	Y+3, r25	; 0x03
    3a36:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	static u8 arr1[4] ;

	for(i = 5 ; i>1 ; i--)
    3a38:	85 e0       	ldi	r24, 0x05	; 5
    3a3a:	89 83       	std	Y+1, r24	; 0x01
    3a3c:	1c c0       	rjmp	.+56     	; 0x3a76 <pass_arr+0x4e>
	{
		arr1[i-2] = (u8)(password % 10) ;
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
    3a40:	88 2f       	mov	r24, r24
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	fc 01       	movw	r30, r24
    3a46:	32 97       	sbiw	r30, 0x02	; 2
    3a48:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a4c:	2a e0       	ldi	r18, 0x0A	; 10
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	b9 01       	movw	r22, r18
    3a52:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__udivmodhi4>
    3a56:	eb 5e       	subi	r30, 0xEB	; 235
    3a58:	fe 4f       	sbci	r31, 0xFE	; 254
    3a5a:	80 83       	st	Z, r24
		password = password /10 ;
    3a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a60:	2a e0       	ldi	r18, 0x0A	; 10
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	b9 01       	movw	r22, r18
    3a66:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__udivmodhi4>
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	9b 83       	std	Y+3, r25	; 0x03
    3a6e:	8a 83       	std	Y+2, r24	; 0x02
u8 * pass_arr(u16 password)
{
	u8 i;
	static u8 arr1[4] ;

	for(i = 5 ; i>1 ; i--)
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	81 50       	subi	r24, 0x01	; 1
    3a74:	89 83       	std	Y+1, r24	; 0x01
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	82 30       	cpi	r24, 0x02	; 2
    3a7a:	08 f7       	brcc	.-62     	; 0x3a3e <pass_arr+0x16>
	{
		arr1[i-2] = (u8)(password % 10) ;
		password = password /10 ;
	}
	return arr1 ;
    3a7c:	85 e1       	ldi	r24, 0x15	; 21
    3a7e:	91 e0       	ldi	r25, 0x01	; 1
}
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	0f 90       	pop	r0
    3a86:	cf 91       	pop	r28
    3a88:	df 91       	pop	r29
    3a8a:	08 95       	ret

00003a8c <__udivmodhi4>:
    3a8c:	aa 1b       	sub	r26, r26
    3a8e:	bb 1b       	sub	r27, r27
    3a90:	51 e1       	ldi	r21, 0x11	; 17
    3a92:	07 c0       	rjmp	.+14     	; 0x3aa2 <__udivmodhi4_ep>

00003a94 <__udivmodhi4_loop>:
    3a94:	aa 1f       	adc	r26, r26
    3a96:	bb 1f       	adc	r27, r27
    3a98:	a6 17       	cp	r26, r22
    3a9a:	b7 07       	cpc	r27, r23
    3a9c:	10 f0       	brcs	.+4      	; 0x3aa2 <__udivmodhi4_ep>
    3a9e:	a6 1b       	sub	r26, r22
    3aa0:	b7 0b       	sbc	r27, r23

00003aa2 <__udivmodhi4_ep>:
    3aa2:	88 1f       	adc	r24, r24
    3aa4:	99 1f       	adc	r25, r25
    3aa6:	5a 95       	dec	r21
    3aa8:	a9 f7       	brne	.-22     	; 0x3a94 <__udivmodhi4_loop>
    3aaa:	80 95       	com	r24
    3aac:	90 95       	com	r25
    3aae:	bc 01       	movw	r22, r24
    3ab0:	cd 01       	movw	r24, r26
    3ab2:	08 95       	ret

00003ab4 <__prologue_saves__>:
    3ab4:	2f 92       	push	r2
    3ab6:	3f 92       	push	r3
    3ab8:	4f 92       	push	r4
    3aba:	5f 92       	push	r5
    3abc:	6f 92       	push	r6
    3abe:	7f 92       	push	r7
    3ac0:	8f 92       	push	r8
    3ac2:	9f 92       	push	r9
    3ac4:	af 92       	push	r10
    3ac6:	bf 92       	push	r11
    3ac8:	cf 92       	push	r12
    3aca:	df 92       	push	r13
    3acc:	ef 92       	push	r14
    3ace:	ff 92       	push	r15
    3ad0:	0f 93       	push	r16
    3ad2:	1f 93       	push	r17
    3ad4:	cf 93       	push	r28
    3ad6:	df 93       	push	r29
    3ad8:	cd b7       	in	r28, 0x3d	; 61
    3ada:	de b7       	in	r29, 0x3e	; 62
    3adc:	ca 1b       	sub	r28, r26
    3ade:	db 0b       	sbc	r29, r27
    3ae0:	0f b6       	in	r0, 0x3f	; 63
    3ae2:	f8 94       	cli
    3ae4:	de bf       	out	0x3e, r29	; 62
    3ae6:	0f be       	out	0x3f, r0	; 63
    3ae8:	cd bf       	out	0x3d, r28	; 61
    3aea:	09 94       	ijmp

00003aec <__epilogue_restores__>:
    3aec:	2a 88       	ldd	r2, Y+18	; 0x12
    3aee:	39 88       	ldd	r3, Y+17	; 0x11
    3af0:	48 88       	ldd	r4, Y+16	; 0x10
    3af2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3af4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3af6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3af8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3afa:	9b 84       	ldd	r9, Y+11	; 0x0b
    3afc:	aa 84       	ldd	r10, Y+10	; 0x0a
    3afe:	b9 84       	ldd	r11, Y+9	; 0x09
    3b00:	c8 84       	ldd	r12, Y+8	; 0x08
    3b02:	df 80       	ldd	r13, Y+7	; 0x07
    3b04:	ee 80       	ldd	r14, Y+6	; 0x06
    3b06:	fd 80       	ldd	r15, Y+5	; 0x05
    3b08:	0c 81       	ldd	r16, Y+4	; 0x04
    3b0a:	1b 81       	ldd	r17, Y+3	; 0x03
    3b0c:	aa 81       	ldd	r26, Y+2	; 0x02
    3b0e:	b9 81       	ldd	r27, Y+1	; 0x01
    3b10:	ce 0f       	add	r28, r30
    3b12:	d1 1d       	adc	r29, r1
    3b14:	0f b6       	in	r0, 0x3f	; 63
    3b16:	f8 94       	cli
    3b18:	de bf       	out	0x3e, r29	; 62
    3b1a:	0f be       	out	0x3f, r0	; 63
    3b1c:	cd bf       	out	0x3d, r28	; 61
    3b1e:	ed 01       	movw	r28, r26
    3b20:	08 95       	ret

00003b22 <_exit>:
    3b22:	f8 94       	cli

00003b24 <__stop_program>:
    3b24:	ff cf       	rjmp	.-2      	; 0x3b24 <__stop_program>
