
FREE_RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000047d4  00004868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000499  0080007e  0080007e  00004886  2**0
                  ALLOC
  3 .stab         000059f4  00000000  00000000  00004888  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000324e  00000000  00000000  0000a27c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d4ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d60a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d77a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000102ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0001105c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000111bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011449  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011c17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 31       	cpi	r26, 0x17	; 23
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <main>
      8a:	0c 94 e8 23 	jmp	0x47d0	; 0x47d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 be 23 	jmp	0x477c	; 0x477c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9d 83       	std	Y+5, r25	; 0x05
     b5c:	8c 83       	std	Y+4, r24	; 0x04
     b5e:	6e 83       	std	Y+6, r22	; 0x06
     b60:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     b62:	8a e1       	ldi	r24, 0x1A	; 26
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
     b6a:	9a 83       	std	Y+2, r25	; 0x02
     b6c:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	09 f4       	brne	.+2      	; 0xb78 <xCoRoutineCreate+0x32>
     b76:	6f c0       	rjmp	.+222    	; 0xc56 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     b78:	80 91 7e 00 	lds	r24, 0x007E
     b7c:	90 91 7f 00 	lds	r25, 0x007F
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	41 f4       	brne	.+16     	; 0xb94 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	9a 81       	ldd	r25, Y+2	; 0x02
     b88:	90 93 7f 00 	sts	0x007F, r25
     b8c:	80 93 7e 00 	sts	0x007E, r24
			prvInitialiseCoRoutineLists();
     b90:	0e 94 0a 08 	call	0x1014	; 0x1014 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     b94:	8e 81       	ldd	r24, Y+6	; 0x06
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	10 f0       	brcs	.+4      	; 0xb9e <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     b9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ba0:	fa 81       	ldd	r31, Y+2	; 0x02
     ba2:	11 8e       	std	Z+25, r1	; 0x19
     ba4:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     ba6:	e9 81       	ldd	r30, Y+1	; 0x01
     ba8:	fa 81       	ldd	r31, Y+2	; 0x02
     baa:	8e 81       	ldd	r24, Y+6	; 0x06
     bac:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     bae:	e9 81       	ldd	r30, Y+1	; 0x01
     bb0:	fa 81       	ldd	r31, Y+2	; 0x02
     bb2:	8f 81       	ldd	r24, Y+7	; 0x07
     bb4:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     bb6:	e9 81       	ldd	r30, Y+1	; 0x01
     bb8:	fa 81       	ldd	r31, Y+2	; 0x02
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
     bbc:	9d 81       	ldd	r25, Y+5	; 0x05
     bbe:	91 83       	std	Z+1, r25	; 0x01
     bc0:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	9a 81       	ldd	r25, Y+2	; 0x02
     bc6:	02 96       	adiw	r24, 0x02	; 2
     bc8:	0e 94 11 09 	call	0x1222	; 0x1222 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	0c 96       	adiw	r24, 0x0c	; 12
     bd2:	0e 94 11 09 	call	0x1222	; 0x1222 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     bd6:	e9 81       	ldd	r30, Y+1	; 0x01
     bd8:	fa 81       	ldd	r31, Y+2	; 0x02
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	91 87       	std	Z+9, r25	; 0x09
     be0:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     be2:	e9 81       	ldd	r30, Y+1	; 0x01
     be4:	fa 81       	ldd	r31, Y+2	; 0x02
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
     bea:	93 8b       	std	Z+19, r25	; 0x13
     bec:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     bee:	8e 81       	ldd	r24, Y+6	; 0x06
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	86 e0       	ldi	r24, 0x06	; 6
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	82 1b       	sub	r24, r18
     bfa:	93 0b       	sbc	r25, r19
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	95 87       	std	Z+13, r25	; 0x0d
     c02:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     c04:	e9 81       	ldd	r30, Y+1	; 0x01
     c06:	fa 81       	ldd	r31, Y+2	; 0x02
     c08:	96 89       	ldd	r25, Z+22	; 0x16
     c0a:	80 91 80 00 	lds	r24, 0x0080
     c0e:	89 17       	cp	r24, r25
     c10:	28 f4       	brcc	.+10     	; 0xc1c <xCoRoutineCreate+0xd6>
     c12:	e9 81       	ldd	r30, Y+1	; 0x01
     c14:	fa 81       	ldd	r31, Y+2	; 0x02
     c16:	86 89       	ldd	r24, Z+22	; 0x16
     c18:	80 93 80 00 	sts	0x0080, r24
     c1c:	e9 81       	ldd	r30, Y+1	; 0x01
     c1e:	fa 81       	ldd	r31, Y+2	; 0x02
     c20:	86 89       	ldd	r24, Z+22	; 0x16
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	c9 01       	movw	r24, r18
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	82 0f       	add	r24, r18
     c36:	93 1f       	adc	r25, r19
     c38:	ac 01       	movw	r20, r24
     c3a:	49 57       	subi	r20, 0x79	; 121
     c3c:	5f 4f       	sbci	r21, 0xFF	; 255
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a 81       	ldd	r25, Y+2	; 0x02
     c42:	9c 01       	movw	r18, r24
     c44:	2e 5f       	subi	r18, 0xFE	; 254
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	ca 01       	movw	r24, r20
     c4a:	b9 01       	movw	r22, r18
     c4c:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

		xReturn = pdPASS;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	8b 83       	std	Y+3, r24	; 0x03
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c5c:	27 96       	adiw	r28, 0x07	; 7
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	00 d0       	rcall	.+0      	; 0xc74 <vCoRoutineAddToDelayedList+0x6>
     c74:	00 d0       	rcall	.+0      	; 0xc76 <vCoRoutineAddToDelayedList+0x8>
     c76:	00 d0       	rcall	.+0      	; 0xc78 <vCoRoutineAddToDelayedList+0xa>
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	8b 83       	std	Y+3, r24	; 0x03
     c80:	7e 83       	std	Y+6, r23	; 0x06
     c82:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     c84:	20 91 81 00 	lds	r18, 0x0081
     c88:	30 91 82 00 	lds	r19, 0x0082
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     c98:	80 91 7e 00 	lds	r24, 0x007E
     c9c:	90 91 7f 00 	lds	r25, 0x007F
     ca0:	02 96       	adiw	r24, 0x02	; 2
     ca2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     ca6:	e0 91 7e 00 	lds	r30, 0x007E
     caa:	f0 91 7f 00 	lds	r31, 0x007F
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	9a 81       	ldd	r25, Y+2	; 0x02
     cb2:	93 83       	std	Z+3, r25	; 0x03
     cb4:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     cb6:	20 91 81 00 	lds	r18, 0x0081
     cba:	30 91 82 00 	lds	r19, 0x0082
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	82 17       	cp	r24, r18
     cc4:	93 07       	cpc	r25, r19
     cc6:	70 f4       	brcc	.+28     	; 0xce4 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     cc8:	80 91 ad 00 	lds	r24, 0x00AD
     ccc:	90 91 ae 00 	lds	r25, 0x00AE
     cd0:	20 91 7e 00 	lds	r18, 0x007E
     cd4:	30 91 7f 00 	lds	r19, 0x007F
     cd8:	2e 5f       	subi	r18, 0xFE	; 254
     cda:	3f 4f       	sbci	r19, 0xFF	; 255
     cdc:	b9 01       	movw	r22, r18
     cde:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>
     ce2:	0d c0       	rjmp	.+26     	; 0xcfe <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     ce4:	80 91 ab 00 	lds	r24, 0x00AB
     ce8:	90 91 ac 00 	lds	r25, 0x00AC
     cec:	20 91 7e 00 	lds	r18, 0x007E
     cf0:	30 91 7f 00 	lds	r19, 0x007F
     cf4:	2e 5f       	subi	r18, 0xFE	; 254
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	b9 01       	movw	r22, r18
     cfa:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>
	}

	if( pxEventList )
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	61 f0       	breq	.+24     	; 0xd1e <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     d06:	80 91 7e 00 	lds	r24, 0x007E
     d0a:	90 91 7f 00 	lds	r25, 0x007F
     d0e:	9c 01       	movw	r18, r24
     d10:	24 5f       	subi	r18, 0xF4	; 244
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	9e 81       	ldd	r25, Y+6	; 0x06
     d18:	b9 01       	movw	r22, r18
     d1a:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>
	}
}
     d1e:	26 96       	adiw	r28, 0x06	; 6
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <prvCheckPendingReadyList+0x6>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	3a c0       	rjmp	.+116    	; 0xdb0 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     d3c:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     d3e:	e0 91 b4 00 	lds	r30, 0x00B4
     d42:	f0 91 b5 00 	lds	r31, 0x00B5
     d46:	86 81       	ldd	r24, Z+6	; 0x06
     d48:	97 81       	ldd	r25, Z+7	; 0x07
     d4a:	9a 83       	std	Y+2, r25	; 0x02
     d4c:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	0c 96       	adiw	r24, 0x0c	; 12
     d54:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
		}
		portENABLE_INTERRUPTS();
     d58:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	02 96       	adiw	r24, 0x02	; 2
     d60:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     d64:	e9 81       	ldd	r30, Y+1	; 0x01
     d66:	fa 81       	ldd	r31, Y+2	; 0x02
     d68:	96 89       	ldd	r25, Z+22	; 0x16
     d6a:	80 91 80 00 	lds	r24, 0x0080
     d6e:	89 17       	cp	r24, r25
     d70:	28 f4       	brcc	.+10     	; 0xd7c <prvCheckPendingReadyList+0x4c>
     d72:	e9 81       	ldd	r30, Y+1	; 0x01
     d74:	fa 81       	ldd	r31, Y+2	; 0x02
     d76:	86 89       	ldd	r24, Z+22	; 0x16
     d78:	80 93 80 00 	sts	0x0080, r24
     d7c:	e9 81       	ldd	r30, Y+1	; 0x01
     d7e:	fa 81       	ldd	r31, Y+2	; 0x02
     d80:	86 89       	ldd	r24, Z+22	; 0x16
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	c9 01       	movw	r24, r18
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	82 0f       	add	r24, r18
     d96:	93 1f       	adc	r25, r19
     d98:	ac 01       	movw	r20, r24
     d9a:	49 57       	subi	r20, 0x79	; 121
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	9c 01       	movw	r18, r24
     da4:	2e 5f       	subi	r18, 0xFE	; 254
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
     da8:	ca 01       	movw	r24, r20
     daa:	b9 01       	movw	r22, r18
     dac:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     db0:	80 91 af 00 	lds	r24, 0x00AF
     db4:	88 23       	and	r24, r24
     db6:	09 f0       	breq	.+2      	; 0xdba <prvCheckPendingReadyList+0x8a>
     db8:	c1 cf       	rjmp	.-126    	; 0xd3c <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <prvCheckDelayedList+0x6>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <prvCheckDelayedList+0x8>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     dd0:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <xTaskGetTickCount>
     dd4:	20 91 83 00 	lds	r18, 0x0083
     dd8:	30 91 84 00 	lds	r19, 0x0084
     ddc:	82 1b       	sub	r24, r18
     dde:	93 0b       	sbc	r25, r19
     de0:	90 93 86 00 	sts	0x0086, r25
     de4:	80 93 85 00 	sts	0x0085, r24
     de8:	85 c0       	rjmp	.+266    	; 0xef4 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     dea:	80 91 81 00 	lds	r24, 0x0081
     dee:	90 91 82 00 	lds	r25, 0x0082
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	90 93 82 00 	sts	0x0082, r25
     df8:	80 93 81 00 	sts	0x0081, r24
		xPassedTicks--;
     dfc:	80 91 85 00 	lds	r24, 0x0085
     e00:	90 91 86 00 	lds	r25, 0x0086
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	90 93 86 00 	sts	0x0086, r25
     e0a:	80 93 85 00 	sts	0x0085, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     e0e:	80 91 81 00 	lds	r24, 0x0081
     e12:	90 91 82 00 	lds	r25, 0x0082
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	09 f0       	breq	.+2      	; 0xe1c <prvCheckDelayedList+0x58>
     e1a:	64 c0       	rjmp	.+200    	; 0xee4 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     e1c:	80 91 ab 00 	lds	r24, 0x00AB
     e20:	90 91 ac 00 	lds	r25, 0x00AC
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     e28:	80 91 ad 00 	lds	r24, 0x00AD
     e2c:	90 91 ae 00 	lds	r25, 0x00AE
     e30:	90 93 ac 00 	sts	0x00AC, r25
     e34:	80 93 ab 00 	sts	0x00AB, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	9a 81       	ldd	r25, Y+2	; 0x02
     e3c:	90 93 ae 00 	sts	0x00AE, r25
     e40:	80 93 ad 00 	sts	0x00AD, r24
     e44:	4f c0       	rjmp	.+158    	; 0xee4 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     e46:	e0 91 ab 00 	lds	r30, 0x00AB
     e4a:	f0 91 ac 00 	lds	r31, 0x00AC
     e4e:	05 80       	ldd	r0, Z+5	; 0x05
     e50:	f6 81       	ldd	r31, Z+6	; 0x06
     e52:	e0 2d       	mov	r30, r0
     e54:	86 81       	ldd	r24, Z+6	; 0x06
     e56:	97 81       	ldd	r25, Z+7	; 0x07
     e58:	9c 83       	std	Y+4, r25	; 0x04
     e5a:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     e5c:	eb 81       	ldd	r30, Y+3	; 0x03
     e5e:	fc 81       	ldd	r31, Y+4	; 0x04
     e60:	22 81       	ldd	r18, Z+2	; 0x02
     e62:	33 81       	ldd	r19, Z+3	; 0x03
     e64:	80 91 81 00 	lds	r24, 0x0081
     e68:	90 91 82 00 	lds	r25, 0x0082
     e6c:	82 17       	cp	r24, r18
     e6e:	93 07       	cpc	r25, r19
     e70:	08 f4       	brcc	.+2      	; 0xe74 <prvCheckDelayedList+0xb0>
     e72:	40 c0       	rjmp	.+128    	; 0xef4 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     e74:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	02 96       	adiw	r24, 0x02	; 2
     e7c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     e80:	eb 81       	ldd	r30, Y+3	; 0x03
     e82:	fc 81       	ldd	r31, Y+4	; 0x04
     e84:	84 89       	ldd	r24, Z+20	; 0x14
     e86:	95 89       	ldd	r25, Z+21	; 0x15
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	29 f0       	breq	.+10     	; 0xe96 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	0c 96       	adiw	r24, 0x0c	; 12
     e92:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     e96:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     e98:	eb 81       	ldd	r30, Y+3	; 0x03
     e9a:	fc 81       	ldd	r31, Y+4	; 0x04
     e9c:	96 89       	ldd	r25, Z+22	; 0x16
     e9e:	80 91 80 00 	lds	r24, 0x0080
     ea2:	89 17       	cp	r24, r25
     ea4:	28 f4       	brcc	.+10     	; 0xeb0 <prvCheckDelayedList+0xec>
     ea6:	eb 81       	ldd	r30, Y+3	; 0x03
     ea8:	fc 81       	ldd	r31, Y+4	; 0x04
     eaa:	86 89       	ldd	r24, Z+22	; 0x16
     eac:	80 93 80 00 	sts	0x0080, r24
     eb0:	eb 81       	ldd	r30, Y+3	; 0x03
     eb2:	fc 81       	ldd	r31, Y+4	; 0x04
     eb4:	86 89       	ldd	r24, Z+22	; 0x16
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	c9 01       	movw	r24, r18
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	82 0f       	add	r24, r18
     eca:	93 1f       	adc	r25, r19
     ecc:	ac 01       	movw	r20, r24
     ece:	49 57       	subi	r20, 0x79	; 121
     ed0:	5f 4f       	sbci	r21, 0xFF	; 255
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	9c 01       	movw	r18, r24
     ed8:	2e 5f       	subi	r18, 0xFE	; 254
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	ca 01       	movw	r24, r20
     ede:	b9 01       	movw	r22, r18
     ee0:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     ee4:	e0 91 ab 00 	lds	r30, 0x00AB
     ee8:	f0 91 ac 00 	lds	r31, 0x00AC
     eec:	80 81       	ld	r24, Z
     eee:	88 23       	and	r24, r24
     ef0:	09 f0       	breq	.+2      	; 0xef4 <prvCheckDelayedList+0x130>
     ef2:	a9 cf       	rjmp	.-174    	; 0xe46 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     ef4:	80 91 85 00 	lds	r24, 0x0085
     ef8:	90 91 86 00 	lds	r25, 0x0086
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	09 f0       	breq	.+2      	; 0xf02 <prvCheckDelayedList+0x13e>
     f00:	74 cf       	rjmp	.-280    	; 0xdea <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     f02:	80 91 81 00 	lds	r24, 0x0081
     f06:	90 91 82 00 	lds	r25, 0x0082
     f0a:	90 93 84 00 	sts	0x0084, r25
     f0e:	80 93 83 00 	sts	0x0083, r24
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	00 d0       	rcall	.+0      	; 0xf26 <vCoRoutineSchedule+0x6>
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     f2a:	0e 94 98 06 	call	0xd30	; 0xd30 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     f2e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <prvCheckDelayedList>
     f32:	0a c0       	rjmp	.+20     	; 0xf48 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     f34:	80 91 80 00 	lds	r24, 0x0080
     f38:	88 23       	and	r24, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <vCoRoutineSchedule+0x1e>
     f3c:	66 c0       	rjmp	.+204    	; 0x100a <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     f3e:	80 91 80 00 	lds	r24, 0x0080
     f42:	81 50       	subi	r24, 0x01	; 1
     f44:	80 93 80 00 	sts	0x0080, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     f48:	80 91 80 00 	lds	r24, 0x0080
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	c9 01       	movw	r24, r18
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	82 0f       	add	r24, r18
     f60:	93 1f       	adc	r25, r19
     f62:	fc 01       	movw	r30, r24
     f64:	e9 57       	subi	r30, 0x79	; 121
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	80 81       	ld	r24, Z
     f6a:	88 23       	and	r24, r24
     f6c:	19 f3       	breq	.-58     	; 0xf34 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     f6e:	80 91 80 00 	lds	r24, 0x0080
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	c9 01       	movw	r24, r18
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	82 0f       	add	r24, r18
     f86:	93 1f       	adc	r25, r19
     f88:	89 57       	subi	r24, 0x79	; 121
     f8a:	9f 4f       	sbci	r25, 0xFF	; 255
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	e9 81       	ldd	r30, Y+1	; 0x01
     f92:	fa 81       	ldd	r31, Y+2	; 0x02
     f94:	01 80       	ldd	r0, Z+1	; 0x01
     f96:	f2 81       	ldd	r31, Z+2	; 0x02
     f98:	e0 2d       	mov	r30, r0
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	e9 81       	ldd	r30, Y+1	; 0x01
     fa0:	fa 81       	ldd	r31, Y+2	; 0x02
     fa2:	92 83       	std	Z+2, r25	; 0x02
     fa4:	81 83       	std	Z+1, r24	; 0x01
     fa6:	e9 81       	ldd	r30, Y+1	; 0x01
     fa8:	fa 81       	ldd	r31, Y+2	; 0x02
     faa:	21 81       	ldd	r18, Z+1	; 0x01
     fac:	32 81       	ldd	r19, Z+2	; 0x02
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	03 96       	adiw	r24, 0x03	; 3
     fb4:	28 17       	cp	r18, r24
     fb6:	39 07       	cpc	r19, r25
     fb8:	59 f4       	brne	.+22     	; 0xfd0 <vCoRoutineSchedule+0xb0>
     fba:	e9 81       	ldd	r30, Y+1	; 0x01
     fbc:	fa 81       	ldd	r31, Y+2	; 0x02
     fbe:	01 80       	ldd	r0, Z+1	; 0x01
     fc0:	f2 81       	ldd	r31, Z+2	; 0x02
     fc2:	e0 2d       	mov	r30, r0
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	93 81       	ldd	r25, Z+3	; 0x03
     fc8:	e9 81       	ldd	r30, Y+1	; 0x01
     fca:	fa 81       	ldd	r31, Y+2	; 0x02
     fcc:	92 83       	std	Z+2, r25	; 0x02
     fce:	81 83       	std	Z+1, r24	; 0x01
     fd0:	e9 81       	ldd	r30, Y+1	; 0x01
     fd2:	fa 81       	ldd	r31, Y+2	; 0x02
     fd4:	01 80       	ldd	r0, Z+1	; 0x01
     fd6:	f2 81       	ldd	r31, Z+2	; 0x02
     fd8:	e0 2d       	mov	r30, r0
     fda:	86 81       	ldd	r24, Z+6	; 0x06
     fdc:	97 81       	ldd	r25, Z+7	; 0x07
     fde:	90 93 7f 00 	sts	0x007F, r25
     fe2:	80 93 7e 00 	sts	0x007E, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     fe6:	e0 91 7e 00 	lds	r30, 0x007E
     fea:	f0 91 7f 00 	lds	r31, 0x007F
     fee:	40 81       	ld	r20, Z
     ff0:	51 81       	ldd	r21, Z+1	; 0x01
     ff2:	80 91 7e 00 	lds	r24, 0x007E
     ff6:	90 91 7f 00 	lds	r25, 0x007F
     ffa:	e0 91 7e 00 	lds	r30, 0x007E
     ffe:	f0 91 7f 00 	lds	r31, 0x007F
    1002:	27 89       	ldd	r18, Z+23	; 0x17
    1004:	62 2f       	mov	r22, r18
    1006:	fa 01       	movw	r30, r20
    1008:	09 95       	icall

	return;
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	0f 92       	push	r0
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    101e:	19 82       	std	Y+1, r1	; 0x01
    1020:	13 c0       	rjmp	.+38     	; 0x1048 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	c9 01       	movw	r24, r18
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	82 0f       	add	r24, r18
    1038:	93 1f       	adc	r25, r19
    103a:	89 57       	subi	r24, 0x79	; 121
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	50 f3       	brcs	.-44     	; 0x1022 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    104e:	89 e9       	ldi	r24, 0x99	; 153
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    1056:	82 ea       	ldi	r24, 0xA2	; 162
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    105e:	8f ea       	ldi	r24, 0xAF	; 175
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    1066:	89 e9       	ldi	r24, 0x99	; 153
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	90 93 ac 00 	sts	0x00AC, r25
    106e:	80 93 ab 00 	sts	0x00AB, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    1072:	82 ea       	ldi	r24, 0xA2	; 162
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	90 93 ae 00 	sts	0x00AE, r25
    107a:	80 93 ad 00 	sts	0x00AD, r24
}
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <xCoRoutineRemoveFromEventList+0x6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <xCoRoutineRemoveFromEventList+0x8>
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	9d 83       	std	Y+5, r25	; 0x05
    1096:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1098:	ec 81       	ldd	r30, Y+4	; 0x04
    109a:	fd 81       	ldd	r31, Y+5	; 0x05
    109c:	05 80       	ldd	r0, Z+5	; 0x05
    109e:	f6 81       	ldd	r31, Z+6	; 0x06
    10a0:	e0 2d       	mov	r30, r0
    10a2:	86 81       	ldd	r24, Z+6	; 0x06
    10a4:	97 81       	ldd	r25, Z+7	; 0x07
    10a6:	9b 83       	std	Y+3, r25	; 0x03
    10a8:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	9b 81       	ldd	r25, Y+3	; 0x03
    10ae:	0c 96       	adiw	r24, 0x0c	; 12
    10b0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	9b 81       	ldd	r25, Y+3	; 0x03
    10b8:	9c 01       	movw	r18, r24
    10ba:	24 5f       	subi	r18, 0xF4	; 244
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	8f ea       	ldi	r24, 0xAF	; 175
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	b9 01       	movw	r22, r18
    10c4:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    10c8:	ea 81       	ldd	r30, Y+2	; 0x02
    10ca:	fb 81       	ldd	r31, Y+3	; 0x03
    10cc:	96 89       	ldd	r25, Z+22	; 0x16
    10ce:	e0 91 7e 00 	lds	r30, 0x007E
    10d2:	f0 91 7f 00 	lds	r31, 0x007F
    10d6:	86 89       	ldd	r24, Z+22	; 0x16
    10d8:	98 17       	cp	r25, r24
    10da:	18 f0       	brcs	.+6      	; 0x10e2 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    10e2:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <pvPortMalloc+0x6>
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <pvPortMalloc+0x8>
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    1106:	1a 82       	std	Y+2, r1	; 0x02
    1108:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    110a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    110e:	80 91 b8 00 	lds	r24, 0x00B8
    1112:	90 91 b9 00 	lds	r25, 0x00B9
    1116:	2b 81       	ldd	r18, Y+3	; 0x03
    1118:	3c 81       	ldd	r19, Y+4	; 0x04
    111a:	82 0f       	add	r24, r18
    111c:	93 1f       	adc	r25, r19
    111e:	23 e0       	ldi	r18, 0x03	; 3
    1120:	88 3e       	cpi	r24, 0xE8	; 232
    1122:	92 07       	cpc	r25, r18
    1124:	18 f5       	brcc	.+70     	; 0x116c <pvPortMalloc+0x76>
    1126:	20 91 b8 00 	lds	r18, 0x00B8
    112a:	30 91 b9 00 	lds	r19, 0x00B9
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	28 0f       	add	r18, r24
    1134:	39 1f       	adc	r19, r25
    1136:	80 91 b8 00 	lds	r24, 0x00B8
    113a:	90 91 b9 00 	lds	r25, 0x00B9
    113e:	82 17       	cp	r24, r18
    1140:	93 07       	cpc	r25, r19
    1142:	a0 f4       	brcc	.+40     	; 0x116c <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    1144:	80 91 b8 00 	lds	r24, 0x00B8
    1148:	90 91 b9 00 	lds	r25, 0x00B9
    114c:	86 54       	subi	r24, 0x46	; 70
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    1154:	20 91 b8 00 	lds	r18, 0x00B8
    1158:	30 91 b9 00 	lds	r19, 0x00B9
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	82 0f       	add	r24, r18
    1162:	93 1f       	adc	r25, r19
    1164:	90 93 b9 00 	sts	0x00B9, r25
    1168:	80 93 b8 00 	sts	0x00B8, r24
		}	
	}
	xTaskResumeAll();
    116c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <vPortFree+0x6>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    11a2:	10 92 b9 00 	sts	0x00B9, r1
    11a6:	10 92 b8 00 	sts	0x00B8, r1
}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    11b8:	20 91 b8 00 	lds	r18, 0x00B8
    11bc:	30 91 b9 00 	lds	r19, 0x00B9
    11c0:	88 ee       	ldi	r24, 0xE8	; 232
    11c2:	93 e0       	ldi	r25, 0x03	; 3
    11c4:	82 1b       	sub	r24, r18
    11c6:	93 0b       	sbc	r25, r19
}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <vListInitialise+0x6>
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	03 96       	adiw	r24, 0x03	; 3
    11e2:	e9 81       	ldd	r30, Y+1	; 0x01
    11e4:	fa 81       	ldd	r31, Y+2	; 0x02
    11e6:	92 83       	std	Z+2, r25	; 0x02
    11e8:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    11ea:	e9 81       	ldd	r30, Y+1	; 0x01
    11ec:	fa 81       	ldd	r31, Y+2	; 0x02
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	9f ef       	ldi	r25, 0xFF	; 255
    11f2:	94 83       	std	Z+4, r25	; 0x04
    11f4:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	03 96       	adiw	r24, 0x03	; 3
    11fc:	e9 81       	ldd	r30, Y+1	; 0x01
    11fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1200:	96 83       	std	Z+6, r25	; 0x06
    1202:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	03 96       	adiw	r24, 0x03	; 3
    120a:	e9 81       	ldd	r30, Y+1	; 0x01
    120c:	fa 81       	ldd	r31, Y+2	; 0x02
    120e:	90 87       	std	Z+8, r25	; 0x08
    1210:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    1212:	e9 81       	ldd	r30, Y+1	; 0x01
    1214:	fa 81       	ldd	r31, Y+2	; 0x02
    1216:	10 82       	st	Z, r1
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <vListInitialiseItem+0x6>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1230:	e9 81       	ldd	r30, Y+1	; 0x01
    1232:	fa 81       	ldd	r31, Y+2	; 0x02
    1234:	11 86       	std	Z+9, r1	; 0x09
    1236:	10 86       	std	Z+8, r1	; 0x08
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <vListInsertEnd+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <vListInsertEnd+0x8>
    124a:	00 d0       	rcall	.+0      	; 0x124c <vListInsertEnd+0xa>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	9c 83       	std	Y+4, r25	; 0x04
    1252:	8b 83       	std	Y+3, r24	; 0x03
    1254:	7e 83       	std	Y+6, r23	; 0x06
    1256:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1258:	eb 81       	ldd	r30, Y+3	; 0x03
    125a:	fc 81       	ldd	r31, Y+4	; 0x04
    125c:	81 81       	ldd	r24, Z+1	; 0x01
    125e:	92 81       	ldd	r25, Z+2	; 0x02
    1260:	9a 83       	std	Y+2, r25	; 0x02
    1262:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    1264:	e9 81       	ldd	r30, Y+1	; 0x01
    1266:	fa 81       	ldd	r31, Y+2	; 0x02
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	ed 81       	ldd	r30, Y+5	; 0x05
    126e:	fe 81       	ldd	r31, Y+6	; 0x06
    1270:	93 83       	std	Z+3, r25	; 0x03
    1272:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1274:	eb 81       	ldd	r30, Y+3	; 0x03
    1276:	fc 81       	ldd	r31, Y+4	; 0x04
    1278:	81 81       	ldd	r24, Z+1	; 0x01
    127a:	92 81       	ldd	r25, Z+2	; 0x02
    127c:	ed 81       	ldd	r30, Y+5	; 0x05
    127e:	fe 81       	ldd	r31, Y+6	; 0x06
    1280:	95 83       	std	Z+5, r25	; 0x05
    1282:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1284:	e9 81       	ldd	r30, Y+1	; 0x01
    1286:	fa 81       	ldd	r31, Y+2	; 0x02
    1288:	02 80       	ldd	r0, Z+2	; 0x02
    128a:	f3 81       	ldd	r31, Z+3	; 0x03
    128c:	e0 2d       	mov	r30, r0
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	95 83       	std	Z+5, r25	; 0x05
    1294:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	9e 81       	ldd	r25, Y+6	; 0x06
    129a:	e9 81       	ldd	r30, Y+1	; 0x01
    129c:	fa 81       	ldd	r31, Y+2	; 0x02
    129e:	93 83       	std	Z+3, r25	; 0x03
    12a0:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	eb 81       	ldd	r30, Y+3	; 0x03
    12a8:	fc 81       	ldd	r31, Y+4	; 0x04
    12aa:	92 83       	std	Z+2, r25	; 0x02
    12ac:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    12ae:	ed 81       	ldd	r30, Y+5	; 0x05
    12b0:	fe 81       	ldd	r31, Y+6	; 0x06
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	91 87       	std	Z+9, r25	; 0x09
    12b8:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    12ba:	eb 81       	ldd	r30, Y+3	; 0x03
    12bc:	fc 81       	ldd	r31, Y+4	; 0x04
    12be:	80 81       	ld	r24, Z
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	eb 81       	ldd	r30, Y+3	; 0x03
    12c4:	fc 81       	ldd	r31, Y+4	; 0x04
    12c6:	80 83       	st	Z, r24
}
    12c8:	26 96       	adiw	r28, 0x06	; 6
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	28 97       	sbiw	r28, 0x08	; 8
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	78 87       	std	Y+8, r23	; 0x08
    12f4:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    12f6:	ef 81       	ldd	r30, Y+7	; 0x07
    12f8:	f8 85       	ldd	r31, Y+8	; 0x08
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	2f ef       	ldi	r18, 0xFF	; 255
    1308:	8f 3f       	cpi	r24, 0xFF	; 255
    130a:	92 07       	cpc	r25, r18
    130c:	39 f4       	brne	.+14     	; 0x131c <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    130e:	ed 81       	ldd	r30, Y+5	; 0x05
    1310:	fe 81       	ldd	r31, Y+6	; 0x06
    1312:	87 81       	ldd	r24, Z+7	; 0x07
    1314:	90 85       	ldd	r25, Z+8	; 0x08
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	8b 83       	std	Y+3, r24	; 0x03
    131a:	18 c0       	rjmp	.+48     	; 0x134c <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	03 96       	adiw	r24, 0x03	; 3
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	8b 83       	std	Y+3, r24	; 0x03
    1326:	06 c0       	rjmp	.+12     	; 0x1334 <vListInsert+0x5a>
    1328:	eb 81       	ldd	r30, Y+3	; 0x03
    132a:	fc 81       	ldd	r31, Y+4	; 0x04
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
    1334:	eb 81       	ldd	r30, Y+3	; 0x03
    1336:	fc 81       	ldd	r31, Y+4	; 0x04
    1338:	02 80       	ldd	r0, Z+2	; 0x02
    133a:	f3 81       	ldd	r31, Z+3	; 0x03
    133c:	e0 2d       	mov	r30, r0
    133e:	20 81       	ld	r18, Z
    1340:	31 81       	ldd	r19, Z+1	; 0x01
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	82 17       	cp	r24, r18
    1348:	93 07       	cpc	r25, r19
    134a:	70 f7       	brcc	.-36     	; 0x1328 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    134c:	eb 81       	ldd	r30, Y+3	; 0x03
    134e:	fc 81       	ldd	r31, Y+4	; 0x04
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	ef 81       	ldd	r30, Y+7	; 0x07
    1356:	f8 85       	ldd	r31, Y+8	; 0x08
    1358:	93 83       	std	Z+3, r25	; 0x03
    135a:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    135c:	ef 81       	ldd	r30, Y+7	; 0x07
    135e:	f8 85       	ldd	r31, Y+8	; 0x08
    1360:	02 80       	ldd	r0, Z+2	; 0x02
    1362:	f3 81       	ldd	r31, Z+3	; 0x03
    1364:	e0 2d       	mov	r30, r0
    1366:	8f 81       	ldd	r24, Y+7	; 0x07
    1368:	98 85       	ldd	r25, Y+8	; 0x08
    136a:	95 83       	std	Z+5, r25	; 0x05
    136c:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    136e:	ef 81       	ldd	r30, Y+7	; 0x07
    1370:	f8 85       	ldd	r31, Y+8	; 0x08
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	95 83       	std	Z+5, r25	; 0x05
    1378:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    137a:	8f 81       	ldd	r24, Y+7	; 0x07
    137c:	98 85       	ldd	r25, Y+8	; 0x08
    137e:	eb 81       	ldd	r30, Y+3	; 0x03
    1380:	fc 81       	ldd	r31, Y+4	; 0x04
    1382:	93 83       	std	Z+3, r25	; 0x03
    1384:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1386:	ef 81       	ldd	r30, Y+7	; 0x07
    1388:	f8 85       	ldd	r31, Y+8	; 0x08
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	91 87       	std	Z+9, r25	; 0x09
    1390:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1392:	ed 81       	ldd	r30, Y+5	; 0x05
    1394:	fe 81       	ldd	r31, Y+6	; 0x06
    1396:	80 81       	ld	r24, Z
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	ed 81       	ldd	r30, Y+5	; 0x05
    139c:	fe 81       	ldd	r31, Y+6	; 0x06
    139e:	80 83       	st	Z, r24
}
    13a0:	28 96       	adiw	r28, 0x08	; 8
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <vListRemove+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <vListRemove+0x8>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	9c 83       	std	Y+4, r25	; 0x04
    13c0:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    13c2:	eb 81       	ldd	r30, Y+3	; 0x03
    13c4:	fc 81       	ldd	r31, Y+4	; 0x04
    13c6:	a2 81       	ldd	r26, Z+2	; 0x02
    13c8:	b3 81       	ldd	r27, Z+3	; 0x03
    13ca:	eb 81       	ldd	r30, Y+3	; 0x03
    13cc:	fc 81       	ldd	r31, Y+4	; 0x04
    13ce:	84 81       	ldd	r24, Z+4	; 0x04
    13d0:	95 81       	ldd	r25, Z+5	; 0x05
    13d2:	15 96       	adiw	r26, 0x05	; 5
    13d4:	9c 93       	st	X, r25
    13d6:	8e 93       	st	-X, r24
    13d8:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    13da:	eb 81       	ldd	r30, Y+3	; 0x03
    13dc:	fc 81       	ldd	r31, Y+4	; 0x04
    13de:	a4 81       	ldd	r26, Z+4	; 0x04
    13e0:	b5 81       	ldd	r27, Z+5	; 0x05
    13e2:	eb 81       	ldd	r30, Y+3	; 0x03
    13e4:	fc 81       	ldd	r31, Y+4	; 0x04
    13e6:	82 81       	ldd	r24, Z+2	; 0x02
    13e8:	93 81       	ldd	r25, Z+3	; 0x03
    13ea:	13 96       	adiw	r26, 0x03	; 3
    13ec:	9c 93       	st	X, r25
    13ee:	8e 93       	st	-X, r24
    13f0:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    13f2:	eb 81       	ldd	r30, Y+3	; 0x03
    13f4:	fc 81       	ldd	r31, Y+4	; 0x04
    13f6:	80 85       	ldd	r24, Z+8	; 0x08
    13f8:	91 85       	ldd	r25, Z+9	; 0x09
    13fa:	9a 83       	std	Y+2, r25	; 0x02
    13fc:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    13fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1400:	fa 81       	ldd	r31, Y+2	; 0x02
    1402:	21 81       	ldd	r18, Z+1	; 0x01
    1404:	32 81       	ldd	r19, Z+2	; 0x02
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	41 f4       	brne	.+16     	; 0x1420 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1410:	eb 81       	ldd	r30, Y+3	; 0x03
    1412:	fc 81       	ldd	r31, Y+4	; 0x04
    1414:	84 81       	ldd	r24, Z+4	; 0x04
    1416:	95 81       	ldd	r25, Z+5	; 0x05
    1418:	e9 81       	ldd	r30, Y+1	; 0x01
    141a:	fa 81       	ldd	r31, Y+2	; 0x02
    141c:	92 83       	std	Z+2, r25	; 0x02
    141e:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    1420:	eb 81       	ldd	r30, Y+3	; 0x03
    1422:	fc 81       	ldd	r31, Y+4	; 0x04
    1424:	11 86       	std	Z+9, r1	; 0x09
    1426:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1428:	e9 81       	ldd	r30, Y+1	; 0x01
    142a:	fa 81       	ldd	r31, Y+2	; 0x02
    142c:	80 81       	ld	r24, Z
    142e:	81 50       	subi	r24, 0x01	; 1
    1430:	e9 81       	ldd	r30, Y+1	; 0x01
    1432:	fa 81       	ldd	r31, Y+2	; 0x02
    1434:	80 83       	st	Z, r24
}
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	28 97       	sbiw	r28, 0x08	; 8
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	8b 83       	std	Y+3, r24	; 0x03
    145c:	7e 83       	std	Y+6, r23	; 0x06
    145e:	6d 83       	std	Y+5, r22	; 0x05
    1460:	58 87       	std	Y+8, r21	; 0x08
    1462:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    1464:	eb 81       	ldd	r30, Y+3	; 0x03
    1466:	fc 81       	ldd	r31, Y+4	; 0x04
    1468:	81 e1       	ldi	r24, 0x11	; 17
    146a:	80 83       	st	Z, r24
	pxTopOfStack--;
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	9c 83       	std	Y+4, r25	; 0x04
    1474:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    1476:	eb 81       	ldd	r30, Y+3	; 0x03
    1478:	fc 81       	ldd	r31, Y+4	; 0x04
    147a:	82 e2       	ldi	r24, 0x22	; 34
    147c:	80 83       	st	Z, r24
	pxTopOfStack--;
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	9c 83       	std	Y+4, r25	; 0x04
    1486:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    1488:	eb 81       	ldd	r30, Y+3	; 0x03
    148a:	fc 81       	ldd	r31, Y+4	; 0x04
    148c:	83 e3       	ldi	r24, 0x33	; 51
    148e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	9c 83       	std	Y+4, r25	; 0x04
    1498:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	9e 81       	ldd	r25, Y+6	; 0x06
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	eb 81       	ldd	r30, Y+3	; 0x03
    14a6:	fc 81       	ldd	r31, Y+4	; 0x04
    14a8:	80 83       	st	Z, r24
	pxTopOfStack--;
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	9c 83       	std	Y+4, r25	; 0x04
    14b2:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	89 2f       	mov	r24, r25
    14ba:	99 27       	eor	r25, r25
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	eb 81       	ldd	r30, Y+3	; 0x03
    14c4:	fc 81       	ldd	r31, Y+4	; 0x04
    14c6:	80 83       	st	Z, r24
	pxTopOfStack--;
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	9c 83       	std	Y+4, r25	; 0x04
    14d0:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    14d2:	eb 81       	ldd	r30, Y+3	; 0x03
    14d4:	fc 81       	ldd	r31, Y+4	; 0x04
    14d6:	10 82       	st	Z, r1
	pxTopOfStack--;
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	9c 83       	std	Y+4, r25	; 0x04
    14e0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    14e2:	eb 81       	ldd	r30, Y+3	; 0x03
    14e4:	fc 81       	ldd	r31, Y+4	; 0x04
    14e6:	80 e8       	ldi	r24, 0x80	; 128
    14e8:	80 83       	st	Z, r24
	pxTopOfStack--;
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	9c 83       	std	Y+4, r25	; 0x04
    14f2:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    14f4:	eb 81       	ldd	r30, Y+3	; 0x03
    14f6:	fc 81       	ldd	r31, Y+4	; 0x04
    14f8:	10 82       	st	Z, r1
	pxTopOfStack--;
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	9c 83       	std	Y+4, r25	; 0x04
    1502:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    1504:	eb 81       	ldd	r30, Y+3	; 0x03
    1506:	fc 81       	ldd	r31, Y+4	; 0x04
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	80 83       	st	Z, r24
	pxTopOfStack--;
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	9c 83       	std	Y+4, r25	; 0x04
    1514:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    1516:	eb 81       	ldd	r30, Y+3	; 0x03
    1518:	fc 81       	ldd	r31, Y+4	; 0x04
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	80 83       	st	Z, r24
	pxTopOfStack--;
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	9c 83       	std	Y+4, r25	; 0x04
    1526:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    1528:	eb 81       	ldd	r30, Y+3	; 0x03
    152a:	fc 81       	ldd	r31, Y+4	; 0x04
    152c:	84 e0       	ldi	r24, 0x04	; 4
    152e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	9c 83       	std	Y+4, r25	; 0x04
    1538:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    153a:	eb 81       	ldd	r30, Y+3	; 0x03
    153c:	fc 81       	ldd	r31, Y+4	; 0x04
    153e:	85 e0       	ldi	r24, 0x05	; 5
    1540:	80 83       	st	Z, r24
	pxTopOfStack--;
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    154c:	eb 81       	ldd	r30, Y+3	; 0x03
    154e:	fc 81       	ldd	r31, Y+4	; 0x04
    1550:	86 e0       	ldi	r24, 0x06	; 6
    1552:	80 83       	st	Z, r24
	pxTopOfStack--;
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    155e:	eb 81       	ldd	r30, Y+3	; 0x03
    1560:	fc 81       	ldd	r31, Y+4	; 0x04
    1562:	87 e0       	ldi	r24, 0x07	; 7
    1564:	80 83       	st	Z, r24
	pxTopOfStack--;
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	9c 83       	std	Y+4, r25	; 0x04
    156e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    1570:	eb 81       	ldd	r30, Y+3	; 0x03
    1572:	fc 81       	ldd	r31, Y+4	; 0x04
    1574:	88 e0       	ldi	r24, 0x08	; 8
    1576:	80 83       	st	Z, r24
	pxTopOfStack--;
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9c 83       	std	Y+4, r25	; 0x04
    1580:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    1582:	eb 81       	ldd	r30, Y+3	; 0x03
    1584:	fc 81       	ldd	r31, Y+4	; 0x04
    1586:	89 e0       	ldi	r24, 0x09	; 9
    1588:	80 83       	st	Z, r24
	pxTopOfStack--;
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	9c 83       	std	Y+4, r25	; 0x04
    1592:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    1594:	eb 81       	ldd	r30, Y+3	; 0x03
    1596:	fc 81       	ldd	r31, Y+4	; 0x04
    1598:	80 e1       	ldi	r24, 0x10	; 16
    159a:	80 83       	st	Z, r24
	pxTopOfStack--;
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    15a6:	eb 81       	ldd	r30, Y+3	; 0x03
    15a8:	fc 81       	ldd	r31, Y+4	; 0x04
    15aa:	81 e1       	ldi	r24, 0x11	; 17
    15ac:	80 83       	st	Z, r24
	pxTopOfStack--;
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    15b8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ba:	fc 81       	ldd	r31, Y+4	; 0x04
    15bc:	82 e1       	ldi	r24, 0x12	; 18
    15be:	80 83       	st	Z, r24
	pxTopOfStack--;
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	9c 83       	std	Y+4, r25	; 0x04
    15c8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    15ca:	eb 81       	ldd	r30, Y+3	; 0x03
    15cc:	fc 81       	ldd	r31, Y+4	; 0x04
    15ce:	83 e1       	ldi	r24, 0x13	; 19
    15d0:	80 83       	st	Z, r24
	pxTopOfStack--;
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	9c 83       	std	Y+4, r25	; 0x04
    15da:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    15dc:	eb 81       	ldd	r30, Y+3	; 0x03
    15de:	fc 81       	ldd	r31, Y+4	; 0x04
    15e0:	84 e1       	ldi	r24, 0x14	; 20
    15e2:	80 83       	st	Z, r24
	pxTopOfStack--;
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	9c 83       	std	Y+4, r25	; 0x04
    15ec:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    15ee:	eb 81       	ldd	r30, Y+3	; 0x03
    15f0:	fc 81       	ldd	r31, Y+4	; 0x04
    15f2:	85 e1       	ldi	r24, 0x15	; 21
    15f4:	80 83       	st	Z, r24
	pxTopOfStack--;
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	9c 83       	std	Y+4, r25	; 0x04
    15fe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    1600:	eb 81       	ldd	r30, Y+3	; 0x03
    1602:	fc 81       	ldd	r31, Y+4	; 0x04
    1604:	86 e1       	ldi	r24, 0x16	; 22
    1606:	80 83       	st	Z, r24
	pxTopOfStack--;
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	9c 83       	std	Y+4, r25	; 0x04
    1610:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    1612:	eb 81       	ldd	r30, Y+3	; 0x03
    1614:	fc 81       	ldd	r31, Y+4	; 0x04
    1616:	87 e1       	ldi	r24, 0x17	; 23
    1618:	80 83       	st	Z, r24
	pxTopOfStack--;
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    1624:	eb 81       	ldd	r30, Y+3	; 0x03
    1626:	fc 81       	ldd	r31, Y+4	; 0x04
    1628:	88 e1       	ldi	r24, 0x18	; 24
    162a:	80 83       	st	Z, r24
	pxTopOfStack--;
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	9c 83       	std	Y+4, r25	; 0x04
    1634:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    1636:	eb 81       	ldd	r30, Y+3	; 0x03
    1638:	fc 81       	ldd	r31, Y+4	; 0x04
    163a:	89 e1       	ldi	r24, 0x19	; 25
    163c:	80 83       	st	Z, r24
	pxTopOfStack--;
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	9c 83       	std	Y+4, r25	; 0x04
    1646:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    1648:	eb 81       	ldd	r30, Y+3	; 0x03
    164a:	fc 81       	ldd	r31, Y+4	; 0x04
    164c:	80 e2       	ldi	r24, 0x20	; 32
    164e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	9c 83       	std	Y+4, r25	; 0x04
    1658:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    165a:	eb 81       	ldd	r30, Y+3	; 0x03
    165c:	fc 81       	ldd	r31, Y+4	; 0x04
    165e:	81 e2       	ldi	r24, 0x21	; 33
    1660:	80 83       	st	Z, r24
	pxTopOfStack--;
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    166c:	eb 81       	ldd	r30, Y+3	; 0x03
    166e:	fc 81       	ldd	r31, Y+4	; 0x04
    1670:	82 e2       	ldi	r24, 0x22	; 34
    1672:	80 83       	st	Z, r24
	pxTopOfStack--;
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    167e:	eb 81       	ldd	r30, Y+3	; 0x03
    1680:	fc 81       	ldd	r31, Y+4	; 0x04
    1682:	83 e2       	ldi	r24, 0x23	; 35
    1684:	80 83       	st	Z, r24
	pxTopOfStack--;
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    1690:	8f 81       	ldd	r24, Y+7	; 0x07
    1692:	98 85       	ldd	r25, Y+8	; 0x08
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	eb 81       	ldd	r30, Y+3	; 0x03
    169c:	fc 81       	ldd	r31, Y+4	; 0x04
    169e:	80 83       	st	Z, r24
	pxTopOfStack--;
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9c 83       	std	Y+4, r25	; 0x04
    16a8:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	89 2f       	mov	r24, r25
    16b0:	99 27       	eor	r25, r25
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ba:	fc 81       	ldd	r31, Y+4	; 0x04
    16bc:	80 83       	st	Z, r24
	pxTopOfStack--;
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    16c8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ca:	fc 81       	ldd	r31, Y+4	; 0x04
    16cc:	86 e2       	ldi	r24, 0x26	; 38
    16ce:	80 83       	st	Z, r24
	pxTopOfStack--;
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    16da:	eb 81       	ldd	r30, Y+3	; 0x03
    16dc:	fc 81       	ldd	r31, Y+4	; 0x04
    16de:	87 e2       	ldi	r24, 0x27	; 39
    16e0:	80 83       	st	Z, r24
	pxTopOfStack--;
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    16ec:	eb 81       	ldd	r30, Y+3	; 0x03
    16ee:	fc 81       	ldd	r31, Y+4	; 0x04
    16f0:	88 e2       	ldi	r24, 0x28	; 40
    16f2:	80 83       	st	Z, r24
	pxTopOfStack--;
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    16fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1700:	fc 81       	ldd	r31, Y+4	; 0x04
    1702:	89 e2       	ldi	r24, 0x29	; 41
    1704:	80 83       	st	Z, r24
	pxTopOfStack--;
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    1710:	eb 81       	ldd	r30, Y+3	; 0x03
    1712:	fc 81       	ldd	r31, Y+4	; 0x04
    1714:	80 e3       	ldi	r24, 0x30	; 48
    1716:	80 83       	st	Z, r24
	pxTopOfStack--;
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	9c 83       	std	Y+4, r25	; 0x04
    1720:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    1722:	eb 81       	ldd	r30, Y+3	; 0x03
    1724:	fc 81       	ldd	r31, Y+4	; 0x04
    1726:	81 e3       	ldi	r24, 0x31	; 49
    1728:	80 83       	st	Z, r24
	pxTopOfStack--;
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9c 83       	std	Y+4, r25	; 0x04
    1732:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1738:	28 96       	adiw	r28, 0x08	; 8
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    1752:	0e 94 95 0c 	call	0x192a	; 0x192a <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    1756:	a0 91 a2 04 	lds	r26, 0x04A2
    175a:	b0 91 a3 04 	lds	r27, 0x04A3
    175e:	cd 91       	ld	r28, X+
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	dd 91       	ld	r29, X+
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	ff 91       	pop	r31
    1768:	ef 91       	pop	r30
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	bf 91       	pop	r27
    1770:	af 91       	pop	r26
    1772:	9f 91       	pop	r25
    1774:	8f 91       	pop	r24
    1776:	7f 91       	pop	r23
    1778:	6f 91       	pop	r22
    177a:	5f 91       	pop	r21
    177c:	4f 91       	pop	r20
    177e:	3f 91       	pop	r19
    1780:	2f 91       	pop	r18
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	bf 90       	pop	r11
    1790:	af 90       	pop	r10
    1792:	9f 90       	pop	r9
    1794:	8f 90       	pop	r8
    1796:	7f 90       	pop	r7
    1798:	6f 90       	pop	r6
    179a:	5f 90       	pop	r5
    179c:	4f 90       	pop	r4
    179e:	3f 90       	pop	r3
    17a0:	2f 90       	pop	r2
    17a2:	1f 90       	pop	r1
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    17aa:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
}
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    17c2:	0f 92       	push	r0
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	0f 92       	push	r0
    17ca:	1f 92       	push	r1
    17cc:	11 24       	eor	r1, r1
    17ce:	2f 92       	push	r2
    17d0:	3f 92       	push	r3
    17d2:	4f 92       	push	r4
    17d4:	5f 92       	push	r5
    17d6:	6f 92       	push	r6
    17d8:	7f 92       	push	r7
    17da:	8f 92       	push	r8
    17dc:	9f 92       	push	r9
    17de:	af 92       	push	r10
    17e0:	bf 92       	push	r11
    17e2:	cf 92       	push	r12
    17e4:	df 92       	push	r13
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	5f 93       	push	r21
    17f6:	6f 93       	push	r22
    17f8:	7f 93       	push	r23
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	af 93       	push	r26
    1800:	bf 93       	push	r27
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	ef 93       	push	r30
    1808:	ff 93       	push	r31
    180a:	a0 91 a2 04 	lds	r26, 0x04A2
    180e:	b0 91 a3 04 	lds	r27, 0x04A3
    1812:	0d b6       	in	r0, 0x3d	; 61
    1814:	0d 92       	st	X+, r0
    1816:	0e b6       	in	r0, 0x3e	; 62
    1818:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    181a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    181e:	a0 91 a2 04 	lds	r26, 0x04A2
    1822:	b0 91 a3 04 	lds	r27, 0x04A3
    1826:	cd 91       	ld	r28, X+
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	dd 91       	ld	r29, X+
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	7f 91       	pop	r23
    1840:	6f 91       	pop	r22
    1842:	5f 91       	pop	r21
    1844:	4f 91       	pop	r20
    1846:	3f 91       	pop	r19
    1848:	2f 91       	pop	r18
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	bf 90       	pop	r11
    1858:	af 90       	pop	r10
    185a:	9f 90       	pop	r9
    185c:	8f 90       	pop	r8
    185e:	7f 90       	pop	r7
    1860:	6f 90       	pop	r6
    1862:	5f 90       	pop	r5
    1864:	4f 90       	pop	r4
    1866:	3f 90       	pop	r3
    1868:	2f 90       	pop	r2
    186a:	1f 90       	pop	r1
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1872:	08 95       	ret

00001874 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1874:	0f 92       	push	r0
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	0f 92       	push	r0
    187c:	1f 92       	push	r1
    187e:	11 24       	eor	r1, r1
    1880:	2f 92       	push	r2
    1882:	3f 92       	push	r3
    1884:	4f 92       	push	r4
    1886:	5f 92       	push	r5
    1888:	6f 92       	push	r6
    188a:	7f 92       	push	r7
    188c:	8f 92       	push	r8
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	2f 93       	push	r18
    18a2:	3f 93       	push	r19
    18a4:	4f 93       	push	r20
    18a6:	5f 93       	push	r21
    18a8:	6f 93       	push	r22
    18aa:	7f 93       	push	r23
    18ac:	8f 93       	push	r24
    18ae:	9f 93       	push	r25
    18b0:	af 93       	push	r26
    18b2:	bf 93       	push	r27
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	ef 93       	push	r30
    18ba:	ff 93       	push	r31
    18bc:	a0 91 a2 04 	lds	r26, 0x04A2
    18c0:	b0 91 a3 04 	lds	r27, 0x04A3
    18c4:	0d b6       	in	r0, 0x3d	; 61
    18c6:	0d 92       	st	X+, r0
    18c8:	0e b6       	in	r0, 0x3e	; 62
    18ca:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    18cc:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <vTaskIncrementTick>
	vTaskSwitchContext();
    18d0:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    18d4:	a0 91 a2 04 	lds	r26, 0x04A2
    18d8:	b0 91 a3 04 	lds	r27, 0x04A3
    18dc:	cd 91       	ld	r28, X+
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	dd 91       	ld	r29, X+
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	ff 91       	pop	r31
    18e6:	ef 91       	pop	r30
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	7f 91       	pop	r23
    18f6:	6f 91       	pop	r22
    18f8:	5f 91       	pop	r21
    18fa:	4f 91       	pop	r20
    18fc:	3f 91       	pop	r19
    18fe:	2f 91       	pop	r18
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	bf 90       	pop	r11
    190e:	af 90       	pop	r10
    1910:	9f 90       	pop	r9
    1912:	8f 90       	pop	r8
    1914:	7f 90       	pop	r7
    1916:	6f 90       	pop	r6
    1918:	5f 90       	pop	r5
    191a:	4f 90       	pop	r4
    191c:	3f 90       	pop	r3
    191e:	2f 90       	pop	r2
    1920:	1f 90       	pop	r1
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1928:	08 95       	ret

0000192a <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	00 d0       	rcall	.+0      	; 0x1930 <prvSetupTimerInterrupt+0x6>
    1930:	00 d0       	rcall	.+0      	; 0x1932 <prvSetupTimerInterrupt+0x8>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <prvSetupTimerInterrupt+0xa>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1938:	80 e4       	ldi	r24, 0x40	; 64
    193a:	9f e1       	ldi	r25, 0x1F	; 31
    193c:	a0 e0       	ldi	r26, 0x00	; 0
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	8b 83       	std	Y+3, r24	; 0x03
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	ad 83       	std	Y+5, r26	; 0x05
    1946:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	ad 81       	ldd	r26, Y+5	; 0x05
    194e:	be 81       	ldd	r27, Y+6	; 0x06
    1950:	68 94       	set
    1952:	15 f8       	bld	r1, 5
    1954:	b6 95       	lsr	r27
    1956:	a7 95       	ror	r26
    1958:	97 95       	ror	r25
    195a:	87 95       	ror	r24
    195c:	16 94       	lsr	r1
    195e:	d1 f7       	brne	.-12     	; 0x1954 <prvSetupTimerInterrupt+0x2a>
    1960:	8b 83       	std	Y+3, r24	; 0x03
    1962:	9c 83       	std	Y+4, r25	; 0x04
    1964:	ad 83       	std	Y+5, r26	; 0x05
    1966:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	ad 81       	ldd	r26, Y+5	; 0x05
    196e:	be 81       	ldd	r27, Y+6	; 0x06
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	a1 09       	sbc	r26, r1
    1974:	b1 09       	sbc	r27, r1
    1976:	8b 83       	std	Y+3, r24	; 0x03
    1978:	9c 83       	std	Y+4, r25	; 0x04
    197a:	ad 83       	std	Y+5, r26	; 0x05
    197c:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	ad 81       	ldd	r26, Y+5	; 0x05
    1988:	be 81       	ldd	r27, Y+6	; 0x06
    198a:	89 2f       	mov	r24, r25
    198c:	9a 2f       	mov	r25, r26
    198e:	ab 2f       	mov	r26, r27
    1990:	bb 27       	eor	r27, r27
    1992:	8b 83       	std	Y+3, r24	; 0x03
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	ad 83       	std	Y+5, r26	; 0x05
    1998:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    199e:	eb e4       	ldi	r30, 0x4B	; 75
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    19a6:	ea e4       	ldi	r30, 0x4A	; 74
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    19ae:	8b e0       	ldi	r24, 0x0B	; 11
    19b0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    19b2:	ee e4       	ldi	r30, 0x4E	; 78
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    19ba:	e9 e5       	ldi	r30, 0x59	; 89
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	80 61       	ori	r24, 0x10	; 16
    19c6:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    19c8:	e9 e5       	ldi	r30, 0x59	; 89
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	80 83       	st	Z, r24
}
    19d0:	26 96       	adiw	r28, 0x06	; 6
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    19e2:	0e 94 3a 0c 	call	0x1874	; 0x1874 <vPortYieldFromTick>
		asm volatile ( "reti" );
    19e6:	18 95       	reti

000019e8 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	28 97       	sbiw	r28, 0x08	; 8
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	8f 83       	std	Y+7, r24	; 0x07
    19fe:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    1a00:	1a 82       	std	Y+2, r1	; 0x02
    1a02:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1a04:	8f 81       	ldd	r24, Y+7	; 0x07
    1a06:	88 23       	and	r24, r24
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <xQueueCreate+0x24>
    1a0a:	8c c0       	rjmp	.+280    	; 0x1b24 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1a0c:	8f e1       	ldi	r24, 0x1F	; 31
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <xQueueCreate+0x3a>
    1a20:	81 c0       	rjmp	.+258    	; 0x1b24 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    1a22:	8f 81       	ldd	r24, Y+7	; 0x07
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	88 85       	ldd	r24, Y+8	; 0x08
    1a2a:	88 2f       	mov	r24, r24
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	ac 01       	movw	r20, r24
    1a30:	24 9f       	mul	r18, r20
    1a32:	c0 01       	movw	r24, r0
    1a34:	25 9f       	mul	r18, r21
    1a36:	90 0d       	add	r25, r0
    1a38:	34 9f       	mul	r19, r20
    1a3a:	90 0d       	add	r25, r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	9c 83       	std	Y+4, r25	; 0x04
    1a42:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	9c 81       	ldd	r25, Y+4	; 0x04
    1a48:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
    1a4c:	ed 81       	ldd	r30, Y+5	; 0x05
    1a4e:	fe 81       	ldd	r31, Y+6	; 0x06
    1a50:	91 83       	std	Z+1, r25	; 0x01
    1a52:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    1a54:	ed 81       	ldd	r30, Y+5	; 0x05
    1a56:	fe 81       	ldd	r31, Y+6	; 0x06
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <xQueueCreate+0x7a>
    1a60:	5d c0       	rjmp	.+186    	; 0x1b1c <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    1a62:	ed 81       	ldd	r30, Y+5	; 0x05
    1a64:	fe 81       	ldd	r31, Y+6	; 0x06
    1a66:	40 81       	ld	r20, Z
    1a68:	51 81       	ldd	r21, Z+1	; 0x01
    1a6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	88 85       	ldd	r24, Y+8	; 0x08
    1a72:	88 2f       	mov	r24, r24
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	bc 01       	movw	r22, r24
    1a78:	26 9f       	mul	r18, r22
    1a7a:	c0 01       	movw	r24, r0
    1a7c:	27 9f       	mul	r18, r23
    1a7e:	90 0d       	add	r25, r0
    1a80:	36 9f       	mul	r19, r22
    1a82:	90 0d       	add	r25, r0
    1a84:	11 24       	eor	r1, r1
    1a86:	84 0f       	add	r24, r20
    1a88:	95 1f       	adc	r25, r21
    1a8a:	ed 81       	ldd	r30, Y+5	; 0x05
    1a8c:	fe 81       	ldd	r31, Y+6	; 0x06
    1a8e:	93 83       	std	Z+3, r25	; 0x03
    1a90:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    1a92:	ed 81       	ldd	r30, Y+5	; 0x05
    1a94:	fe 81       	ldd	r31, Y+6	; 0x06
    1a96:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    1a98:	ed 81       	ldd	r30, Y+5	; 0x05
    1a9a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	ed 81       	ldd	r30, Y+5	; 0x05
    1aa2:	fe 81       	ldd	r31, Y+6	; 0x06
    1aa4:	95 83       	std	Z+5, r25	; 0x05
    1aa6:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    1aa8:	ed 81       	ldd	r30, Y+5	; 0x05
    1aaa:	fe 81       	ldd	r31, Y+6	; 0x06
    1aac:	40 81       	ld	r20, Z
    1aae:	51 81       	ldd	r21, Z+1	; 0x01
    1ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9c 01       	movw	r18, r24
    1ab8:	21 50       	subi	r18, 0x01	; 1
    1aba:	30 40       	sbci	r19, 0x00	; 0
    1abc:	88 85       	ldd	r24, Y+8	; 0x08
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	26 9f       	mul	r18, r22
    1ac6:	c0 01       	movw	r24, r0
    1ac8:	27 9f       	mul	r18, r23
    1aca:	90 0d       	add	r25, r0
    1acc:	36 9f       	mul	r19, r22
    1ace:	90 0d       	add	r25, r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	84 0f       	add	r24, r20
    1ad4:	95 1f       	adc	r25, r21
    1ad6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ad8:	fe 81       	ldd	r31, Y+6	; 0x06
    1ada:	97 83       	std	Z+7, r25	; 0x07
    1adc:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    1ade:	ed 81       	ldd	r30, Y+5	; 0x05
    1ae0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ae2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae4:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    1ae6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ae8:	fe 81       	ldd	r31, Y+6	; 0x06
    1aea:	88 85       	ldd	r24, Y+8	; 0x08
    1aec:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    1aee:	ed 81       	ldd	r30, Y+5	; 0x05
    1af0:	fe 81       	ldd	r31, Y+6	; 0x06
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    1af6:	ed 81       	ldd	r30, Y+5	; 0x05
    1af8:	fe 81       	ldd	r31, Y+6	; 0x06
    1afa:	8f ef       	ldi	r24, 0xFF	; 255
    1afc:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	08 96       	adiw	r24, 0x08	; 8
    1b04:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	41 96       	adiw	r24, 0x11	; 17
    1b0e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	9a 83       	std	Y+2, r25	; 0x02
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b28:	28 96       	adiw	r28, 0x08	; 8
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <xQueueCreateCountingSemaphore+0x6>
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <xQueueCreateCountingSemaphore+0x8>
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	8b 83       	std	Y+3, r24	; 0x03
    1b48:	6c 83       	std	Y+4, r22	; 0x04
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <xQueueCreate>
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01

		if( pxHandle != NULL )
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	21 f0       	breq	.+8      	; 0x1b66 <xQueueCreateCountingSemaphore+0x2c>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
    1b5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b60:	fa 81       	ldd	r31, Y+2	; 0x02
    1b62:	8c 81       	ldd	r24, Y+4	; 0x04
    1b64:	82 8f       	std	Z+26, r24	; 0x1a
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	2c 97       	sbiw	r28, 0x0c	; 12
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
    1b90:	78 87       	std	Y+8, r23	; 0x08
    1b92:	6f 83       	std	Y+7, r22	; 0x07
    1b94:	5a 87       	std	Y+10, r21	; 0x0a
    1b96:	49 87       	std	Y+9, r20	; 0x09
    1b98:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1b9a:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1ba2:	ed 81       	ldd	r30, Y+5	; 0x05
    1ba4:	fe 81       	ldd	r31, Y+6	; 0x06
    1ba6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ba8:	ed 81       	ldd	r30, Y+5	; 0x05
    1baa:	fe 81       	ldd	r31, Y+6	; 0x06
    1bac:	83 8d       	ldd	r24, Z+27	; 0x1b
    1bae:	98 17       	cp	r25, r24
    1bb0:	d8 f4       	brcc	.+54     	; 0x1be8 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb6:	2f 81       	ldd	r18, Y+7	; 0x07
    1bb8:	38 85       	ldd	r19, Y+8	; 0x08
    1bba:	b9 01       	movw	r22, r18
    1bbc:	4b 85       	ldd	r20, Y+11	; 0x0b
    1bbe:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1bc2:	ed 81       	ldd	r30, Y+5	; 0x05
    1bc4:	fe 81       	ldd	r31, Y+6	; 0x06
    1bc6:	81 89       	ldd	r24, Z+17	; 0x11
    1bc8:	88 23       	and	r24, r24
    1bca:	49 f0       	breq	.+18     	; 0x1bde <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	41 96       	adiw	r24, 0x11	; 17
    1bd2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <xTaskRemoveFromEventList>
    1bd6:	81 30       	cpi	r24, 0x01	; 1
    1bd8:	11 f4       	brne	.+4      	; 0x1bde <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    1bda:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    1bde:	0f 90       	pop	r0
    1be0:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	8c 87       	std	Y+12, r24	; 0x0c
    1be6:	5c c0       	rjmp	.+184    	; 0x1ca0 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	21 f4       	brne	.+8      	; 0x1bf8 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1bf4:	1c 86       	std	Y+12, r1	; 0x0c
    1bf6:	54 c0       	rjmp	.+168    	; 0x1ca0 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	88 23       	and	r24, r24
    1bfc:	31 f4       	brne	.+12     	; 0x1c0a <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1bfe:	ce 01       	movw	r24, r28
    1c00:	02 96       	adiw	r24, 0x02	; 2
    1c02:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1c0e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	0f 92       	push	r0
    1c18:	ed 81       	ldd	r30, Y+5	; 0x05
    1c1a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c1c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <xQueueGenericSend+0xb0>
    1c22:	ed 81       	ldd	r30, Y+5	; 0x05
    1c24:	fe 81       	ldd	r31, Y+6	; 0x06
    1c26:	15 8e       	std	Z+29, r1	; 0x1d
    1c28:	ed 81       	ldd	r30, Y+5	; 0x05
    1c2a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c2c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c30:	19 f4       	brne	.+6      	; 0x1c38 <xQueueGenericSend+0xc0>
    1c32:	ed 81       	ldd	r30, Y+5	; 0x05
    1c34:	fe 81       	ldd	r31, Y+6	; 0x06
    1c36:	16 8e       	std	Z+30, r1	; 0x1e
    1c38:	0f 90       	pop	r0
    1c3a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	02 96       	adiw	r24, 0x02	; 2
    1c40:	9e 01       	movw	r18, r28
    1c42:	27 5f       	subi	r18, 0xF7	; 247
    1c44:	3f 4f       	sbci	r19, 0xFF	; 255
    1c46:	b9 01       	movw	r22, r18
    1c48:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <xTaskCheckForTimeOut>
    1c4c:	88 23       	and	r24, r24
    1c4e:	09 f5       	brne	.+66     	; 0x1c92 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <prvIsQueueFull>
    1c58:	88 23       	and	r24, r24
    1c5a:	a1 f0       	breq	.+40     	; 0x1c84 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c60:	08 96       	adiw	r24, 0x08	; 8
    1c62:	29 85       	ldd	r18, Y+9	; 0x09
    1c64:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c66:	b9 01       	movw	r22, r18
    1c68:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1c74:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <xTaskResumeAll>
    1c78:	88 23       	and	r24, r24
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <xQueueGenericSend+0x106>
    1c7c:	8f cf       	rjmp	.-226    	; 0x1b9c <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    1c7e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
    1c82:	8c cf       	rjmp	.-232    	; 0x1b9c <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1c8c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <xTaskResumeAll>
    1c90:	85 cf       	rjmp	.-246    	; 0x1b9c <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	9e 81       	ldd	r25, Y+6	; 0x06
    1c96:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1c9a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1c9e:	1c 86       	std	Y+12, r1	; 0x0c
    1ca0:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    1ca2:	2c 96       	adiw	r28, 0x0c	; 12
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	29 97       	sbiw	r28, 0x09	; 9
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	9c 83       	std	Y+4, r25	; 0x04
    1cca:	8b 83       	std	Y+3, r24	; 0x03
    1ccc:	7e 83       	std	Y+6, r23	; 0x06
    1cce:	6d 83       	std	Y+5, r22	; 0x05
    1cd0:	58 87       	std	Y+8, r21	; 0x08
    1cd2:	4f 83       	std	Y+7, r20	; 0x07
    1cd4:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1cd6:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1cd8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cda:	fc 81       	ldd	r31, Y+4	; 0x04
    1cdc:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cde:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce2:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ce4:	98 17       	cp	r25, r24
    1ce6:	40 f5       	brcc	.+80     	; 0x1d38 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	2d 81       	ldd	r18, Y+5	; 0x05
    1cee:	3e 81       	ldd	r19, Y+6	; 0x06
    1cf0:	b9 01       	movw	r22, r18
    1cf2:	49 85       	ldd	r20, Y+9	; 0x09
    1cf4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1cf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1cfc:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1d00:	89 f4       	brne	.+34     	; 0x1d24 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1d02:	eb 81       	ldd	r30, Y+3	; 0x03
    1d04:	fc 81       	ldd	r31, Y+4	; 0x04
    1d06:	81 89       	ldd	r24, Z+17	; 0x11
    1d08:	88 23       	and	r24, r24
    1d0a:	99 f0       	breq	.+38     	; 0x1d32 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d10:	41 96       	adiw	r24, 0x11	; 17
    1d12:	0e 94 7e 17 	call	0x2efc	; 0x2efc <xTaskRemoveFromEventList>
    1d16:	88 23       	and	r24, r24
    1d18:	61 f0       	breq	.+24     	; 0x1d32 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    1d1a:	ef 81       	ldd	r30, Y+7	; 0x07
    1d1c:	f8 85       	ldd	r31, Y+8	; 0x08
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	80 83       	st	Z, r24
    1d22:	07 c0       	rjmp	.+14     	; 0x1d32 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1d24:	eb 81       	ldd	r30, Y+3	; 0x03
    1d26:	fc 81       	ldd	r31, Y+4	; 0x04
    1d28:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d2a:	8f 5f       	subi	r24, 0xFF	; 255
    1d2c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d30:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	8a 83       	std	Y+2, r24	; 0x02
    1d36:	01 c0       	rjmp	.+2      	; 0x1d3a <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1d38:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d3c:	29 96       	adiw	r28, 0x09	; 9
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	2e 97       	sbiw	r28, 0x0e	; 14
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	98 87       	std	Y+8, r25	; 0x08
    1d64:	8f 83       	std	Y+7, r24	; 0x07
    1d66:	7a 87       	std	Y+10, r23	; 0x0a
    1d68:	69 87       	std	Y+9, r22	; 0x09
    1d6a:	5c 87       	std	Y+12, r21	; 0x0c
    1d6c:	4b 87       	std	Y+11, r20	; 0x0b
    1d6e:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1d70:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1d78:	ef 81       	ldd	r30, Y+7	; 0x07
    1d7a:	f8 85       	ldd	r31, Y+8	; 0x08
    1d7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d7e:	88 23       	and	r24, r24
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <xQueueGenericReceive+0x36>
    1d82:	3f c0       	rjmp	.+126    	; 0x1e02 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1d84:	ef 81       	ldd	r30, Y+7	; 0x07
    1d86:	f8 85       	ldd	r31, Y+8	; 0x08
    1d88:	86 81       	ldd	r24, Z+6	; 0x06
    1d8a:	97 81       	ldd	r25, Z+7	; 0x07
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1d90:	8f 81       	ldd	r24, Y+7	; 0x07
    1d92:	98 85       	ldd	r25, Y+8	; 0x08
    1d94:	29 85       	ldd	r18, Y+9	; 0x09
    1d96:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d98:	b9 01       	movw	r22, r18
    1d9a:	0e 94 8c 10 	call	0x2118	; 0x2118 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da0:	88 23       	and	r24, r24
    1da2:	b1 f4       	brne	.+44     	; 0x1dd0 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1da4:	ef 81       	ldd	r30, Y+7	; 0x07
    1da6:	f8 85       	ldd	r31, Y+8	; 0x08
    1da8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1daa:	81 50       	subi	r24, 0x01	; 1
    1dac:	ef 81       	ldd	r30, Y+7	; 0x07
    1dae:	f8 85       	ldd	r31, Y+8	; 0x08
    1db0:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1db2:	ef 81       	ldd	r30, Y+7	; 0x07
    1db4:	f8 85       	ldd	r31, Y+8	; 0x08
    1db6:	80 85       	ldd	r24, Z+8	; 0x08
    1db8:	88 23       	and	r24, r24
    1dba:	f1 f0       	breq	.+60     	; 0x1df8 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dbe:	98 85       	ldd	r25, Y+8	; 0x08
    1dc0:	08 96       	adiw	r24, 0x08	; 8
    1dc2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <xTaskRemoveFromEventList>
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	b9 f4       	brne	.+46     	; 0x1df8 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    1dca:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
    1dce:	14 c0       	rjmp	.+40     	; 0x1df8 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    1dd0:	ef 81       	ldd	r30, Y+7	; 0x07
    1dd2:	f8 85       	ldd	r31, Y+8	; 0x08
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	97 83       	std	Z+7, r25	; 0x07
    1dda:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ddc:	ef 81       	ldd	r30, Y+7	; 0x07
    1dde:	f8 85       	ldd	r31, Y+8	; 0x08
    1de0:	81 89       	ldd	r24, Z+17	; 0x11
    1de2:	88 23       	and	r24, r24
    1de4:	49 f0       	breq	.+18     	; 0x1df8 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1de6:	8f 81       	ldd	r24, Y+7	; 0x07
    1de8:	98 85       	ldd	r25, Y+8	; 0x08
    1dea:	41 96       	adiw	r24, 0x11	; 17
    1dec:	0e 94 7e 17 	call	0x2efc	; 0x2efc <xTaskRemoveFromEventList>
    1df0:	88 23       	and	r24, r24
    1df2:	11 f0       	breq	.+4      	; 0x1df8 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1df4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    1df8:	0f 90       	pop	r0
    1dfa:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	8e 87       	std	Y+14, r24	; 0x0e
    1e00:	5c c0       	rjmp	.+184    	; 0x1eba <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1e02:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e04:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	21 f4       	brne	.+8      	; 0x1e12 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1e0e:	1e 86       	std	Y+14, r1	; 0x0e
    1e10:	54 c0       	rjmp	.+168    	; 0x1eba <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	88 23       	and	r24, r24
    1e16:	31 f4       	brne	.+12     	; 0x1e24 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1e18:	ce 01       	movw	r24, r28
    1e1a:	04 96       	adiw	r24, 0x04	; 4
    1e1c:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    1e24:	0f 90       	pop	r0
    1e26:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1e28:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	0f 92       	push	r0
    1e32:	ef 81       	ldd	r30, Y+7	; 0x07
    1e34:	f8 85       	ldd	r31, Y+8	; 0x08
    1e36:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e38:	8f 3f       	cpi	r24, 0xFF	; 255
    1e3a:	19 f4       	brne	.+6      	; 0x1e42 <xQueueGenericReceive+0xf4>
    1e3c:	ef 81       	ldd	r30, Y+7	; 0x07
    1e3e:	f8 85       	ldd	r31, Y+8	; 0x08
    1e40:	15 8e       	std	Z+29, r1	; 0x1d
    1e42:	ef 81       	ldd	r30, Y+7	; 0x07
    1e44:	f8 85       	ldd	r31, Y+8	; 0x08
    1e46:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e48:	8f 3f       	cpi	r24, 0xFF	; 255
    1e4a:	19 f4       	brne	.+6      	; 0x1e52 <xQueueGenericReceive+0x104>
    1e4c:	ef 81       	ldd	r30, Y+7	; 0x07
    1e4e:	f8 85       	ldd	r31, Y+8	; 0x08
    1e50:	16 8e       	std	Z+30, r1	; 0x1e
    1e52:	0f 90       	pop	r0
    1e54:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1e56:	ce 01       	movw	r24, r28
    1e58:	04 96       	adiw	r24, 0x04	; 4
    1e5a:	9e 01       	movw	r18, r28
    1e5c:	25 5f       	subi	r18, 0xF5	; 245
    1e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e60:	b9 01       	movw	r22, r18
    1e62:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <xTaskCheckForTimeOut>
    1e66:	88 23       	and	r24, r24
    1e68:	09 f5       	brne	.+66     	; 0x1eac <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1e6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e6c:	98 85       	ldd	r25, Y+8	; 0x08
    1e6e:	0e 94 28 11 	call	0x2250	; 0x2250 <prvIsQueueEmpty>
    1e72:	88 23       	and	r24, r24
    1e74:	a1 f0       	breq	.+40     	; 0x1e9e <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1e76:	8f 81       	ldd	r24, Y+7	; 0x07
    1e78:	98 85       	ldd	r25, Y+8	; 0x08
    1e7a:	41 96       	adiw	r24, 0x11	; 17
    1e7c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e7e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e80:	b9 01       	movw	r22, r18
    1e82:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1e86:	8f 81       	ldd	r24, Y+7	; 0x07
    1e88:	98 85       	ldd	r25, Y+8	; 0x08
    1e8a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1e8e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <xTaskResumeAll>
    1e92:	88 23       	and	r24, r24
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <xQueueGenericReceive+0x14a>
    1e96:	6d cf       	rjmp	.-294    	; 0x1d72 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    1e98:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
    1e9c:	6a cf       	rjmp	.-300    	; 0x1d72 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1e9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea0:	98 85       	ldd	r25, Y+8	; 0x08
    1ea2:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1ea6:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <xTaskResumeAll>
    1eaa:	63 cf       	rjmp	.-314    	; 0x1d72 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1eac:	8f 81       	ldd	r24, Y+7	; 0x07
    1eae:	98 85       	ldd	r25, Y+8	; 0x08
    1eb0:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1eb4:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1eb8:	1e 86       	std	Y+14, r1	; 0x0e
    1eba:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    1ebc:	2e 96       	adiw	r28, 0x0e	; 14
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	28 97       	sbiw	r28, 0x08	; 8
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	9c 83       	std	Y+4, r25	; 0x04
    1ee4:	8b 83       	std	Y+3, r24	; 0x03
    1ee6:	7e 83       	std	Y+6, r23	; 0x06
    1ee8:	6d 83       	std	Y+5, r22	; 0x05
    1eea:	58 87       	std	Y+8, r21	; 0x08
    1eec:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1eee:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1ef0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ef6:	88 23       	and	r24, r24
    1ef8:	71 f1       	breq	.+92     	; 0x1f56 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	2d 81       	ldd	r18, Y+5	; 0x05
    1f00:	3e 81       	ldd	r19, Y+6	; 0x06
    1f02:	b9 01       	movw	r22, r18
    1f04:	0e 94 8c 10 	call	0x2118	; 0x2118 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1f08:	eb 81       	ldd	r30, Y+3	; 0x03
    1f0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f0e:	81 50       	subi	r24, 0x01	; 1
    1f10:	eb 81       	ldd	r30, Y+3	; 0x03
    1f12:	fc 81       	ldd	r31, Y+4	; 0x04
    1f14:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1f16:	eb 81       	ldd	r30, Y+3	; 0x03
    1f18:	fc 81       	ldd	r31, Y+4	; 0x04
    1f1a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f1c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f1e:	89 f4       	brne	.+34     	; 0x1f42 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1f20:	eb 81       	ldd	r30, Y+3	; 0x03
    1f22:	fc 81       	ldd	r31, Y+4	; 0x04
    1f24:	80 85       	ldd	r24, Z+8	; 0x08
    1f26:	88 23       	and	r24, r24
    1f28:	99 f0       	breq	.+38     	; 0x1f50 <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2e:	08 96       	adiw	r24, 0x08	; 8
    1f30:	0e 94 7e 17 	call	0x2efc	; 0x2efc <xTaskRemoveFromEventList>
    1f34:	88 23       	and	r24, r24
    1f36:	61 f0       	breq	.+24     	; 0x1f50 <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    1f38:	ef 81       	ldd	r30, Y+7	; 0x07
    1f3a:	f8 85       	ldd	r31, Y+8	; 0x08
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	80 83       	st	Z, r24
    1f40:	07 c0       	rjmp	.+14     	; 0x1f50 <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1f42:	eb 81       	ldd	r30, Y+3	; 0x03
    1f44:	fc 81       	ldd	r31, Y+4	; 0x04
    1f46:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f48:	8f 5f       	subi	r24, 0xFF	; 255
    1f4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f4e:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	8a 83       	std	Y+2, r24	; 0x02
    1f54:	01 c0       	rjmp	.+2      	; 0x1f58 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    1f56:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f5a:	28 96       	adiw	r28, 0x08	; 8
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <uxQueueMessagesWaiting+0x6>
    1f72:	0f 92       	push	r0
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	9b 83       	std	Y+3, r25	; 0x03
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1f82:	ea 81       	ldd	r30, Y+2	; 0x02
    1f84:	fb 81       	ldd	r31, Y+3	; 0x03
    1f86:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f88:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1f8a:	0f 90       	pop	r0
    1f8c:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <uxQueueMessagesWaitingFromISR+0x6>
    1fa2:	0f 92       	push	r0
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	9b 83       	std	Y+3, r25	; 0x03
    1faa:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    1fac:	ea 81       	ldd	r30, Y+2	; 0x02
    1fae:	fb 81       	ldd	r31, Y+3	; 0x03
    1fb0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fb2:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <vQueueDelete+0x6>
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
    1fce:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    1fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd4:	80 81       	ld	r24, Z
    1fd6:	91 81       	ldd	r25, Z+1	; 0x01
    1fd8:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
	vPortFree( pxQueue );
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
}
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <prvCopyDataToQueue+0x6>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <prvCopyDataToQueue+0x8>
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	7c 83       	std	Y+4, r23	; 0x04
    2002:	6b 83       	std	Y+3, r22	; 0x03
    2004:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    2006:	e9 81       	ldd	r30, Y+1	; 0x01
    2008:	fa 81       	ldd	r31, Y+2	; 0x02
    200a:	84 8d       	ldd	r24, Z+28	; 0x1c
    200c:	88 23       	and	r24, r24
    200e:	09 f4       	brne	.+2      	; 0x2012 <prvCopyDataToQueue+0x24>
    2010:	74 c0       	rjmp	.+232    	; 0x20fa <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	88 23       	and	r24, r24
    2016:	99 f5       	brne	.+102    	; 0x207e <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2018:	e9 81       	ldd	r30, Y+1	; 0x01
    201a:	fa 81       	ldd	r31, Y+2	; 0x02
    201c:	64 81       	ldd	r22, Z+4	; 0x04
    201e:	75 81       	ldd	r23, Z+5	; 0x05
    2020:	e9 81       	ldd	r30, Y+1	; 0x01
    2022:	fa 81       	ldd	r31, Y+2	; 0x02
    2024:	84 8d       	ldd	r24, Z+28	; 0x1c
    2026:	48 2f       	mov	r20, r24
    2028:	50 e0       	ldi	r21, 0x00	; 0
    202a:	2b 81       	ldd	r18, Y+3	; 0x03
    202c:	3c 81       	ldd	r19, Y+4	; 0x04
    202e:	cb 01       	movw	r24, r22
    2030:	b9 01       	movw	r22, r18
    2032:	0e 94 c9 23 	call	0x4792	; 0x4792 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2036:	e9 81       	ldd	r30, Y+1	; 0x01
    2038:	fa 81       	ldd	r31, Y+2	; 0x02
    203a:	24 81       	ldd	r18, Z+4	; 0x04
    203c:	35 81       	ldd	r19, Z+5	; 0x05
    203e:	e9 81       	ldd	r30, Y+1	; 0x01
    2040:	fa 81       	ldd	r31, Y+2	; 0x02
    2042:	84 8d       	ldd	r24, Z+28	; 0x1c
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	82 0f       	add	r24, r18
    204a:	93 1f       	adc	r25, r19
    204c:	e9 81       	ldd	r30, Y+1	; 0x01
    204e:	fa 81       	ldd	r31, Y+2	; 0x02
    2050:	95 83       	std	Z+5, r25	; 0x05
    2052:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    2054:	e9 81       	ldd	r30, Y+1	; 0x01
    2056:	fa 81       	ldd	r31, Y+2	; 0x02
    2058:	24 81       	ldd	r18, Z+4	; 0x04
    205a:	35 81       	ldd	r19, Z+5	; 0x05
    205c:	e9 81       	ldd	r30, Y+1	; 0x01
    205e:	fa 81       	ldd	r31, Y+2	; 0x02
    2060:	82 81       	ldd	r24, Z+2	; 0x02
    2062:	93 81       	ldd	r25, Z+3	; 0x03
    2064:	28 17       	cp	r18, r24
    2066:	39 07       	cpc	r19, r25
    2068:	08 f4       	brcc	.+2      	; 0x206c <prvCopyDataToQueue+0x7e>
    206a:	47 c0       	rjmp	.+142    	; 0x20fa <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    206c:	e9 81       	ldd	r30, Y+1	; 0x01
    206e:	fa 81       	ldd	r31, Y+2	; 0x02
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	e9 81       	ldd	r30, Y+1	; 0x01
    2076:	fa 81       	ldd	r31, Y+2	; 0x02
    2078:	95 83       	std	Z+5, r25	; 0x05
    207a:	84 83       	std	Z+4, r24	; 0x04
    207c:	3e c0       	rjmp	.+124    	; 0x20fa <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    207e:	e9 81       	ldd	r30, Y+1	; 0x01
    2080:	fa 81       	ldd	r31, Y+2	; 0x02
    2082:	66 81       	ldd	r22, Z+6	; 0x06
    2084:	77 81       	ldd	r23, Z+7	; 0x07
    2086:	e9 81       	ldd	r30, Y+1	; 0x01
    2088:	fa 81       	ldd	r31, Y+2	; 0x02
    208a:	84 8d       	ldd	r24, Z+28	; 0x1c
    208c:	48 2f       	mov	r20, r24
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	2b 81       	ldd	r18, Y+3	; 0x03
    2092:	3c 81       	ldd	r19, Y+4	; 0x04
    2094:	cb 01       	movw	r24, r22
    2096:	b9 01       	movw	r22, r18
    2098:	0e 94 c9 23 	call	0x4792	; 0x4792 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    209c:	e9 81       	ldd	r30, Y+1	; 0x01
    209e:	fa 81       	ldd	r31, Y+2	; 0x02
    20a0:	26 81       	ldd	r18, Z+6	; 0x06
    20a2:	37 81       	ldd	r19, Z+7	; 0x07
    20a4:	e9 81       	ldd	r30, Y+1	; 0x01
    20a6:	fa 81       	ldd	r31, Y+2	; 0x02
    20a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	90 95       	com	r25
    20b0:	81 95       	neg	r24
    20b2:	9f 4f       	sbci	r25, 0xFF	; 255
    20b4:	82 0f       	add	r24, r18
    20b6:	93 1f       	adc	r25, r19
    20b8:	e9 81       	ldd	r30, Y+1	; 0x01
    20ba:	fa 81       	ldd	r31, Y+2	; 0x02
    20bc:	97 83       	std	Z+7, r25	; 0x07
    20be:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    20c0:	e9 81       	ldd	r30, Y+1	; 0x01
    20c2:	fa 81       	ldd	r31, Y+2	; 0x02
    20c4:	26 81       	ldd	r18, Z+6	; 0x06
    20c6:	37 81       	ldd	r19, Z+7	; 0x07
    20c8:	e9 81       	ldd	r30, Y+1	; 0x01
    20ca:	fa 81       	ldd	r31, Y+2	; 0x02
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	28 17       	cp	r18, r24
    20d2:	39 07       	cpc	r19, r25
    20d4:	90 f4       	brcc	.+36     	; 0x20fa <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    20d6:	e9 81       	ldd	r30, Y+1	; 0x01
    20d8:	fa 81       	ldd	r31, Y+2	; 0x02
    20da:	22 81       	ldd	r18, Z+2	; 0x02
    20dc:	33 81       	ldd	r19, Z+3	; 0x03
    20de:	e9 81       	ldd	r30, Y+1	; 0x01
    20e0:	fa 81       	ldd	r31, Y+2	; 0x02
    20e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    20e4:	88 2f       	mov	r24, r24
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	90 95       	com	r25
    20ea:	81 95       	neg	r24
    20ec:	9f 4f       	sbci	r25, 0xFF	; 255
    20ee:	82 0f       	add	r24, r18
    20f0:	93 1f       	adc	r25, r19
    20f2:	e9 81       	ldd	r30, Y+1	; 0x01
    20f4:	fa 81       	ldd	r31, Y+2	; 0x02
    20f6:	97 83       	std	Z+7, r25	; 0x07
    20f8:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    20fa:	e9 81       	ldd	r30, Y+1	; 0x01
    20fc:	fa 81       	ldd	r31, Y+2	; 0x02
    20fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2100:	8f 5f       	subi	r24, 0xFF	; 255
    2102:	e9 81       	ldd	r30, Y+1	; 0x01
    2104:	fa 81       	ldd	r31, Y+2	; 0x02
    2106:	82 8f       	std	Z+26, r24	; 0x1a
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	00 d0       	rcall	.+0      	; 0x211e <prvCopyDataFromQueue+0x6>
    211e:	00 d0       	rcall	.+0      	; 0x2120 <prvCopyDataFromQueue+0x8>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	7c 83       	std	Y+4, r23	; 0x04
    212a:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    212c:	e9 81       	ldd	r30, Y+1	; 0x01
    212e:	fa 81       	ldd	r31, Y+2	; 0x02
    2130:	80 81       	ld	r24, Z
    2132:	91 81       	ldd	r25, Z+1	; 0x01
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	89 f1       	breq	.+98     	; 0x219a <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    2138:	e9 81       	ldd	r30, Y+1	; 0x01
    213a:	fa 81       	ldd	r31, Y+2	; 0x02
    213c:	26 81       	ldd	r18, Z+6	; 0x06
    213e:	37 81       	ldd	r19, Z+7	; 0x07
    2140:	e9 81       	ldd	r30, Y+1	; 0x01
    2142:	fa 81       	ldd	r31, Y+2	; 0x02
    2144:	84 8d       	ldd	r24, Z+28	; 0x1c
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	82 0f       	add	r24, r18
    214c:	93 1f       	adc	r25, r19
    214e:	e9 81       	ldd	r30, Y+1	; 0x01
    2150:	fa 81       	ldd	r31, Y+2	; 0x02
    2152:	97 83       	std	Z+7, r25	; 0x07
    2154:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    2156:	e9 81       	ldd	r30, Y+1	; 0x01
    2158:	fa 81       	ldd	r31, Y+2	; 0x02
    215a:	26 81       	ldd	r18, Z+6	; 0x06
    215c:	37 81       	ldd	r19, Z+7	; 0x07
    215e:	e9 81       	ldd	r30, Y+1	; 0x01
    2160:	fa 81       	ldd	r31, Y+2	; 0x02
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	93 81       	ldd	r25, Z+3	; 0x03
    2166:	28 17       	cp	r18, r24
    2168:	39 07       	cpc	r19, r25
    216a:	40 f0       	brcs	.+16     	; 0x217c <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    216c:	e9 81       	ldd	r30, Y+1	; 0x01
    216e:	fa 81       	ldd	r31, Y+2	; 0x02
    2170:	80 81       	ld	r24, Z
    2172:	91 81       	ldd	r25, Z+1	; 0x01
    2174:	e9 81       	ldd	r30, Y+1	; 0x01
    2176:	fa 81       	ldd	r31, Y+2	; 0x02
    2178:	97 83       	std	Z+7, r25	; 0x07
    217a:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    217c:	e9 81       	ldd	r30, Y+1	; 0x01
    217e:	fa 81       	ldd	r31, Y+2	; 0x02
    2180:	46 81       	ldd	r20, Z+6	; 0x06
    2182:	57 81       	ldd	r21, Z+7	; 0x07
    2184:	e9 81       	ldd	r30, Y+1	; 0x01
    2186:	fa 81       	ldd	r31, Y+2	; 0x02
    2188:	84 8d       	ldd	r24, Z+28	; 0x1c
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	ba 01       	movw	r22, r20
    2194:	a9 01       	movw	r20, r18
    2196:	0e 94 c9 23 	call	0x4792	; 0x4792 <memcpy>
	}
}
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <prvUnlockQueue+0x6>
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	0f 92       	push	r0
    21bc:	15 c0       	rjmp	.+42     	; 0x21e8 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    21be:	e9 81       	ldd	r30, Y+1	; 0x01
    21c0:	fa 81       	ldd	r31, Y+2	; 0x02
    21c2:	81 89       	ldd	r24, Z+17	; 0x11
    21c4:	88 23       	and	r24, r24
    21c6:	a9 f0       	breq	.+42     	; 0x21f2 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	41 96       	adiw	r24, 0x11	; 17
    21ce:	0e 94 7e 17 	call	0x2efc	; 0x2efc <xTaskRemoveFromEventList>
    21d2:	88 23       	and	r24, r24
    21d4:	11 f0       	breq	.+4      	; 0x21da <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    21d6:	0e 94 66 18 	call	0x30cc	; 0x30cc <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    21da:	e9 81       	ldd	r30, Y+1	; 0x01
    21dc:	fa 81       	ldd	r31, Y+2	; 0x02
    21de:	86 8d       	ldd	r24, Z+30	; 0x1e
    21e0:	81 50       	subi	r24, 0x01	; 1
    21e2:	e9 81       	ldd	r30, Y+1	; 0x01
    21e4:	fa 81       	ldd	r31, Y+2	; 0x02
    21e6:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    21e8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ea:	fa 81       	ldd	r31, Y+2	; 0x02
    21ec:	86 8d       	ldd	r24, Z+30	; 0x1e
    21ee:	18 16       	cp	r1, r24
    21f0:	34 f3       	brlt	.-52     	; 0x21be <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    21f2:	e9 81       	ldd	r30, Y+1	; 0x01
    21f4:	fa 81       	ldd	r31, Y+2	; 0x02
    21f6:	8f ef       	ldi	r24, 0xFF	; 255
    21f8:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    21fa:	0f 90       	pop	r0
    21fc:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	0f 92       	push	r0
    2204:	15 c0       	rjmp	.+42     	; 0x2230 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2206:	e9 81       	ldd	r30, Y+1	; 0x01
    2208:	fa 81       	ldd	r31, Y+2	; 0x02
    220a:	80 85       	ldd	r24, Z+8	; 0x08
    220c:	88 23       	and	r24, r24
    220e:	a9 f0       	breq	.+42     	; 0x223a <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
    2214:	08 96       	adiw	r24, 0x08	; 8
    2216:	0e 94 7e 17 	call	0x2efc	; 0x2efc <xTaskRemoveFromEventList>
    221a:	88 23       	and	r24, r24
    221c:	11 f0       	breq	.+4      	; 0x2222 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    221e:	0e 94 66 18 	call	0x30cc	; 0x30cc <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    2222:	e9 81       	ldd	r30, Y+1	; 0x01
    2224:	fa 81       	ldd	r31, Y+2	; 0x02
    2226:	85 8d       	ldd	r24, Z+29	; 0x1d
    2228:	81 50       	subi	r24, 0x01	; 1
    222a:	e9 81       	ldd	r30, Y+1	; 0x01
    222c:	fa 81       	ldd	r31, Y+2	; 0x02
    222e:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2230:	e9 81       	ldd	r30, Y+1	; 0x01
    2232:	fa 81       	ldd	r31, Y+2	; 0x02
    2234:	85 8d       	ldd	r24, Z+29	; 0x1d
    2236:	18 16       	cp	r1, r24
    2238:	34 f3       	brlt	.-52     	; 0x2206 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    223a:	e9 81       	ldd	r30, Y+1	; 0x01
    223c:	fa 81       	ldd	r31, Y+2	; 0x02
    223e:	8f ef       	ldi	r24, 0xFF	; 255
    2240:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    2242:	0f 90       	pop	r0
    2244:	0f be       	out	0x3f, r0	; 63
}
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <prvIsQueueEmpty+0x6>
    2256:	0f 92       	push	r0
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	9b 83       	std	Y+3, r25	; 0x03
    225e:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2266:	ea 81       	ldd	r30, Y+2	; 0x02
    2268:	fb 81       	ldd	r31, Y+3	; 0x03
    226a:	82 8d       	ldd	r24, Z+26	; 0x1a
    226c:	19 82       	std	Y+1, r1	; 0x01
    226e:	88 23       	and	r24, r24
    2270:	11 f4       	brne	.+4      	; 0x2276 <prvIsQueueEmpty+0x26>
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2276:	0f 90       	pop	r0
    2278:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    227a:	89 81       	ldd	r24, Y+1	; 0x01
}
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	00 d0       	rcall	.+0      	; 0x228e <xQueueIsQueueEmptyFromISR+0x6>
    228e:	0f 92       	push	r0
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	9b 83       	std	Y+3, r25	; 0x03
    2296:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2298:	ea 81       	ldd	r30, Y+2	; 0x02
    229a:	fb 81       	ldd	r31, Y+3	; 0x03
    229c:	82 8d       	ldd	r24, Z+26	; 0x1a
    229e:	19 82       	std	Y+1, r1	; 0x01
    22a0:	88 23       	and	r24, r24
    22a2:	11 f4       	brne	.+4      	; 0x22a8 <xQueueIsQueueEmptyFromISR+0x20>
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <prvIsQueueFull+0x6>
    22bc:	0f 92       	push	r0
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	9b 83       	std	Y+3, r25	; 0x03
    22c4:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    22cc:	ea 81       	ldd	r30, Y+2	; 0x02
    22ce:	fb 81       	ldd	r31, Y+3	; 0x03
    22d0:	92 8d       	ldd	r25, Z+26	; 0x1a
    22d2:	ea 81       	ldd	r30, Y+2	; 0x02
    22d4:	fb 81       	ldd	r31, Y+3	; 0x03
    22d6:	83 8d       	ldd	r24, Z+27	; 0x1b
    22d8:	19 82       	std	Y+1, r1	; 0x01
    22da:	98 17       	cp	r25, r24
    22dc:	11 f4       	brne	.+4      	; 0x22e2 <prvIsQueueFull+0x2c>
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    22e2:	0f 90       	pop	r0
    22e4:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <xQueueIsQueueFullFromISR+0x6>
    22fa:	0f 92       	push	r0
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	9b 83       	std	Y+3, r25	; 0x03
    2302:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    2304:	ea 81       	ldd	r30, Y+2	; 0x02
    2306:	fb 81       	ldd	r31, Y+3	; 0x03
    2308:	92 8d       	ldd	r25, Z+26	; 0x1a
    230a:	ea 81       	ldd	r30, Y+2	; 0x02
    230c:	fb 81       	ldd	r31, Y+3	; 0x03
    230e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2310:	19 82       	std	Y+1, r1	; 0x01
    2312:	98 17       	cp	r25, r24
    2314:	11 f4       	brne	.+4      	; 0x231a <xQueueIsQueueFullFromISR+0x26>
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    231a:	89 81       	ldd	r24, Y+1	; 0x01
}
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    2328:	af 92       	push	r10
    232a:	bf 92       	push	r11
    232c:	cf 92       	push	r12
    232e:	df 92       	push	r13
    2330:	ef 92       	push	r14
    2332:	ff 92       	push	r15
    2334:	0f 93       	push	r16
    2336:	1f 93       	push	r17
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	64 97       	sbiw	r28, 0x14	; 20
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	9f 83       	std	Y+7, r25	; 0x07
    234e:	8e 83       	std	Y+6, r24	; 0x06
    2350:	79 87       	std	Y+9, r23	; 0x09
    2352:	68 87       	std	Y+8, r22	; 0x08
    2354:	5b 87       	std	Y+11, r21	; 0x0b
    2356:	4a 87       	std	Y+10, r20	; 0x0a
    2358:	3d 87       	std	Y+13, r19	; 0x0d
    235a:	2c 87       	std	Y+12, r18	; 0x0c
    235c:	0e 87       	std	Y+14, r16	; 0x0e
    235e:	f8 8a       	std	Y+16, r15	; 0x10
    2360:	ef 86       	std	Y+15, r14	; 0x0f
    2362:	da 8a       	std	Y+18, r13	; 0x12
    2364:	c9 8a       	std	Y+17, r12	; 0x11
    2366:	bc 8a       	std	Y+20, r11	; 0x14
    2368:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    236a:	8a 85       	ldd	r24, Y+10	; 0x0a
    236c:	9b 85       	ldd	r25, Y+11	; 0x0b
    236e:	29 89       	ldd	r18, Y+17	; 0x11
    2370:	3a 89       	ldd	r19, Y+18	; 0x12
    2372:	b9 01       	movw	r22, r18
    2374:	0e 94 99 19 	call	0x3332	; 0x3332 <prvAllocateTCBAndStack>
    2378:	9c 83       	std	Y+4, r25	; 0x04
    237a:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	9c 81       	ldd	r25, Y+4	; 0x04
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	09 f4       	brne	.+2      	; 0x2386 <xTaskGenericCreate+0x5e>
    2384:	99 c0       	rjmp	.+306    	; 0x24b8 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    2386:	eb 81       	ldd	r30, Y+3	; 0x03
    2388:	fc 81       	ldd	r31, Y+4	; 0x04
    238a:	27 89       	ldd	r18, Z+23	; 0x17
    238c:	30 8d       	ldd	r19, Z+24	; 0x18
    238e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2390:	9b 85       	ldd	r25, Y+11	; 0x0b
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	82 0f       	add	r24, r18
    2396:	93 1f       	adc	r25, r19
    2398:	9a 83       	std	Y+2, r25	; 0x02
    239a:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	28 85       	ldd	r18, Y+8	; 0x08
    23a2:	39 85       	ldd	r19, Y+9	; 0x09
    23a4:	eb 89       	ldd	r30, Y+19	; 0x13
    23a6:	fc 89       	ldd	r31, Y+20	; 0x14
    23a8:	aa 85       	ldd	r26, Y+10	; 0x0a
    23aa:	bb 85       	ldd	r27, Y+11	; 0x0b
    23ac:	b9 01       	movw	r22, r18
    23ae:	4e 85       	ldd	r20, Y+14	; 0x0e
    23b0:	9f 01       	movw	r18, r30
    23b2:	8d 01       	movw	r16, r26
    23b4:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	2e 81       	ldd	r18, Y+6	; 0x06
    23be:	3f 81       	ldd	r19, Y+7	; 0x07
    23c0:	4c 85       	ldd	r20, Y+12	; 0x0c
    23c2:	5d 85       	ldd	r21, Y+13	; 0x0d
    23c4:	b9 01       	movw	r22, r18
    23c6:	0e 94 22 0a 	call	0x1444	; 0x1444 <pxPortInitialiseStack>
    23ca:	eb 81       	ldd	r30, Y+3	; 0x03
    23cc:	fc 81       	ldd	r31, Y+4	; 0x04
    23ce:	91 83       	std	Z+1, r25	; 0x01
    23d0:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    23d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d4:	98 89       	ldd	r25, Y+16	; 0x10
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	31 f0       	breq	.+12     	; 0x23e6 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    23da:	ef 85       	ldd	r30, Y+15	; 0x0f
    23dc:	f8 89       	ldd	r31, Y+16	; 0x10
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    23ec:	80 91 a5 04 	lds	r24, 0x04A5
    23f0:	8f 5f       	subi	r24, 0xFF	; 255
    23f2:	80 93 a5 04 	sts	0x04A5, r24
			if( pxCurrentTCB == NULL )
    23f6:	80 91 a2 04 	lds	r24, 0x04A2
    23fa:	90 91 a3 04 	lds	r25, 0x04A3
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f4       	brne	.+26     	; 0x241c <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	9c 81       	ldd	r25, Y+4	; 0x04
    2406:	90 93 a3 04 	sts	0x04A3, r25
    240a:	80 93 a2 04 	sts	0x04A2, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    240e:	80 91 a5 04 	lds	r24, 0x04A5
    2412:	81 30       	cpi	r24, 0x01	; 1
    2414:	a9 f4       	brne	.+42     	; 0x2440 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2416:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <prvInitialiseTaskLists>
    241a:	12 c0       	rjmp	.+36     	; 0x2440 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    241c:	80 91 aa 04 	lds	r24, 0x04AA
    2420:	88 23       	and	r24, r24
    2422:	71 f4       	brne	.+28     	; 0x2440 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2424:	e0 91 a2 04 	lds	r30, 0x04A2
    2428:	f0 91 a3 04 	lds	r31, 0x04A3
    242c:	96 89       	ldd	r25, Z+22	; 0x16
    242e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2430:	89 17       	cp	r24, r25
    2432:	30 f0       	brcs	.+12     	; 0x2440 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	90 93 a3 04 	sts	0x04A3, r25
    243c:	80 93 a2 04 	sts	0x04A2, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    2440:	eb 81       	ldd	r30, Y+3	; 0x03
    2442:	fc 81       	ldd	r31, Y+4	; 0x04
    2444:	96 89       	ldd	r25, Z+22	; 0x16
    2446:	80 91 a8 04 	lds	r24, 0x04A8
    244a:	89 17       	cp	r24, r25
    244c:	28 f4       	brcc	.+10     	; 0x2458 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    244e:	eb 81       	ldd	r30, Y+3	; 0x03
    2450:	fc 81       	ldd	r31, Y+4	; 0x04
    2452:	86 89       	ldd	r24, Z+22	; 0x16
    2454:	80 93 a8 04 	sts	0x04A8, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    2458:	80 91 af 04 	lds	r24, 0x04AF
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	80 93 af 04 	sts	0x04AF, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    2462:	eb 81       	ldd	r30, Y+3	; 0x03
    2464:	fc 81       	ldd	r31, Y+4	; 0x04
    2466:	96 89       	ldd	r25, Z+22	; 0x16
    2468:	80 91 a9 04 	lds	r24, 0x04A9
    246c:	89 17       	cp	r24, r25
    246e:	28 f4       	brcc	.+10     	; 0x247a <xTaskGenericCreate+0x152>
    2470:	eb 81       	ldd	r30, Y+3	; 0x03
    2472:	fc 81       	ldd	r31, Y+4	; 0x04
    2474:	86 89       	ldd	r24, Z+22	; 0x16
    2476:	80 93 a9 04 	sts	0x04A9, r24
    247a:	eb 81       	ldd	r30, Y+3	; 0x03
    247c:	fc 81       	ldd	r31, Y+4	; 0x04
    247e:	86 89       	ldd	r24, Z+22	; 0x16
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	c9 01       	movw	r24, r18
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	82 0f       	add	r24, r18
    2494:	93 1f       	adc	r25, r19
    2496:	ac 01       	movw	r20, r24
    2498:	40 55       	subi	r20, 0x50	; 80
    249a:	5b 4f       	sbci	r21, 0xFB	; 251
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	9c 01       	movw	r18, r24
    24a2:	2e 5f       	subi	r18, 0xFE	; 254
    24a4:	3f 4f       	sbci	r19, 0xFF	; 255
    24a6:	ca 01       	movw	r24, r20
    24a8:	b9 01       	movw	r22, r18
    24aa:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

			xReturn = pdPASS;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	8f ef       	ldi	r24, 0xFF	; 255
    24ba:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	71 f4       	brne	.+28     	; 0x24de <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    24c2:	80 91 aa 04 	lds	r24, 0x04AA
    24c6:	88 23       	and	r24, r24
    24c8:	51 f0       	breq	.+20     	; 0x24de <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    24ca:	e0 91 a2 04 	lds	r30, 0x04A2
    24ce:	f0 91 a3 04 	lds	r31, 0x04A3
    24d2:	96 89       	ldd	r25, Z+22	; 0x16
    24d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    24d6:	98 17       	cp	r25, r24
    24d8:	10 f4       	brcc	.+4      	; 0x24de <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    24da:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
			}
		}
	}

	return xReturn;
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
}
    24e0:	64 96       	adiw	r28, 0x14	; 20
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	1f 91       	pop	r17
    24f2:	0f 91       	pop	r16
    24f4:	ff 90       	pop	r15
    24f6:	ef 90       	pop	r14
    24f8:	df 90       	pop	r13
    24fa:	cf 90       	pop	r12
    24fc:	bf 90       	pop	r11
    24fe:	af 90       	pop	r10
    2500:	08 95       	ret

00002502 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	00 d0       	rcall	.+0      	; 0x2508 <vTaskDelete+0x6>
    2508:	00 d0       	rcall	.+0      	; 0x250a <vTaskDelete+0x8>
    250a:	00 d0       	rcall	.+0      	; 0x250c <vTaskDelete+0xa>
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	9c 83       	std	Y+4, r25	; 0x04
    2512:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    251a:	20 91 a2 04 	lds	r18, 0x04A2
    251e:	30 91 a3 04 	lds	r19, 0x04A3
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	9c 81       	ldd	r25, Y+4	; 0x04
    2526:	82 17       	cp	r24, r18
    2528:	93 07       	cpc	r25, r19
    252a:	11 f4       	brne	.+4      	; 0x2530 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    252c:	1c 82       	std	Y+4, r1	; 0x04
    252e:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	9c 81       	ldd	r25, Y+4	; 0x04
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	39 f4       	brne	.+14     	; 0x2546 <vTaskDelete+0x44>
    2538:	80 91 a2 04 	lds	r24, 0x04A2
    253c:	90 91 a3 04 	lds	r25, 0x04A3
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	04 c0       	rjmp	.+8      	; 0x254e <vTaskDelete+0x4c>
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	02 96       	adiw	r24, 0x02	; 2
    255c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    2560:	e9 81       	ldd	r30, Y+1	; 0x01
    2562:	fa 81       	ldd	r31, Y+2	; 0x02
    2564:	84 89       	ldd	r24, Z+20	; 0x14
    2566:	95 89       	ldd	r25, Z+21	; 0x15
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	29 f0       	breq	.+10     	; 0x2576 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	9a 81       	ldd	r25, Y+2	; 0x02
    2570:	0c 96       	adiw	r24, 0x0c	; 12
    2572:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	9c 01       	movw	r18, r24
    257c:	2e 5f       	subi	r18, 0xFE	; 254
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	85 e0       	ldi	r24, 0x05	; 5
    2582:	95 e0       	ldi	r25, 0x05	; 5
    2584:	b9 01       	movw	r22, r18
    2586:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    258a:	80 91 a4 04 	lds	r24, 0x04A4
    258e:	8f 5f       	subi	r24, 0xFF	; 255
    2590:	80 93 a4 04 	sts	0x04A4, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2594:	80 91 af 04 	lds	r24, 0x04AF
    2598:	8f 5f       	subi	r24, 0xFF	; 255
    259a:	80 93 af 04 	sts	0x04AF, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    259e:	0f 90       	pop	r0
    25a0:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    25a2:	80 91 aa 04 	lds	r24, 0x04AA
    25a6:	88 23       	and	r24, r24
    25a8:	31 f0       	breq	.+12     	; 0x25b6 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	9c 81       	ldd	r25, Y+4	; 0x04
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	11 f4       	brne	.+4      	; 0x25b6 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    25b2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
			}
		}
	}
    25b6:	26 96       	adiw	r28, 0x06	; 6
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	28 97       	sbiw	r28, 0x08	; 8
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
    25e0:	78 87       	std	Y+8, r23	; 0x08
    25e2:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    25e4:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    25e6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    25ea:	ed 81       	ldd	r30, Y+5	; 0x05
    25ec:	fe 81       	ldd	r31, Y+6	; 0x06
    25ee:	20 81       	ld	r18, Z
    25f0:	31 81       	ldd	r19, Z+1	; 0x01
    25f2:	8f 81       	ldd	r24, Y+7	; 0x07
    25f4:	98 85       	ldd	r25, Y+8	; 0x08
    25f6:	82 0f       	add	r24, r18
    25f8:	93 1f       	adc	r25, r19
    25fa:	9c 83       	std	Y+4, r25	; 0x04
    25fc:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    25fe:	ed 81       	ldd	r30, Y+5	; 0x05
    2600:	fe 81       	ldd	r31, Y+6	; 0x06
    2602:	20 81       	ld	r18, Z
    2604:	31 81       	ldd	r19, Z+1	; 0x01
    2606:	80 91 a6 04 	lds	r24, 0x04A6
    260a:	90 91 a7 04 	lds	r25, 0x04A7
    260e:	82 17       	cp	r24, r18
    2610:	93 07       	cpc	r25, r19
    2612:	a8 f4       	brcc	.+42     	; 0x263e <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    2614:	ed 81       	ldd	r30, Y+5	; 0x05
    2616:	fe 81       	ldd	r31, Y+6	; 0x06
    2618:	20 81       	ld	r18, Z
    261a:	31 81       	ldd	r19, Z+1	; 0x01
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	82 17       	cp	r24, r18
    2622:	93 07       	cpc	r25, r19
    2624:	00 f5       	brcc	.+64     	; 0x2666 <vTaskDelayUntil+0x9e>
    2626:	20 91 a6 04 	lds	r18, 0x04A6
    262a:	30 91 a7 04 	lds	r19, 0x04A7
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	28 17       	cp	r18, r24
    2634:	39 07       	cpc	r19, r25
    2636:	b8 f4       	brcc	.+46     	; 0x2666 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	14 c0       	rjmp	.+40     	; 0x2666 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    263e:	ed 81       	ldd	r30, Y+5	; 0x05
    2640:	fe 81       	ldd	r31, Y+6	; 0x06
    2642:	20 81       	ld	r18, Z
    2644:	31 81       	ldd	r19, Z+1	; 0x01
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	82 17       	cp	r24, r18
    264c:	93 07       	cpc	r25, r19
    264e:	48 f0       	brcs	.+18     	; 0x2662 <vTaskDelayUntil+0x9a>
    2650:	20 91 a6 04 	lds	r18, 0x04A6
    2654:	30 91 a7 04 	lds	r19, 0x04A7
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	9c 81       	ldd	r25, Y+4	; 0x04
    265c:	28 17       	cp	r18, r24
    265e:	39 07       	cpc	r19, r25
    2660:	10 f4       	brcc	.+4      	; 0x2666 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2666:	ed 81       	ldd	r30, Y+5	; 0x05
    2668:	fe 81       	ldd	r31, Y+6	; 0x06
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	9c 81       	ldd	r25, Y+4	; 0x04
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	88 23       	and	r24, r24
    2676:	59 f0       	breq	.+22     	; 0x268e <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2678:	80 91 a2 04 	lds	r24, 0x04A2
    267c:	90 91 a3 04 	lds	r25, 0x04A3
    2680:	02 96       	adiw	r24, 0x02	; 2
    2682:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	9c 81       	ldd	r25, Y+4	; 0x04
    268a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    268e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <xTaskResumeAll>
    2692:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2694:	8a 81       	ldd	r24, Y+2	; 0x02
    2696:	88 23       	and	r24, r24
    2698:	11 f4       	brne	.+4      	; 0x269e <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    269a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
		}
	}
    269e:	28 96       	adiw	r28, 0x08	; 8
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <vTaskDelay+0x6>
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <vTaskDelay+0x8>
    26b8:	0f 92       	push	r0
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	9d 83       	std	Y+5, r25	; 0x05
    26c0:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    26c2:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    26c4:	8c 81       	ldd	r24, Y+4	; 0x04
    26c6:	9d 81       	ldd	r25, Y+5	; 0x05
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	d1 f0       	breq	.+52     	; 0x2700 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    26cc:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    26d0:	20 91 a6 04 	lds	r18, 0x04A6
    26d4:	30 91 a7 04 	lds	r19, 0x04A7
    26d8:	8c 81       	ldd	r24, Y+4	; 0x04
    26da:	9d 81       	ldd	r25, Y+5	; 0x05
    26dc:	82 0f       	add	r24, r18
    26de:	93 1f       	adc	r25, r19
    26e0:	9b 83       	std	Y+3, r25	; 0x03
    26e2:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    26e4:	80 91 a2 04 	lds	r24, 0x04A2
    26e8:	90 91 a3 04 	lds	r25, 0x04A3
    26ec:	02 96       	adiw	r24, 0x02	; 2
    26ee:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    26f2:	8a 81       	ldd	r24, Y+2	; 0x02
    26f4:	9b 81       	ldd	r25, Y+3	; 0x03
    26f6:	0e 94 50 19 	call	0x32a0	; 0x32a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    26fa:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <xTaskResumeAll>
    26fe:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	88 23       	and	r24, r24
    2704:	11 f4       	brne	.+4      	; 0x270a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    2706:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
		}
	}
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	00 d0       	rcall	.+0      	; 0x2720 <vTaskSuspend+0x6>
    2720:	00 d0       	rcall	.+0      	; 0x2722 <vTaskSuspend+0x8>
    2722:	00 d0       	rcall	.+0      	; 0x2724 <vTaskSuspend+0xa>
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	9c 83       	std	Y+4, r25	; 0x04
    272a:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    2732:	20 91 a2 04 	lds	r18, 0x04A2
    2736:	30 91 a3 04 	lds	r19, 0x04A3
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	9c 81       	ldd	r25, Y+4	; 0x04
    273e:	82 17       	cp	r24, r18
    2740:	93 07       	cpc	r25, r19
    2742:	11 f4       	brne	.+4      	; 0x2748 <vTaskSuspend+0x2e>
			{
				pxTaskToSuspend = NULL;
    2744:	1c 82       	std	Y+4, r1	; 0x04
    2746:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	9c 81       	ldd	r25, Y+4	; 0x04
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	39 f4       	brne	.+14     	; 0x275e <vTaskSuspend+0x44>
    2750:	80 91 a2 04 	lds	r24, 0x04A2
    2754:	90 91 a3 04 	lds	r25, 0x04A3
    2758:	9e 83       	std	Y+6, r25	; 0x06
    275a:	8d 83       	std	Y+5, r24	; 0x05
    275c:	04 c0       	rjmp	.+8      	; 0x2766 <vTaskSuspend+0x4c>
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	8d 81       	ldd	r24, Y+5	; 0x05
    2768:	9e 81       	ldd	r25, Y+6	; 0x06
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	02 96       	adiw	r24, 0x02	; 2
    2774:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    2778:	e9 81       	ldd	r30, Y+1	; 0x01
    277a:	fa 81       	ldd	r31, Y+2	; 0x02
    277c:	84 89       	ldd	r24, Z+20	; 0x14
    277e:	95 89       	ldd	r25, Z+21	; 0x15
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	29 f0       	breq	.+10     	; 0x278e <vTaskSuspend+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	0c 96       	adiw	r24, 0x0c	; 12
    278a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	9c 01       	movw	r18, r24
    2794:	2e 5f       	subi	r18, 0xFE	; 254
    2796:	3f 4f       	sbci	r19, 0xFF	; 255
    2798:	8e e0       	ldi	r24, 0x0E	; 14
    279a:	95 e0       	ldi	r25, 0x05	; 5
    279c:	b9 01       	movw	r22, r18
    279e:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    27a2:	0f 90       	pop	r0
    27a4:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	a1 f4       	brne	.+40     	; 0x27d6 <vTaskSuspend+0xbc>
		{
			if( xSchedulerRunning != pdFALSE )
    27ae:	80 91 aa 04 	lds	r24, 0x04AA
    27b2:	88 23       	and	r24, r24
    27b4:	19 f0       	breq	.+6      	; 0x27bc <vTaskSuspend+0xa2>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    27b6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
    27ba:	0d c0       	rjmp	.+26     	; 0x27d6 <vTaskSuspend+0xbc>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    27bc:	90 91 0e 05 	lds	r25, 0x050E
    27c0:	80 91 a5 04 	lds	r24, 0x04A5
    27c4:	98 17       	cp	r25, r24
    27c6:	29 f4       	brne	.+10     	; 0x27d2 <vTaskSuspend+0xb8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    27c8:	10 92 a3 04 	sts	0x04A3, r1
    27cc:	10 92 a2 04 	sts	0x04A2, r1
    27d0:	02 c0       	rjmp	.+4      	; 0x27d6 <vTaskSuspend+0xbc>
				}
				else
				{
					vTaskSwitchContext();
    27d2:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <vTaskSwitchContext>
				}
			}
		}
	}
    27d6:	26 96       	adiw	r28, 0x06	; 6
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <xTaskIsTaskSuspended+0x6>
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <xTaskIsTaskSuspended+0x8>
    27f0:	0f 92       	push	r0
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	9d 83       	std	Y+5, r25	; 0x05
    27f8:	8c 83       	std	Y+4, r24	; 0x04
	portBASE_TYPE xReturn = pdFALSE;
    27fa:	1b 82       	std	Y+3, r1	; 0x03
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    27fc:	8c 81       	ldd	r24, Y+4	; 0x04
    27fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2800:	9a 83       	std	Y+2, r25	; 0x02
    2802:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    2804:	e9 81       	ldd	r30, Y+1	; 0x01
    2806:	fa 81       	ldd	r31, Y+2	; 0x02
    2808:	82 85       	ldd	r24, Z+10	; 0x0a
    280a:	93 85       	ldd	r25, Z+11	; 0x0b
    280c:	25 e0       	ldi	r18, 0x05	; 5
    280e:	8e 30       	cpi	r24, 0x0E	; 14
    2810:	92 07       	cpc	r25, r18
    2812:	81 f4       	brne	.+32     	; 0x2834 <xTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    2814:	e9 81       	ldd	r30, Y+1	; 0x01
    2816:	fa 81       	ldd	r31, Y+2	; 0x02
    2818:	84 89       	ldd	r24, Z+20	; 0x14
    281a:	95 89       	ldd	r25, Z+21	; 0x15
    281c:	24 e0       	ldi	r18, 0x04	; 4
    281e:	8c 3f       	cpi	r24, 0xFC	; 252
    2820:	92 07       	cpc	r25, r18
    2822:	41 f0       	breq	.+16     	; 0x2834 <xTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    2824:	e9 81       	ldd	r30, Y+1	; 0x01
    2826:	fa 81       	ldd	r31, Y+2	; 0x02
    2828:	84 89       	ldd	r24, Z+20	; 0x14
    282a:	95 89       	ldd	r25, Z+21	; 0x15
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	11 f4       	brne	.+4      	; 0x2834 <xTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}

		return xReturn;
    2834:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	00 d0       	rcall	.+0      	; 0x284c <vTaskResume+0x6>
    284c:	00 d0       	rcall	.+0      	; 0x284e <vTaskResume+0x8>
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	9c 83       	std	Y+4, r25	; 0x04
    2854:	8b 83       	std	Y+3, r24	; 0x03
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	9c 81       	ldd	r25, Y+4	; 0x04
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	89 83       	std	Y+1, r24	; 0x01

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	9a 81       	ldd	r25, Y+2	; 0x02
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	09 f4       	brne	.+2      	; 0x2868 <vTaskResume+0x22>
    2866:	4c c0       	rjmp	.+152    	; 0x2900 <vTaskResume+0xba>
    2868:	20 91 a2 04 	lds	r18, 0x04A2
    286c:	30 91 a3 04 	lds	r19, 0x04A3
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	9a 81       	ldd	r25, Y+2	; 0x02
    2874:	82 17       	cp	r24, r18
    2876:	93 07       	cpc	r25, r19
    2878:	09 f4       	brne	.+2      	; 0x287c <vTaskResume+0x36>
    287a:	42 c0       	rjmp	.+132    	; 0x2900 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	0f 92       	push	r0
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	9a 81       	ldd	r25, Y+2	; 0x02
    2886:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <xTaskIsTaskSuspended>
    288a:	81 30       	cpi	r24, 0x01	; 1
    288c:	b9 f5       	brne	.+110    	; 0x28fc <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	9a 81       	ldd	r25, Y+2	; 0x02
    2892:	02 96       	adiw	r24, 0x02	; 2
    2894:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2898:	e9 81       	ldd	r30, Y+1	; 0x01
    289a:	fa 81       	ldd	r31, Y+2	; 0x02
    289c:	96 89       	ldd	r25, Z+22	; 0x16
    289e:	80 91 a9 04 	lds	r24, 0x04A9
    28a2:	89 17       	cp	r24, r25
    28a4:	28 f4       	brcc	.+10     	; 0x28b0 <vTaskResume+0x6a>
    28a6:	e9 81       	ldd	r30, Y+1	; 0x01
    28a8:	fa 81       	ldd	r31, Y+2	; 0x02
    28aa:	86 89       	ldd	r24, Z+22	; 0x16
    28ac:	80 93 a9 04 	sts	0x04A9, r24
    28b0:	e9 81       	ldd	r30, Y+1	; 0x01
    28b2:	fa 81       	ldd	r31, Y+2	; 0x02
    28b4:	86 89       	ldd	r24, Z+22	; 0x16
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	c9 01       	movw	r24, r18
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	82 0f       	add	r24, r18
    28ca:	93 1f       	adc	r25, r19
    28cc:	ac 01       	movw	r20, r24
    28ce:	40 55       	subi	r20, 0x50	; 80
    28d0:	5b 4f       	sbci	r21, 0xFB	; 251
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	9a 81       	ldd	r25, Y+2	; 0x02
    28d6:	9c 01       	movw	r18, r24
    28d8:	2e 5f       	subi	r18, 0xFE	; 254
    28da:	3f 4f       	sbci	r19, 0xFF	; 255
    28dc:	ca 01       	movw	r24, r20
    28de:	b9 01       	movw	r22, r18
    28e0:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    28e4:	e9 81       	ldd	r30, Y+1	; 0x01
    28e6:	fa 81       	ldd	r31, Y+2	; 0x02
    28e8:	96 89       	ldd	r25, Z+22	; 0x16
    28ea:	e0 91 a2 04 	lds	r30, 0x04A2
    28ee:	f0 91 a3 04 	lds	r31, 0x04A3
    28f2:	86 89       	ldd	r24, Z+22	; 0x16
    28f4:	98 17       	cp	r25, r24
    28f6:	10 f0       	brcs	.+4      	; 0x28fc <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    28f8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
    28fc:	0f 90       	pop	r0
    28fe:	0f be       	out	0x3f, r0	; 63
		}
	}
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	00 d0       	rcall	.+0      	; 0x2914 <xTaskResumeFromISR+0x6>
    2914:	00 d0       	rcall	.+0      	; 0x2916 <xTaskResumeFromISR+0x8>
    2916:	0f 92       	push	r0
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	9d 83       	std	Y+5, r25	; 0x05
    291e:	8c 83       	std	Y+4, r24	; 0x04
	portBASE_TYPE xYieldRequired = pdFALSE;
    2920:	1b 82       	std	Y+3, r1	; 0x03
	tskTCB *pxTCB;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    2922:	8c 81       	ldd	r24, Y+4	; 0x04
    2924:	9d 81       	ldd	r25, Y+5	; 0x05
    2926:	9a 83       	std	Y+2, r25	; 0x02
    2928:	89 83       	std	Y+1, r24	; 0x01

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	9a 81       	ldd	r25, Y+2	; 0x02
    292e:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <xTaskIsTaskSuspended>
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	09 f0       	breq	.+2      	; 0x2938 <xTaskResumeFromISR+0x2a>
    2936:	47 c0       	rjmp	.+142    	; 0x29c6 <xTaskResumeFromISR+0xb8>
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2938:	80 91 ab 04 	lds	r24, 0x04AB
    293c:	88 23       	and	r24, r24
    293e:	c9 f5       	brne	.+114    	; 0x29b2 <xTaskResumeFromISR+0xa4>
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    2940:	e9 81       	ldd	r30, Y+1	; 0x01
    2942:	fa 81       	ldd	r31, Y+2	; 0x02
    2944:	96 89       	ldd	r25, Z+22	; 0x16
    2946:	e0 91 a2 04 	lds	r30, 0x04A2
    294a:	f0 91 a3 04 	lds	r31, 0x04A3
    294e:	86 89       	ldd	r24, Z+22	; 0x16
    2950:	1b 82       	std	Y+3, r1	; 0x03
    2952:	98 17       	cp	r25, r24
    2954:	10 f0       	brcs	.+4      	; 0x295a <xTaskResumeFromISR+0x4c>
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	8b 83       	std	Y+3, r24	; 0x03
				vListRemove(  &( pxTCB->xGenericListItem ) );
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	9a 81       	ldd	r25, Y+2	; 0x02
    295e:	02 96       	adiw	r24, 0x02	; 2
    2960:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
    2964:	e9 81       	ldd	r30, Y+1	; 0x01
    2966:	fa 81       	ldd	r31, Y+2	; 0x02
    2968:	96 89       	ldd	r25, Z+22	; 0x16
    296a:	80 91 a9 04 	lds	r24, 0x04A9
    296e:	89 17       	cp	r24, r25
    2970:	28 f4       	brcc	.+10     	; 0x297c <xTaskResumeFromISR+0x6e>
    2972:	e9 81       	ldd	r30, Y+1	; 0x01
    2974:	fa 81       	ldd	r31, Y+2	; 0x02
    2976:	86 89       	ldd	r24, Z+22	; 0x16
    2978:	80 93 a9 04 	sts	0x04A9, r24
    297c:	e9 81       	ldd	r30, Y+1	; 0x01
    297e:	fa 81       	ldd	r31, Y+2	; 0x02
    2980:	86 89       	ldd	r24, Z+22	; 0x16
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	c9 01       	movw	r24, r18
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	88 0f       	add	r24, r24
    298e:	99 1f       	adc	r25, r25
    2990:	88 0f       	add	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	82 0f       	add	r24, r18
    2996:	93 1f       	adc	r25, r19
    2998:	ac 01       	movw	r20, r24
    299a:	40 55       	subi	r20, 0x50	; 80
    299c:	5b 4f       	sbci	r21, 0xFB	; 251
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	9a 81       	ldd	r25, Y+2	; 0x02
    29a2:	9c 01       	movw	r18, r24
    29a4:	2e 5f       	subi	r18, 0xFE	; 254
    29a6:	3f 4f       	sbci	r19, 0xFF	; 255
    29a8:	ca 01       	movw	r24, r20
    29aa:	b9 01       	movw	r22, r18
    29ac:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
    29b0:	0a c0       	rjmp	.+20     	; 0x29c6 <xTaskResumeFromISR+0xb8>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	9a 81       	ldd	r25, Y+2	; 0x02
    29b6:	9c 01       	movw	r18, r24
    29b8:	24 5f       	subi	r18, 0xF4	; 244
    29ba:	3f 4f       	sbci	r19, 0xFF	; 255
    29bc:	8c ef       	ldi	r24, 0xFC	; 252
    29be:	94 e0       	ldi	r25, 0x04	; 4
    29c0:	b9 01       	movw	r22, r18
    29c2:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
			}
		}

		return xYieldRequired;
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    29d8:	af 92       	push	r10
    29da:	bf 92       	push	r11
    29dc:	cf 92       	push	r12
    29de:	df 92       	push	r13
    29e0:	ef 92       	push	r14
    29e2:	ff 92       	push	r15
    29e4:	0f 93       	push	r16
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	0f 92       	push	r0
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    29f0:	20 e6       	ldi	r18, 0x60	; 96
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	80 e7       	ldi	r24, 0x70	; 112
    29f6:	98 e1       	ldi	r25, 0x18	; 24
    29f8:	b9 01       	movw	r22, r18
    29fa:	4a ef       	ldi	r20, 0xFA	; 250
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	00 e0       	ldi	r16, 0x00	; 0
    2a04:	ee 24       	eor	r14, r14
    2a06:	ff 24       	eor	r15, r15
    2a08:	cc 24       	eor	r12, r12
    2a0a:	dd 24       	eor	r13, r13
    2a0c:	aa 24       	eor	r10, r10
    2a0e:	bb 24       	eor	r11, r11
    2a10:	0e 94 94 11 	call	0x2328	; 0x2328 <xTaskGenericCreate>
    2a14:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	81 30       	cpi	r24, 0x01	; 1
    2a1a:	51 f4       	brne	.+20     	; 0x2a30 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    2a1c:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	80 93 aa 04 	sts	0x04AA, r24
		xTickCount = ( portTickType ) 0U;
    2a24:	10 92 a7 04 	sts	0x04A7, r1
    2a28:	10 92 a6 04 	sts	0x04A6, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2a2c:	0e 94 a5 0b 	call	0x174a	; 0x174a <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    2a30:	0f 90       	pop	r0
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	0f 91       	pop	r16
    2a38:	ff 90       	pop	r15
    2a3a:	ef 90       	pop	r14
    2a3c:	df 90       	pop	r13
    2a3e:	cf 90       	pop	r12
    2a40:	bf 90       	pop	r11
    2a42:	af 90       	pop	r10
    2a44:	08 95       	ret

00002a46 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    2a4e:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    2a50:	10 92 aa 04 	sts	0x04AA, r1
	vPortEndScheduler();
    2a54:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <vPortEndScheduler>
}
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2a66:	80 91 ab 04 	lds	r24, 0x04AB
    2a6a:	8f 5f       	subi	r24, 0xFF	; 255
    2a6c:	80 93 ab 04 	sts	0x04AB, r24
}
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <xTaskResumeAll+0x6>
    2a7c:	00 d0       	rcall	.+0      	; 0x2a7e <xTaskResumeAll+0x8>
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    2a82:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    2a8a:	80 91 ab 04 	lds	r24, 0x04AB
    2a8e:	81 50       	subi	r24, 0x01	; 1
    2a90:	80 93 ab 04 	sts	0x04AB, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2a94:	80 91 ab 04 	lds	r24, 0x04AB
    2a98:	88 23       	and	r24, r24
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <xTaskResumeAll+0x28>
    2a9c:	6c c0       	rjmp	.+216    	; 0x2b76 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    2a9e:	80 91 a5 04 	lds	r24, 0x04A5
    2aa2:	88 23       	and	r24, r24
    2aa4:	09 f4       	brne	.+2      	; 0x2aa8 <xTaskResumeAll+0x32>
    2aa6:	67 c0       	rjmp	.+206    	; 0x2b76 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    2aa8:	19 82       	std	Y+1, r1	; 0x01
    2aaa:	41 c0       	rjmp	.+130    	; 0x2b2e <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    2aac:	e0 91 01 05 	lds	r30, 0x0501
    2ab0:	f0 91 02 05 	lds	r31, 0x0502
    2ab4:	86 81       	ldd	r24, Z+6	; 0x06
    2ab6:	97 81       	ldd	r25, Z+7	; 0x07
    2ab8:	9c 83       	std	Y+4, r25	; 0x04
    2aba:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac0:	0c 96       	adiw	r24, 0x0c	; 12
    2ac2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aca:	02 96       	adiw	r24, 0x02	; 2
    2acc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2ad0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ad2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ad4:	96 89       	ldd	r25, Z+22	; 0x16
    2ad6:	80 91 a9 04 	lds	r24, 0x04A9
    2ada:	89 17       	cp	r24, r25
    2adc:	28 f4       	brcc	.+10     	; 0x2ae8 <xTaskResumeAll+0x72>
    2ade:	eb 81       	ldd	r30, Y+3	; 0x03
    2ae0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae2:	86 89       	ldd	r24, Z+22	; 0x16
    2ae4:	80 93 a9 04 	sts	0x04A9, r24
    2ae8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aea:	fc 81       	ldd	r31, Y+4	; 0x04
    2aec:	86 89       	ldd	r24, Z+22	; 0x16
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	c9 01       	movw	r24, r18
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	82 0f       	add	r24, r18
    2b02:	93 1f       	adc	r25, r19
    2b04:	80 55       	subi	r24, 0x50	; 80
    2b06:	9b 4f       	sbci	r25, 0xFB	; 251
    2b08:	2b 81       	ldd	r18, Y+3	; 0x03
    2b0a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b0c:	2e 5f       	subi	r18, 0xFE	; 254
    2b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b10:	b9 01       	movw	r22, r18
    2b12:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2b16:	eb 81       	ldd	r30, Y+3	; 0x03
    2b18:	fc 81       	ldd	r31, Y+4	; 0x04
    2b1a:	96 89       	ldd	r25, Z+22	; 0x16
    2b1c:	e0 91 a2 04 	lds	r30, 0x04A2
    2b20:	f0 91 a3 04 	lds	r31, 0x04A3
    2b24:	86 89       	ldd	r24, Z+22	; 0x16
    2b26:	98 17       	cp	r25, r24
    2b28:	10 f0       	brcs	.+4      	; 0x2b2e <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    2b2e:	80 91 fc 04 	lds	r24, 0x04FC
    2b32:	88 23       	and	r24, r24
    2b34:	09 f0       	breq	.+2      	; 0x2b38 <xTaskResumeAll+0xc2>
    2b36:	ba cf       	rjmp	.-140    	; 0x2aac <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2b38:	80 91 ac 04 	lds	r24, 0x04AC
    2b3c:	88 23       	and	r24, r24
    2b3e:	71 f0       	breq	.+28     	; 0x2b5c <xTaskResumeAll+0xe6>
    2b40:	07 c0       	rjmp	.+14     	; 0x2b50 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    2b42:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <vTaskIncrementTick>
						--uxMissedTicks;
    2b46:	80 91 ac 04 	lds	r24, 0x04AC
    2b4a:	81 50       	subi	r24, 0x01	; 1
    2b4c:	80 93 ac 04 	sts	0x04AC, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2b50:	80 91 ac 04 	lds	r24, 0x04AC
    2b54:	88 23       	and	r24, r24
    2b56:	a9 f7       	brne	.-22     	; 0x2b42 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	81 30       	cpi	r24, 0x01	; 1
    2b60:	21 f0       	breq	.+8      	; 0x2b6a <xTaskResumeAll+0xf4>
    2b62:	80 91 ad 04 	lds	r24, 0x04AD
    2b66:	81 30       	cpi	r24, 0x01	; 1
    2b68:	31 f4       	brne	.+12     	; 0x2b76 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    2b6e:	10 92 ad 04 	sts	0x04AD, r1
					portYIELD_WITHIN_API();
    2b72:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    2b76:	0f 90       	pop	r0
    2b78:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	00 d0       	rcall	.+0      	; 0x2b90 <xTaskGetTickCount+0x6>
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    2b9a:	80 91 a6 04 	lds	r24, 0x04A6
    2b9e:	90 91 a7 04 	lds	r25, 0x04A7
    2ba2:	9a 83       	std	Y+2, r25	; 0x02
    2ba4:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    2ba6:	0f 90       	pop	r0
    2ba8:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	cf 91       	pop	r28
    2bb4:	df 91       	pop	r29
    2bb6:	08 95       	ret

00002bb8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    2bb8:	df 93       	push	r29
    2bba:	cf 93       	push	r28
    2bbc:	00 d0       	rcall	.+0      	; 0x2bbe <xTaskGetTickCountFromISR+0x6>
    2bbe:	0f 92       	push	r0
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2bc4:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    2bc6:	80 91 a6 04 	lds	r24, 0x04A6
    2bca:	90 91 a7 04 	lds	r25, 0x04A7
    2bce:	9b 83       	std	Y+3, r25	; 0x03
    2bd0:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    2bea:	80 91 a5 04 	lds	r24, 0x04A5
}
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <vTaskIncrementTick+0x6>
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <vTaskIncrementTick+0x8>
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <vTaskIncrementTick+0xa>
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2c02:	80 91 ab 04 	lds	r24, 0x04AB
    2c06:	88 23       	and	r24, r24
    2c08:	09 f0       	breq	.+2      	; 0x2c0c <vTaskIncrementTick+0x18>
    2c0a:	bb c0       	rjmp	.+374    	; 0x2d82 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    2c0c:	80 91 a6 04 	lds	r24, 0x04A6
    2c10:	90 91 a7 04 	lds	r25, 0x04A7
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	90 93 a7 04 	sts	0x04A7, r25
    2c1a:	80 93 a6 04 	sts	0x04A6, r24
		if( xTickCount == ( portTickType ) 0U )
    2c1e:	80 91 a6 04 	lds	r24, 0x04A6
    2c22:	90 91 a7 04 	lds	r25, 0x04A7
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	d1 f5       	brne	.+116    	; 0x2c9e <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    2c2a:	80 91 f8 04 	lds	r24, 0x04F8
    2c2e:	90 91 f9 04 	lds	r25, 0x04F9
    2c32:	9c 83       	std	Y+4, r25	; 0x04
    2c34:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2c36:	80 91 fa 04 	lds	r24, 0x04FA
    2c3a:	90 91 fb 04 	lds	r25, 0x04FB
    2c3e:	90 93 f9 04 	sts	0x04F9, r25
    2c42:	80 93 f8 04 	sts	0x04F8, r24
			pxOverflowDelayedTaskList = pxTemp;
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4a:	90 93 fb 04 	sts	0x04FB, r25
    2c4e:	80 93 fa 04 	sts	0x04FA, r24
			xNumOfOverflows++;
    2c52:	80 91 ae 04 	lds	r24, 0x04AE
    2c56:	8f 5f       	subi	r24, 0xFF	; 255
    2c58:	80 93 ae 04 	sts	0x04AE, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2c5c:	e0 91 f8 04 	lds	r30, 0x04F8
    2c60:	f0 91 f9 04 	lds	r31, 0x04F9
    2c64:	80 81       	ld	r24, Z
    2c66:	88 23       	and	r24, r24
    2c68:	39 f4       	brne	.+14     	; 0x2c78 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2c6a:	8f ef       	ldi	r24, 0xFF	; 255
    2c6c:	9f ef       	ldi	r25, 0xFF	; 255
    2c6e:	90 93 7c 00 	sts	0x007C, r25
    2c72:	80 93 7b 00 	sts	0x007B, r24
    2c76:	13 c0       	rjmp	.+38     	; 0x2c9e <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2c78:	e0 91 f8 04 	lds	r30, 0x04F8
    2c7c:	f0 91 f9 04 	lds	r31, 0x04F9
    2c80:	05 80       	ldd	r0, Z+5	; 0x05
    2c82:	f6 81       	ldd	r31, Z+6	; 0x06
    2c84:	e0 2d       	mov	r30, r0
    2c86:	86 81       	ldd	r24, Z+6	; 0x06
    2c88:	97 81       	ldd	r25, Z+7	; 0x07
    2c8a:	9e 83       	std	Y+6, r25	; 0x06
    2c8c:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2c8e:	ed 81       	ldd	r30, Y+5	; 0x05
    2c90:	fe 81       	ldd	r31, Y+6	; 0x06
    2c92:	82 81       	ldd	r24, Z+2	; 0x02
    2c94:	93 81       	ldd	r25, Z+3	; 0x03
    2c96:	90 93 7c 00 	sts	0x007C, r25
    2c9a:	80 93 7b 00 	sts	0x007B, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2c9e:	20 91 a6 04 	lds	r18, 0x04A6
    2ca2:	30 91 a7 04 	lds	r19, 0x04A7
    2ca6:	80 91 7b 00 	lds	r24, 0x007B
    2caa:	90 91 7c 00 	lds	r25, 0x007C
    2cae:	28 17       	cp	r18, r24
    2cb0:	39 07       	cpc	r19, r25
    2cb2:	08 f4       	brcc	.+2      	; 0x2cb6 <vTaskIncrementTick+0xc2>
    2cb4:	6b c0       	rjmp	.+214    	; 0x2d8c <vTaskIncrementTick+0x198>
    2cb6:	e0 91 f8 04 	lds	r30, 0x04F8
    2cba:	f0 91 f9 04 	lds	r31, 0x04F9
    2cbe:	80 81       	ld	r24, Z
    2cc0:	88 23       	and	r24, r24
    2cc2:	39 f4       	brne	.+14     	; 0x2cd2 <vTaskIncrementTick+0xde>
    2cc4:	8f ef       	ldi	r24, 0xFF	; 255
    2cc6:	9f ef       	ldi	r25, 0xFF	; 255
    2cc8:	90 93 7c 00 	sts	0x007C, r25
    2ccc:	80 93 7b 00 	sts	0x007B, r24
    2cd0:	5d c0       	rjmp	.+186    	; 0x2d8c <vTaskIncrementTick+0x198>
    2cd2:	e0 91 f8 04 	lds	r30, 0x04F8
    2cd6:	f0 91 f9 04 	lds	r31, 0x04F9
    2cda:	05 80       	ldd	r0, Z+5	; 0x05
    2cdc:	f6 81       	ldd	r31, Z+6	; 0x06
    2cde:	e0 2d       	mov	r30, r0
    2ce0:	86 81       	ldd	r24, Z+6	; 0x06
    2ce2:	97 81       	ldd	r25, Z+7	; 0x07
    2ce4:	9e 83       	std	Y+6, r25	; 0x06
    2ce6:	8d 83       	std	Y+5, r24	; 0x05
    2ce8:	ed 81       	ldd	r30, Y+5	; 0x05
    2cea:	fe 81       	ldd	r31, Y+6	; 0x06
    2cec:	82 81       	ldd	r24, Z+2	; 0x02
    2cee:	93 81       	ldd	r25, Z+3	; 0x03
    2cf0:	9a 83       	std	Y+2, r25	; 0x02
    2cf2:	89 83       	std	Y+1, r24	; 0x01
    2cf4:	20 91 a6 04 	lds	r18, 0x04A6
    2cf8:	30 91 a7 04 	lds	r19, 0x04A7
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2d00:	28 17       	cp	r18, r24
    2d02:	39 07       	cpc	r19, r25
    2d04:	38 f4       	brcc	.+14     	; 0x2d14 <vTaskIncrementTick+0x120>
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	90 93 7c 00 	sts	0x007C, r25
    2d0e:	80 93 7b 00 	sts	0x007B, r24
    2d12:	3c c0       	rjmp	.+120    	; 0x2d8c <vTaskIncrementTick+0x198>
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	9e 81       	ldd	r25, Y+6	; 0x06
    2d18:	02 96       	adiw	r24, 0x02	; 2
    2d1a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
    2d1e:	ed 81       	ldd	r30, Y+5	; 0x05
    2d20:	fe 81       	ldd	r31, Y+6	; 0x06
    2d22:	84 89       	ldd	r24, Z+20	; 0x14
    2d24:	95 89       	ldd	r25, Z+21	; 0x15
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	29 f0       	breq	.+10     	; 0x2d34 <vTaskIncrementTick+0x140>
    2d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2e:	0c 96       	adiw	r24, 0x0c	; 12
    2d30:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
    2d34:	ed 81       	ldd	r30, Y+5	; 0x05
    2d36:	fe 81       	ldd	r31, Y+6	; 0x06
    2d38:	96 89       	ldd	r25, Z+22	; 0x16
    2d3a:	80 91 a9 04 	lds	r24, 0x04A9
    2d3e:	89 17       	cp	r24, r25
    2d40:	28 f4       	brcc	.+10     	; 0x2d4c <vTaskIncrementTick+0x158>
    2d42:	ed 81       	ldd	r30, Y+5	; 0x05
    2d44:	fe 81       	ldd	r31, Y+6	; 0x06
    2d46:	86 89       	ldd	r24, Z+22	; 0x16
    2d48:	80 93 a9 04 	sts	0x04A9, r24
    2d4c:	ed 81       	ldd	r30, Y+5	; 0x05
    2d4e:	fe 81       	ldd	r31, Y+6	; 0x06
    2d50:	86 89       	ldd	r24, Z+22	; 0x16
    2d52:	28 2f       	mov	r18, r24
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	c9 01       	movw	r24, r18
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	82 0f       	add	r24, r18
    2d66:	93 1f       	adc	r25, r19
    2d68:	ac 01       	movw	r20, r24
    2d6a:	40 55       	subi	r20, 0x50	; 80
    2d6c:	5b 4f       	sbci	r21, 0xFB	; 251
    2d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d70:	9e 81       	ldd	r25, Y+6	; 0x06
    2d72:	9c 01       	movw	r18, r24
    2d74:	2e 5f       	subi	r18, 0xFE	; 254
    2d76:	3f 4f       	sbci	r19, 0xFF	; 255
    2d78:	ca 01       	movw	r24, r20
    2d7a:	b9 01       	movw	r22, r18
    2d7c:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
    2d80:	9a cf       	rjmp	.-204    	; 0x2cb6 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    2d82:	80 91 ac 04 	lds	r24, 0x04AC
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	80 93 ac 04 	sts	0x04AC, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2d8c:	26 96       	adiw	r28, 0x06	; 6
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	00 d0       	rcall	.+0      	; 0x2da4 <vTaskSwitchContext+0x6>
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2da8:	80 91 ab 04 	lds	r24, 0x04AB
    2dac:	88 23       	and	r24, r24
    2dae:	49 f0       	breq	.+18     	; 0x2dc2 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	80 93 ad 04 	sts	0x04AD, r24
    2db6:	54 c0       	rjmp	.+168    	; 0x2e60 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    2db8:	80 91 a9 04 	lds	r24, 0x04A9
    2dbc:	81 50       	subi	r24, 0x01	; 1
    2dbe:	80 93 a9 04 	sts	0x04A9, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2dc2:	80 91 a9 04 	lds	r24, 0x04A9
    2dc6:	28 2f       	mov	r18, r24
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	c9 01       	movw	r24, r18
    2dcc:	88 0f       	add	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	88 0f       	add	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	82 0f       	add	r24, r18
    2dda:	93 1f       	adc	r25, r19
    2ddc:	fc 01       	movw	r30, r24
    2dde:	e0 55       	subi	r30, 0x50	; 80
    2de0:	fb 4f       	sbci	r31, 0xFB	; 251
    2de2:	80 81       	ld	r24, Z
    2de4:	88 23       	and	r24, r24
    2de6:	41 f3       	breq	.-48     	; 0x2db8 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    2de8:	80 91 a9 04 	lds	r24, 0x04A9
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	c9 01       	movw	r24, r18
    2df2:	88 0f       	add	r24, r24
    2df4:	99 1f       	adc	r25, r25
    2df6:	88 0f       	add	r24, r24
    2df8:	99 1f       	adc	r25, r25
    2dfa:	88 0f       	add	r24, r24
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	82 0f       	add	r24, r18
    2e00:	93 1f       	adc	r25, r19
    2e02:	80 55       	subi	r24, 0x50	; 80
    2e04:	9b 4f       	sbci	r25, 0xFB	; 251
    2e06:	9a 83       	std	Y+2, r25	; 0x02
    2e08:	89 83       	std	Y+1, r24	; 0x01
    2e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e0e:	01 80       	ldd	r0, Z+1	; 0x01
    2e10:	f2 81       	ldd	r31, Z+2	; 0x02
    2e12:	e0 2d       	mov	r30, r0
    2e14:	82 81       	ldd	r24, Z+2	; 0x02
    2e16:	93 81       	ldd	r25, Z+3	; 0x03
    2e18:	e9 81       	ldd	r30, Y+1	; 0x01
    2e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e1c:	92 83       	std	Z+2, r25	; 0x02
    2e1e:	81 83       	std	Z+1, r24	; 0x01
    2e20:	e9 81       	ldd	r30, Y+1	; 0x01
    2e22:	fa 81       	ldd	r31, Y+2	; 0x02
    2e24:	21 81       	ldd	r18, Z+1	; 0x01
    2e26:	32 81       	ldd	r19, Z+2	; 0x02
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2c:	03 96       	adiw	r24, 0x03	; 3
    2e2e:	28 17       	cp	r18, r24
    2e30:	39 07       	cpc	r19, r25
    2e32:	59 f4       	brne	.+22     	; 0x2e4a <vTaskSwitchContext+0xac>
    2e34:	e9 81       	ldd	r30, Y+1	; 0x01
    2e36:	fa 81       	ldd	r31, Y+2	; 0x02
    2e38:	01 80       	ldd	r0, Z+1	; 0x01
    2e3a:	f2 81       	ldd	r31, Z+2	; 0x02
    2e3c:	e0 2d       	mov	r30, r0
    2e3e:	82 81       	ldd	r24, Z+2	; 0x02
    2e40:	93 81       	ldd	r25, Z+3	; 0x03
    2e42:	e9 81       	ldd	r30, Y+1	; 0x01
    2e44:	fa 81       	ldd	r31, Y+2	; 0x02
    2e46:	92 83       	std	Z+2, r25	; 0x02
    2e48:	81 83       	std	Z+1, r24	; 0x01
    2e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e4e:	01 80       	ldd	r0, Z+1	; 0x01
    2e50:	f2 81       	ldd	r31, Z+2	; 0x02
    2e52:	e0 2d       	mov	r30, r0
    2e54:	86 81       	ldd	r24, Z+6	; 0x06
    2e56:	97 81       	ldd	r25, Z+7	; 0x07
    2e58:	90 93 a3 04 	sts	0x04A3, r25
    2e5c:	80 93 a2 04 	sts	0x04A2, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	cf 91       	pop	r28
    2e66:	df 91       	pop	r29
    2e68:	08 95       	ret

00002e6a <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <vTaskPlaceOnEventList+0x6>
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <vTaskPlaceOnEventList+0x8>
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <vTaskPlaceOnEventList+0xa>
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	9c 83       	std	Y+4, r25	; 0x04
    2e7a:	8b 83       	std	Y+3, r24	; 0x03
    2e7c:	7e 83       	std	Y+6, r23	; 0x06
    2e7e:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    2e80:	4b 81       	ldd	r20, Y+3	; 0x03
    2e82:	5c 81       	ldd	r21, Y+4	; 0x04
    2e84:	80 91 a2 04 	lds	r24, 0x04A2
    2e88:	90 91 a3 04 	lds	r25, 0x04A3
    2e8c:	9c 01       	movw	r18, r24
    2e8e:	24 5f       	subi	r18, 0xF4	; 244
    2e90:	3f 4f       	sbci	r19, 0xFF	; 255
    2e92:	ca 01       	movw	r24, r20
    2e94:	b9 01       	movw	r22, r18
    2e96:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2e9a:	80 91 a2 04 	lds	r24, 0x04A2
    2e9e:	90 91 a3 04 	lds	r25, 0x04A3
    2ea2:	02 96       	adiw	r24, 0x02	; 2
    2ea4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    2ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    2eac:	2f ef       	ldi	r18, 0xFF	; 255
    2eae:	8f 3f       	cpi	r24, 0xFF	; 255
    2eb0:	92 07       	cpc	r25, r18
    2eb2:	69 f4       	brne	.+26     	; 0x2ece <vTaskPlaceOnEventList+0x64>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2eb4:	80 91 a2 04 	lds	r24, 0x04A2
    2eb8:	90 91 a3 04 	lds	r25, 0x04A3
    2ebc:	9c 01       	movw	r18, r24
    2ebe:	2e 5f       	subi	r18, 0xFE	; 254
    2ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec2:	8e e0       	ldi	r24, 0x0E	; 14
    2ec4:	95 e0       	ldi	r25, 0x05	; 5
    2ec6:	b9 01       	movw	r22, r18
    2ec8:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
    2ecc:	0e c0       	rjmp	.+28     	; 0x2eea <vTaskPlaceOnEventList+0x80>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    2ece:	20 91 a6 04 	lds	r18, 0x04A6
    2ed2:	30 91 a7 04 	lds	r19, 0x04A7
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eda:	82 0f       	add	r24, r18
    2edc:	93 1f       	adc	r25, r19
    2ede:	9a 83       	std	Y+2, r25	; 0x02
    2ee0:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee6:	0e 94 50 19 	call	0x32a0	; 0x32a0 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    2eea:	26 96       	adiw	r28, 0x06	; 6
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	cf 91       	pop	r28
    2ef8:	df 91       	pop	r29
    2efa:	08 95       	ret

00002efc <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    2efc:	df 93       	push	r29
    2efe:	cf 93       	push	r28
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <xTaskRemoveFromEventList+0x6>
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <xTaskRemoveFromEventList+0x8>
    2f04:	0f 92       	push	r0
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	9d 83       	std	Y+5, r25	; 0x05
    2f0c:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2f0e:	ec 81       	ldd	r30, Y+4	; 0x04
    2f10:	fd 81       	ldd	r31, Y+5	; 0x05
    2f12:	05 80       	ldd	r0, Z+5	; 0x05
    2f14:	f6 81       	ldd	r31, Z+6	; 0x06
    2f16:	e0 2d       	mov	r30, r0
    2f18:	86 81       	ldd	r24, Z+6	; 0x06
    2f1a:	97 81       	ldd	r25, Z+7	; 0x07
    2f1c:	9b 83       	std	Y+3, r25	; 0x03
    2f1e:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2f20:	8a 81       	ldd	r24, Y+2	; 0x02
    2f22:	9b 81       	ldd	r25, Y+3	; 0x03
    2f24:	0c 96       	adiw	r24, 0x0c	; 12
    2f26:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2f2a:	80 91 ab 04 	lds	r24, 0x04AB
    2f2e:	88 23       	and	r24, r24
    2f30:	61 f5       	brne	.+88     	; 0x2f8a <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	9b 81       	ldd	r25, Y+3	; 0x03
    2f36:	02 96       	adiw	r24, 0x02	; 2
    2f38:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2f3c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f3e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f40:	96 89       	ldd	r25, Z+22	; 0x16
    2f42:	80 91 a9 04 	lds	r24, 0x04A9
    2f46:	89 17       	cp	r24, r25
    2f48:	28 f4       	brcc	.+10     	; 0x2f54 <xTaskRemoveFromEventList+0x58>
    2f4a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f4c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f4e:	86 89       	ldd	r24, Z+22	; 0x16
    2f50:	80 93 a9 04 	sts	0x04A9, r24
    2f54:	ea 81       	ldd	r30, Y+2	; 0x02
    2f56:	fb 81       	ldd	r31, Y+3	; 0x03
    2f58:	86 89       	ldd	r24, Z+22	; 0x16
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	c9 01       	movw	r24, r18
    2f60:	88 0f       	add	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	88 0f       	add	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	82 0f       	add	r24, r18
    2f6e:	93 1f       	adc	r25, r19
    2f70:	ac 01       	movw	r20, r24
    2f72:	40 55       	subi	r20, 0x50	; 80
    2f74:	5b 4f       	sbci	r21, 0xFB	; 251
    2f76:	8a 81       	ldd	r24, Y+2	; 0x02
    2f78:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7a:	9c 01       	movw	r18, r24
    2f7c:	2e 5f       	subi	r18, 0xFE	; 254
    2f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f80:	ca 01       	movw	r24, r20
    2f82:	b9 01       	movw	r22, r18
    2f84:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
    2f88:	0a c0       	rjmp	.+20     	; 0x2f9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8e:	9c 01       	movw	r18, r24
    2f90:	24 5f       	subi	r18, 0xF4	; 244
    2f92:	3f 4f       	sbci	r19, 0xFF	; 255
    2f94:	8c ef       	ldi	r24, 0xFC	; 252
    2f96:	94 e0       	ldi	r25, 0x04	; 4
    2f98:	b9 01       	movw	r22, r18
    2f9a:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2f9e:	ea 81       	ldd	r30, Y+2	; 0x02
    2fa0:	fb 81       	ldd	r31, Y+3	; 0x03
    2fa2:	96 89       	ldd	r25, Z+22	; 0x16
    2fa4:	e0 91 a2 04 	lds	r30, 0x04A2
    2fa8:	f0 91 a3 04 	lds	r31, 0x04A3
    2fac:	86 89       	ldd	r24, Z+22	; 0x16
    2fae:	98 17       	cp	r25, r24
    2fb0:	18 f0       	brcs	.+6      	; 0x2fb8 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	89 83       	std	Y+1, r24	; 0x01
    2fb6:	01 c0       	rjmp	.+2      	; 0x2fba <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    2fb8:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	0f 90       	pop	r0
    2fc6:	cf 91       	pop	r28
    2fc8:	df 91       	pop	r29
    2fca:	08 95       	ret

00002fcc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    2fcc:	df 93       	push	r29
    2fce:	cf 93       	push	r28
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <vTaskSetTimeOutState+0x6>
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	9a 83       	std	Y+2, r25	; 0x02
    2fd8:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2fda:	80 91 ae 04 	lds	r24, 0x04AE
    2fde:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe2:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    2fe4:	80 91 a6 04 	lds	r24, 0x04A6
    2fe8:	90 91 a7 04 	lds	r25, 0x04A7
    2fec:	e9 81       	ldd	r30, Y+1	; 0x01
    2fee:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff0:	92 83       	std	Z+2, r25	; 0x02
    2ff2:	81 83       	std	Z+1, r24	; 0x01
}
    2ff4:	0f 90       	pop	r0
    2ff6:	0f 90       	pop	r0
    2ff8:	cf 91       	pop	r28
    2ffa:	df 91       	pop	r29
    2ffc:	08 95       	ret

00002ffe <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    2ffe:	df 93       	push	r29
    3000:	cf 93       	push	r28
    3002:	00 d0       	rcall	.+0      	; 0x3004 <xTaskCheckForTimeOut+0x6>
    3004:	00 d0       	rcall	.+0      	; 0x3006 <xTaskCheckForTimeOut+0x8>
    3006:	0f 92       	push	r0
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	9b 83       	std	Y+3, r25	; 0x03
    300e:	8a 83       	std	Y+2, r24	; 0x02
    3010:	7d 83       	std	Y+5, r23	; 0x05
    3012:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	f8 94       	cli
    3018:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    301a:	ec 81       	ldd	r30, Y+4	; 0x04
    301c:	fd 81       	ldd	r31, Y+5	; 0x05
    301e:	80 81       	ld	r24, Z
    3020:	91 81       	ldd	r25, Z+1	; 0x01
    3022:	2f ef       	ldi	r18, 0xFF	; 255
    3024:	8f 3f       	cpi	r24, 0xFF	; 255
    3026:	92 07       	cpc	r25, r18
    3028:	11 f4       	brne	.+4      	; 0x302e <xTaskCheckForTimeOut+0x30>
			{
				xReturn = pdFALSE;
    302a:	19 82       	std	Y+1, r1	; 0x01
    302c:	44 c0       	rjmp	.+136    	; 0x30b6 <xTaskCheckForTimeOut+0xb8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    302e:	ea 81       	ldd	r30, Y+2	; 0x02
    3030:	fb 81       	ldd	r31, Y+3	; 0x03
    3032:	90 81       	ld	r25, Z
    3034:	80 91 ae 04 	lds	r24, 0x04AE
    3038:	98 17       	cp	r25, r24
    303a:	71 f0       	breq	.+28     	; 0x3058 <xTaskCheckForTimeOut+0x5a>
    303c:	ea 81       	ldd	r30, Y+2	; 0x02
    303e:	fb 81       	ldd	r31, Y+3	; 0x03
    3040:	21 81       	ldd	r18, Z+1	; 0x01
    3042:	32 81       	ldd	r19, Z+2	; 0x02
    3044:	80 91 a6 04 	lds	r24, 0x04A6
    3048:	90 91 a7 04 	lds	r25, 0x04A7
    304c:	82 17       	cp	r24, r18
    304e:	93 07       	cpc	r25, r19
    3050:	18 f0       	brcs	.+6      	; 0x3058 <xTaskCheckForTimeOut+0x5a>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	89 83       	std	Y+1, r24	; 0x01
    3056:	2f c0       	rjmp	.+94     	; 0x30b6 <xTaskCheckForTimeOut+0xb8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3058:	20 91 a6 04 	lds	r18, 0x04A6
    305c:	30 91 a7 04 	lds	r19, 0x04A7
    3060:	ea 81       	ldd	r30, Y+2	; 0x02
    3062:	fb 81       	ldd	r31, Y+3	; 0x03
    3064:	81 81       	ldd	r24, Z+1	; 0x01
    3066:	92 81       	ldd	r25, Z+2	; 0x02
    3068:	28 1b       	sub	r18, r24
    306a:	39 0b       	sbc	r19, r25
    306c:	ec 81       	ldd	r30, Y+4	; 0x04
    306e:	fd 81       	ldd	r31, Y+5	; 0x05
    3070:	80 81       	ld	r24, Z
    3072:	91 81       	ldd	r25, Z+1	; 0x01
    3074:	28 17       	cp	r18, r24
    3076:	39 07       	cpc	r19, r25
    3078:	e0 f4       	brcc	.+56     	; 0x30b2 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    307a:	ec 81       	ldd	r30, Y+4	; 0x04
    307c:	fd 81       	ldd	r31, Y+5	; 0x05
    307e:	40 81       	ld	r20, Z
    3080:	51 81       	ldd	r21, Z+1	; 0x01
    3082:	ea 81       	ldd	r30, Y+2	; 0x02
    3084:	fb 81       	ldd	r31, Y+3	; 0x03
    3086:	21 81       	ldd	r18, Z+1	; 0x01
    3088:	32 81       	ldd	r19, Z+2	; 0x02
    308a:	80 91 a6 04 	lds	r24, 0x04A6
    308e:	90 91 a7 04 	lds	r25, 0x04A7
    3092:	b9 01       	movw	r22, r18
    3094:	68 1b       	sub	r22, r24
    3096:	79 0b       	sbc	r23, r25
    3098:	cb 01       	movw	r24, r22
    309a:	84 0f       	add	r24, r20
    309c:	95 1f       	adc	r25, r21
    309e:	ec 81       	ldd	r30, Y+4	; 0x04
    30a0:	fd 81       	ldd	r31, Y+5	; 0x05
    30a2:	91 83       	std	Z+1, r25	; 0x01
    30a4:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	9b 81       	ldd	r25, Y+3	; 0x03
    30aa:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    30ae:	19 82       	std	Y+1, r1	; 0x01
    30b0:	02 c0       	rjmp	.+4      	; 0x30b6 <xTaskCheckForTimeOut+0xb8>
		}
		else
		{
			xReturn = pdTRUE;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    30b6:	0f 90       	pop	r0
    30b8:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    30bc:	0f 90       	pop	r0
    30be:	0f 90       	pop	r0
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	cf 91       	pop	r28
    30c8:	df 91       	pop	r29
    30ca:	08 95       	ret

000030cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    30cc:	df 93       	push	r29
    30ce:	cf 93       	push	r28
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	80 93 ad 04 	sts	0x04AD, r24
}
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	08 95       	ret

000030e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    30e0:	df 93       	push	r29
    30e2:	cf 93       	push	r28
    30e4:	00 d0       	rcall	.+0      	; 0x30e6 <prvIdleTask+0x6>
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
    30ea:	9a 83       	std	Y+2, r25	; 0x02
    30ec:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    30ee:	0e 94 12 19 	call	0x3224	; 0x3224 <prvCheckTasksWaitingTermination>
    30f2:	fd cf       	rjmp	.-6      	; 0x30ee <prvIdleTask+0xe>

000030f4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    30f4:	0f 93       	push	r16
    30f6:	1f 93       	push	r17
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	29 97       	sbiw	r28, 0x09	; 9
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	7c 83       	std	Y+4, r23	; 0x04
    3112:	6b 83       	std	Y+3, r22	; 0x03
    3114:	4d 83       	std	Y+5, r20	; 0x05
    3116:	3f 83       	std	Y+7, r19	; 0x07
    3118:	2e 83       	std	Y+6, r18	; 0x06
    311a:	19 87       	std	Y+9, r17	; 0x09
    311c:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	9a 81       	ldd	r25, Y+2	; 0x02
    3122:	49 96       	adiw	r24, 0x19	; 25
    3124:	2b 81       	ldd	r18, Y+3	; 0x03
    3126:	3c 81       	ldd	r19, Y+4	; 0x04
    3128:	b9 01       	movw	r22, r18
    312a:	48 e0       	ldi	r20, 0x08	; 8
    312c:	50 e0       	ldi	r21, 0x00	; 0
    312e:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    3132:	e9 81       	ldd	r30, Y+1	; 0x01
    3134:	fa 81       	ldd	r31, Y+2	; 0x02
    3136:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    3138:	8d 81       	ldd	r24, Y+5	; 0x05
    313a:	86 30       	cpi	r24, 0x06	; 6
    313c:	10 f0       	brcs	.+4      	; 0x3142 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    313e:	85 e0       	ldi	r24, 0x05	; 5
    3140:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    3142:	e9 81       	ldd	r30, Y+1	; 0x01
    3144:	fa 81       	ldd	r31, Y+2	; 0x02
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	9a 81       	ldd	r25, Y+2	; 0x02
    314e:	02 96       	adiw	r24, 0x02	; 2
    3150:	0e 94 11 09 	call	0x1222	; 0x1222 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	9a 81       	ldd	r25, Y+2	; 0x02
    3158:	0c 96       	adiw	r24, 0x0c	; 12
    315a:	0e 94 11 09 	call	0x1222	; 0x1222 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    315e:	e9 81       	ldd	r30, Y+1	; 0x01
    3160:	fa 81       	ldd	r31, Y+2	; 0x02
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	9a 81       	ldd	r25, Y+2	; 0x02
    3166:	91 87       	std	Z+9, r25	; 0x09
    3168:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	28 2f       	mov	r18, r24
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	86 e0       	ldi	r24, 0x06	; 6
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	82 1b       	sub	r24, r18
    3176:	93 0b       	sbc	r25, r19
    3178:	e9 81       	ldd	r30, Y+1	; 0x01
    317a:	fa 81       	ldd	r31, Y+2	; 0x02
    317c:	95 87       	std	Z+13, r25	; 0x0d
    317e:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3180:	e9 81       	ldd	r30, Y+1	; 0x01
    3182:	fa 81       	ldd	r31, Y+2	; 0x02
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	9a 81       	ldd	r25, Y+2	; 0x02
    3188:	93 8b       	std	Z+19, r25	; 0x13
    318a:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    318c:	29 96       	adiw	r28, 0x09	; 9
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret

000031a2 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    31a2:	df 93       	push	r29
    31a4:	cf 93       	push	r28
    31a6:	0f 92       	push	r0
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    31ac:	19 82       	std	Y+1, r1	; 0x01
    31ae:	13 c0       	rjmp	.+38     	; 0x31d6 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	28 2f       	mov	r18, r24
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	c9 01       	movw	r24, r18
    31b8:	88 0f       	add	r24, r24
    31ba:	99 1f       	adc	r25, r25
    31bc:	88 0f       	add	r24, r24
    31be:	99 1f       	adc	r25, r25
    31c0:	88 0f       	add	r24, r24
    31c2:	99 1f       	adc	r25, r25
    31c4:	82 0f       	add	r24, r18
    31c6:	93 1f       	adc	r25, r19
    31c8:	80 55       	subi	r24, 0x50	; 80
    31ca:	9b 4f       	sbci	r25, 0xFB	; 251
    31cc:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	8f 5f       	subi	r24, 0xFF	; 255
    31d4:	89 83       	std	Y+1, r24	; 0x01
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	86 30       	cpi	r24, 0x06	; 6
    31da:	50 f3       	brcs	.-44     	; 0x31b0 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    31dc:	86 ee       	ldi	r24, 0xE6	; 230
    31de:	94 e0       	ldi	r25, 0x04	; 4
    31e0:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    31e4:	8f ee       	ldi	r24, 0xEF	; 239
    31e6:	94 e0       	ldi	r25, 0x04	; 4
    31e8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    31ec:	8c ef       	ldi	r24, 0xFC	; 252
    31ee:	94 e0       	ldi	r25, 0x04	; 4
    31f0:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    31f4:	85 e0       	ldi	r24, 0x05	; 5
    31f6:	95 e0       	ldi	r25, 0x05	; 5
    31f8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    31fc:	8e e0       	ldi	r24, 0x0E	; 14
    31fe:	95 e0       	ldi	r25, 0x05	; 5
    3200:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3204:	86 ee       	ldi	r24, 0xE6	; 230
    3206:	94 e0       	ldi	r25, 0x04	; 4
    3208:	90 93 f9 04 	sts	0x04F9, r25
    320c:	80 93 f8 04 	sts	0x04F8, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3210:	8f ee       	ldi	r24, 0xEF	; 239
    3212:	94 e0       	ldi	r25, 0x04	; 4
    3214:	90 93 fb 04 	sts	0x04FB, r25
    3218:	80 93 fa 04 	sts	0x04FA, r24
}
    321c:	0f 90       	pop	r0
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	00 d0       	rcall	.+0      	; 0x322a <prvCheckTasksWaitingTermination+0x6>
    322a:	0f 92       	push	r0
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    3230:	80 91 a4 04 	lds	r24, 0x04A4
    3234:	88 23       	and	r24, r24
    3236:	71 f1       	breq	.+92     	; 0x3294 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    3238:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    323c:	80 91 05 05 	lds	r24, 0x0505
    3240:	1b 82       	std	Y+3, r1	; 0x03
    3242:	88 23       	and	r24, r24
    3244:	11 f4       	brne	.+4      	; 0x324a <prvCheckTasksWaitingTermination+0x26>
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    324a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    324e:	8b 81       	ldd	r24, Y+3	; 0x03
    3250:	88 23       	and	r24, r24
    3252:	01 f5       	brne	.+64     	; 0x3294 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    325a:	e0 91 0a 05 	lds	r30, 0x050A
    325e:	f0 91 0b 05 	lds	r31, 0x050B
    3262:	86 81       	ldd	r24, Z+6	; 0x06
    3264:	97 81       	ldd	r25, Z+7	; 0x07
    3266:	9a 83       	std	Y+2, r25	; 0x02
    3268:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	9a 81       	ldd	r25, Y+2	; 0x02
    326e:	02 96       	adiw	r24, 0x02	; 2
    3270:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
					--uxCurrentNumberOfTasks;
    3274:	80 91 a5 04 	lds	r24, 0x04A5
    3278:	81 50       	subi	r24, 0x01	; 1
    327a:	80 93 a5 04 	sts	0x04A5, r24
					--uxTasksDeleted;
    327e:	80 91 a4 04 	lds	r24, 0x04A4
    3282:	81 50       	subi	r24, 0x01	; 1
    3284:	80 93 a4 04 	sts	0x04A4, r24
				}
				taskEXIT_CRITICAL();
    3288:	0f 90       	pop	r0
    328a:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	9a 81       	ldd	r25, Y+2	; 0x02
    3290:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <prvAddCurrentTaskToDelayedList+0x6>
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	9a 83       	std	Y+2, r25	; 0x02
    32ac:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    32ae:	e0 91 a2 04 	lds	r30, 0x04A2
    32b2:	f0 91 a3 04 	lds	r31, 0x04A3
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ba:	93 83       	std	Z+3, r25	; 0x03
    32bc:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    32be:	20 91 a6 04 	lds	r18, 0x04A6
    32c2:	30 91 a7 04 	lds	r19, 0x04A7
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ca:	82 17       	cp	r24, r18
    32cc:	93 07       	cpc	r25, r19
    32ce:	70 f4       	brcc	.+28     	; 0x32ec <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    32d0:	80 91 fa 04 	lds	r24, 0x04FA
    32d4:	90 91 fb 04 	lds	r25, 0x04FB
    32d8:	20 91 a2 04 	lds	r18, 0x04A2
    32dc:	30 91 a3 04 	lds	r19, 0x04A3
    32e0:	2e 5f       	subi	r18, 0xFE	; 254
    32e2:	3f 4f       	sbci	r19, 0xFF	; 255
    32e4:	b9 01       	movw	r22, r18
    32e6:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>
    32ea:	1e c0       	rjmp	.+60     	; 0x3328 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    32ec:	40 91 f8 04 	lds	r20, 0x04F8
    32f0:	50 91 f9 04 	lds	r21, 0x04F9
    32f4:	80 91 a2 04 	lds	r24, 0x04A2
    32f8:	90 91 a3 04 	lds	r25, 0x04A3
    32fc:	9c 01       	movw	r18, r24
    32fe:	2e 5f       	subi	r18, 0xFE	; 254
    3300:	3f 4f       	sbci	r19, 0xFF	; 255
    3302:	ca 01       	movw	r24, r20
    3304:	b9 01       	movw	r22, r18
    3306:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    330a:	20 91 7b 00 	lds	r18, 0x007B
    330e:	30 91 7c 00 	lds	r19, 0x007C
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	9a 81       	ldd	r25, Y+2	; 0x02
    3316:	82 17       	cp	r24, r18
    3318:	93 07       	cpc	r25, r19
    331a:	30 f4       	brcc	.+12     	; 0x3328 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	9a 81       	ldd	r25, Y+2	; 0x02
    3320:	90 93 7c 00 	sts	0x007C, r25
    3324:	80 93 7b 00 	sts	0x007B, r24
		}
	}
}
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
    333a:	28 97       	sbiw	r28, 0x08	; 8
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	f8 94       	cli
    3340:	de bf       	out	0x3e, r29	; 62
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	cd bf       	out	0x3d, r28	; 61
    3346:	9c 83       	std	Y+4, r25	; 0x04
    3348:	8b 83       	std	Y+3, r24	; 0x03
    334a:	7e 83       	std	Y+6, r23	; 0x06
    334c:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    334e:	81 e2       	ldi	r24, 0x21	; 33
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
    3356:	9a 83       	std	Y+2, r25	; 0x02
    3358:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    335a:	89 81       	ldd	r24, Y+1	; 0x01
    335c:	9a 81       	ldd	r25, Y+2	; 0x02
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	69 f1       	breq	.+90     	; 0x33bc <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    3362:	8d 81       	ldd	r24, Y+5	; 0x05
    3364:	9e 81       	ldd	r25, Y+6	; 0x06
    3366:	00 97       	sbiw	r24, 0x00	; 0
    3368:	39 f4       	brne	.+14     	; 0x3378 <prvAllocateTCBAndStack+0x46>
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	9c 81       	ldd	r25, Y+4	; 0x04
    336e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
    3372:	98 87       	std	Y+8, r25	; 0x08
    3374:	8f 83       	std	Y+7, r24	; 0x07
    3376:	04 c0       	rjmp	.+8      	; 0x3380 <prvAllocateTCBAndStack+0x4e>
    3378:	8d 81       	ldd	r24, Y+5	; 0x05
    337a:	9e 81       	ldd	r25, Y+6	; 0x06
    337c:	98 87       	std	Y+8, r25	; 0x08
    337e:	8f 83       	std	Y+7, r24	; 0x07
    3380:	e9 81       	ldd	r30, Y+1	; 0x01
    3382:	fa 81       	ldd	r31, Y+2	; 0x02
    3384:	8f 81       	ldd	r24, Y+7	; 0x07
    3386:	98 85       	ldd	r25, Y+8	; 0x08
    3388:	90 8f       	std	Z+24, r25	; 0x18
    338a:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    338c:	e9 81       	ldd	r30, Y+1	; 0x01
    338e:	fa 81       	ldd	r31, Y+2	; 0x02
    3390:	87 89       	ldd	r24, Z+23	; 0x17
    3392:	90 8d       	ldd	r25, Z+24	; 0x18
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	39 f4       	brne	.+14     	; 0x33a6 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	9a 81       	ldd	r25, Y+2	; 0x02
    339c:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
			pxNewTCB = NULL;
    33a0:	1a 82       	std	Y+2, r1	; 0x02
    33a2:	19 82       	std	Y+1, r1	; 0x01
    33a4:	0b c0       	rjmp	.+22     	; 0x33bc <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    33a6:	e9 81       	ldd	r30, Y+1	; 0x01
    33a8:	fa 81       	ldd	r31, Y+2	; 0x02
    33aa:	87 89       	ldd	r24, Z+23	; 0x17
    33ac:	90 8d       	ldd	r25, Z+24	; 0x18
    33ae:	2b 81       	ldd	r18, Y+3	; 0x03
    33b0:	3c 81       	ldd	r19, Y+4	; 0x04
    33b2:	65 ea       	ldi	r22, 0xA5	; 165
    33b4:	70 e0       	ldi	r23, 0x00	; 0
    33b6:	a9 01       	movw	r20, r18
    33b8:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <memset>
		}
	}

	return pxNewTCB;
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	9a 81       	ldd	r25, Y+2	; 0x02
}
    33c0:	28 96       	adiw	r28, 0x08	; 8
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	cf 91       	pop	r28
    33ce:	df 91       	pop	r29
    33d0:	08 95       	ret

000033d2 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    33d2:	df 93       	push	r29
    33d4:	cf 93       	push	r28
    33d6:	00 d0       	rcall	.+0      	; 0x33d8 <prvDeleteTCB+0x6>
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	9a 83       	std	Y+2, r25	; 0x02
    33de:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    33e0:	e9 81       	ldd	r30, Y+1	; 0x01
    33e2:	fa 81       	ldd	r31, Y+2	; 0x02
    33e4:	87 89       	ldd	r24, Z+23	; 0x17
    33e6:	90 8d       	ldd	r25, Z+24	; 0x18
    33e8:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
		vPortFree( pxTCB );
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	9a 81       	ldd	r25, Y+2	; 0x02
    33f0:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
	}
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	08 95       	ret

000033fe <DIO_SetPinValue>:
#include "LIBS\MATH.h"
#include "DIO_REG.h"
#include "DIO_INT.h"

void DIO_SetPinValue (u8 DIO_PORTID , u8 DIO_PINID , u8 DIO_PinValue)
{
    33fe:	df 93       	push	r29
    3400:	cf 93       	push	r28
    3402:	cd b7       	in	r28, 0x3d	; 61
    3404:	de b7       	in	r29, 0x3e	; 62
    3406:	27 97       	sbiw	r28, 0x07	; 7
    3408:	0f b6       	in	r0, 0x3f	; 63
    340a:	f8 94       	cli
    340c:	de bf       	out	0x3e, r29	; 62
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	cd bf       	out	0x3d, r28	; 61
    3412:	89 83       	std	Y+1, r24	; 0x01
    3414:	6a 83       	std	Y+2, r22	; 0x02
    3416:	4b 83       	std	Y+3, r20	; 0x03
	if (DIO_PinValue == HIGH)
    3418:	8b 81       	ldd	r24, Y+3	; 0x03
    341a:	81 30       	cpi	r24, 0x01	; 1
    341c:	09 f0       	breq	.+2      	; 0x3420 <DIO_SetPinValue+0x22>
    341e:	6f c0       	rjmp	.+222    	; 0x34fe <DIO_SetPinValue+0x100>
	{
		switch(DIO_PORTID)
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	28 2f       	mov	r18, r24
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	3f 83       	std	Y+7, r19	; 0x07
    3428:	2e 83       	std	Y+6, r18	; 0x06
    342a:	8e 81       	ldd	r24, Y+6	; 0x06
    342c:	9f 81       	ldd	r25, Y+7	; 0x07
    342e:	81 30       	cpi	r24, 0x01	; 1
    3430:	91 05       	cpc	r25, r1
    3432:	49 f1       	breq	.+82     	; 0x3486 <DIO_SetPinValue+0x88>
    3434:	2e 81       	ldd	r18, Y+6	; 0x06
    3436:	3f 81       	ldd	r19, Y+7	; 0x07
    3438:	22 30       	cpi	r18, 0x02	; 2
    343a:	31 05       	cpc	r19, r1
    343c:	2c f4       	brge	.+10     	; 0x3448 <DIO_SetPinValue+0x4a>
    343e:	8e 81       	ldd	r24, Y+6	; 0x06
    3440:	9f 81       	ldd	r25, Y+7	; 0x07
    3442:	00 97       	sbiw	r24, 0x00	; 0
    3444:	61 f0       	breq	.+24     	; 0x345e <DIO_SetPinValue+0x60>
    3446:	d2 c0       	rjmp	.+420    	; 0x35ec <DIO_SetPinValue+0x1ee>
    3448:	2e 81       	ldd	r18, Y+6	; 0x06
    344a:	3f 81       	ldd	r19, Y+7	; 0x07
    344c:	22 30       	cpi	r18, 0x02	; 2
    344e:	31 05       	cpc	r19, r1
    3450:	71 f1       	breq	.+92     	; 0x34ae <DIO_SetPinValue+0xb0>
    3452:	8e 81       	ldd	r24, Y+6	; 0x06
    3454:	9f 81       	ldd	r25, Y+7	; 0x07
    3456:	83 30       	cpi	r24, 0x03	; 3
    3458:	91 05       	cpc	r25, r1
    345a:	e9 f1       	breq	.+122    	; 0x34d6 <DIO_SetPinValue+0xd8>
    345c:	c7 c0       	rjmp	.+398    	; 0x35ec <DIO_SetPinValue+0x1ee>
		{
		case PORTA:
			set_bit(PORTA_REG , DIO_PINID);
    345e:	ab e3       	ldi	r26, 0x3B	; 59
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	eb e3       	ldi	r30, 0x3B	; 59
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	48 2f       	mov	r20, r24
    346a:	8a 81       	ldd	r24, Y+2	; 0x02
    346c:	28 2f       	mov	r18, r24
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	02 2e       	mov	r0, r18
    3476:	02 c0       	rjmp	.+4      	; 0x347c <DIO_SetPinValue+0x7e>
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	0a 94       	dec	r0
    347e:	e2 f7       	brpl	.-8      	; 0x3478 <DIO_SetPinValue+0x7a>
    3480:	84 2b       	or	r24, r20
    3482:	8c 93       	st	X, r24
    3484:	b3 c0       	rjmp	.+358    	; 0x35ec <DIO_SetPinValue+0x1ee>
		break;

		case PORTB:
			set_bit(PORTB_REG , DIO_PINID) ;
    3486:	a8 e3       	ldi	r26, 0x38	; 56
    3488:	b0 e0       	ldi	r27, 0x00	; 0
    348a:	e8 e3       	ldi	r30, 0x38	; 56
    348c:	f0 e0       	ldi	r31, 0x00	; 0
    348e:	80 81       	ld	r24, Z
    3490:	48 2f       	mov	r20, r24
    3492:	8a 81       	ldd	r24, Y+2	; 0x02
    3494:	28 2f       	mov	r18, r24
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	02 2e       	mov	r0, r18
    349e:	02 c0       	rjmp	.+4      	; 0x34a4 <DIO_SetPinValue+0xa6>
    34a0:	88 0f       	add	r24, r24
    34a2:	99 1f       	adc	r25, r25
    34a4:	0a 94       	dec	r0
    34a6:	e2 f7       	brpl	.-8      	; 0x34a0 <DIO_SetPinValue+0xa2>
    34a8:	84 2b       	or	r24, r20
    34aa:	8c 93       	st	X, r24
    34ac:	9f c0       	rjmp	.+318    	; 0x35ec <DIO_SetPinValue+0x1ee>
		break;

		case PORTC:
			set_bit(PORTC_REG , DIO_PINID) ;
    34ae:	a5 e3       	ldi	r26, 0x35	; 53
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	e5 e3       	ldi	r30, 0x35	; 53
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	80 81       	ld	r24, Z
    34b8:	48 2f       	mov	r20, r24
    34ba:	8a 81       	ldd	r24, Y+2	; 0x02
    34bc:	28 2f       	mov	r18, r24
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	02 2e       	mov	r0, r18
    34c6:	02 c0       	rjmp	.+4      	; 0x34cc <DIO_SetPinValue+0xce>
    34c8:	88 0f       	add	r24, r24
    34ca:	99 1f       	adc	r25, r25
    34cc:	0a 94       	dec	r0
    34ce:	e2 f7       	brpl	.-8      	; 0x34c8 <DIO_SetPinValue+0xca>
    34d0:	84 2b       	or	r24, r20
    34d2:	8c 93       	st	X, r24
    34d4:	8b c0       	rjmp	.+278    	; 0x35ec <DIO_SetPinValue+0x1ee>
		break;

		case PORTD:
			set_bit(PORTD_REG , DIO_PINID) ;
    34d6:	a2 e3       	ldi	r26, 0x32	; 50
    34d8:	b0 e0       	ldi	r27, 0x00	; 0
    34da:	e2 e3       	ldi	r30, 0x32	; 50
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	80 81       	ld	r24, Z
    34e0:	48 2f       	mov	r20, r24
    34e2:	8a 81       	ldd	r24, Y+2	; 0x02
    34e4:	28 2f       	mov	r18, r24
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	02 2e       	mov	r0, r18
    34ee:	02 c0       	rjmp	.+4      	; 0x34f4 <DIO_SetPinValue+0xf6>
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	0a 94       	dec	r0
    34f6:	e2 f7       	brpl	.-8      	; 0x34f0 <DIO_SetPinValue+0xf2>
    34f8:	84 2b       	or	r24, r20
    34fa:	8c 93       	st	X, r24
    34fc:	77 c0       	rjmp	.+238    	; 0x35ec <DIO_SetPinValue+0x1ee>

		}

	}

	else if (DIO_PinValue == LOW)
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	88 23       	and	r24, r24
    3502:	09 f0       	breq	.+2      	; 0x3506 <DIO_SetPinValue+0x108>
    3504:	73 c0       	rjmp	.+230    	; 0x35ec <DIO_SetPinValue+0x1ee>
	{
		switch(DIO_PORTID)
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	28 2f       	mov	r18, r24
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	3d 83       	std	Y+5, r19	; 0x05
    350e:	2c 83       	std	Y+4, r18	; 0x04
    3510:	8c 81       	ldd	r24, Y+4	; 0x04
    3512:	9d 81       	ldd	r25, Y+5	; 0x05
    3514:	81 30       	cpi	r24, 0x01	; 1
    3516:	91 05       	cpc	r25, r1
    3518:	59 f1       	breq	.+86     	; 0x3570 <DIO_SetPinValue+0x172>
    351a:	2c 81       	ldd	r18, Y+4	; 0x04
    351c:	3d 81       	ldd	r19, Y+5	; 0x05
    351e:	22 30       	cpi	r18, 0x02	; 2
    3520:	31 05       	cpc	r19, r1
    3522:	2c f4       	brge	.+10     	; 0x352e <DIO_SetPinValue+0x130>
    3524:	8c 81       	ldd	r24, Y+4	; 0x04
    3526:	9d 81       	ldd	r25, Y+5	; 0x05
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	69 f0       	breq	.+26     	; 0x3546 <DIO_SetPinValue+0x148>
    352c:	5f c0       	rjmp	.+190    	; 0x35ec <DIO_SetPinValue+0x1ee>
    352e:	2c 81       	ldd	r18, Y+4	; 0x04
    3530:	3d 81       	ldd	r19, Y+5	; 0x05
    3532:	22 30       	cpi	r18, 0x02	; 2
    3534:	31 05       	cpc	r19, r1
    3536:	89 f1       	breq	.+98     	; 0x359a <DIO_SetPinValue+0x19c>
    3538:	8c 81       	ldd	r24, Y+4	; 0x04
    353a:	9d 81       	ldd	r25, Y+5	; 0x05
    353c:	83 30       	cpi	r24, 0x03	; 3
    353e:	91 05       	cpc	r25, r1
    3540:	09 f4       	brne	.+2      	; 0x3544 <DIO_SetPinValue+0x146>
    3542:	40 c0       	rjmp	.+128    	; 0x35c4 <DIO_SetPinValue+0x1c6>
    3544:	53 c0       	rjmp	.+166    	; 0x35ec <DIO_SetPinValue+0x1ee>
		{
		case PORTA:
			clr_bit(PORTA_REG , DIO_PINID) ;
    3546:	ab e3       	ldi	r26, 0x3B	; 59
    3548:	b0 e0       	ldi	r27, 0x00	; 0
    354a:	eb e3       	ldi	r30, 0x3B	; 59
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	48 2f       	mov	r20, r24
    3552:	8a 81       	ldd	r24, Y+2	; 0x02
    3554:	28 2f       	mov	r18, r24
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	02 2e       	mov	r0, r18
    355e:	02 c0       	rjmp	.+4      	; 0x3564 <DIO_SetPinValue+0x166>
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	0a 94       	dec	r0
    3566:	e2 f7       	brpl	.-8      	; 0x3560 <DIO_SetPinValue+0x162>
    3568:	80 95       	com	r24
    356a:	84 23       	and	r24, r20
    356c:	8c 93       	st	X, r24
    356e:	3e c0       	rjmp	.+124    	; 0x35ec <DIO_SetPinValue+0x1ee>
		break;

		case PORTB:
			clr_bit(PORTB_REG , DIO_PINID) ;
    3570:	a8 e3       	ldi	r26, 0x38	; 56
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	e8 e3       	ldi	r30, 0x38	; 56
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	48 2f       	mov	r20, r24
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	28 2f       	mov	r18, r24
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	02 2e       	mov	r0, r18
    3588:	02 c0       	rjmp	.+4      	; 0x358e <DIO_SetPinValue+0x190>
    358a:	88 0f       	add	r24, r24
    358c:	99 1f       	adc	r25, r25
    358e:	0a 94       	dec	r0
    3590:	e2 f7       	brpl	.-8      	; 0x358a <DIO_SetPinValue+0x18c>
    3592:	80 95       	com	r24
    3594:	84 23       	and	r24, r20
    3596:	8c 93       	st	X, r24
    3598:	29 c0       	rjmp	.+82     	; 0x35ec <DIO_SetPinValue+0x1ee>
		break;

		case PORTC:
			clr_bit(PORTC_REG , DIO_PINID) ;
    359a:	a5 e3       	ldi	r26, 0x35	; 53
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	e5 e3       	ldi	r30, 0x35	; 53
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	48 2f       	mov	r20, r24
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	28 2f       	mov	r18, r24
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	02 2e       	mov	r0, r18
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <DIO_SetPinValue+0x1ba>
    35b4:	88 0f       	add	r24, r24
    35b6:	99 1f       	adc	r25, r25
    35b8:	0a 94       	dec	r0
    35ba:	e2 f7       	brpl	.-8      	; 0x35b4 <DIO_SetPinValue+0x1b6>
    35bc:	80 95       	com	r24
    35be:	84 23       	and	r24, r20
    35c0:	8c 93       	st	X, r24
    35c2:	14 c0       	rjmp	.+40     	; 0x35ec <DIO_SetPinValue+0x1ee>
		break;

		case PORTD:
			clr_bit(PORTD_REG , DIO_PINID) ;
    35c4:	a2 e3       	ldi	r26, 0x32	; 50
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e2 e3       	ldi	r30, 0x32	; 50
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	48 2f       	mov	r20, r24
    35d0:	8a 81       	ldd	r24, Y+2	; 0x02
    35d2:	28 2f       	mov	r18, r24
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	02 2e       	mov	r0, r18
    35dc:	02 c0       	rjmp	.+4      	; 0x35e2 <DIO_SetPinValue+0x1e4>
    35de:	88 0f       	add	r24, r24
    35e0:	99 1f       	adc	r25, r25
    35e2:	0a 94       	dec	r0
    35e4:	e2 f7       	brpl	.-8      	; 0x35de <DIO_SetPinValue+0x1e0>
    35e6:	80 95       	com	r24
    35e8:	84 23       	and	r24, r20
    35ea:	8c 93       	st	X, r24
		break;

			}

		}
}
    35ec:	27 96       	adiw	r28, 0x07	; 7
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	f8 94       	cli
    35f2:	de bf       	out	0x3e, r29	; 62
    35f4:	0f be       	out	0x3f, r0	; 63
    35f6:	cd bf       	out	0x3d, r28	; 61
    35f8:	cf 91       	pop	r28
    35fa:	df 91       	pop	r29
    35fc:	08 95       	ret

000035fe <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 DIO_DDRID , u8 DIO_PINID, u8 DIO_PINIO)
{
    35fe:	df 93       	push	r29
    3600:	cf 93       	push	r28
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
    3606:	27 97       	sbiw	r28, 0x07	; 7
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	89 83       	std	Y+1, r24	; 0x01
    3614:	6a 83       	std	Y+2, r22	; 0x02
    3616:	4b 83       	std	Y+3, r20	; 0x03
	if (DIO_PINIO == OUTPUT)
    3618:	8b 81       	ldd	r24, Y+3	; 0x03
    361a:	81 30       	cpi	r24, 0x01	; 1
    361c:	09 f0       	breq	.+2      	; 0x3620 <DIO_SetPinDirection+0x22>
    361e:	6f c0       	rjmp	.+222    	; 0x36fe <DIO_SetPinDirection+0x100>
	{
		switch(DIO_DDRID)
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	28 2f       	mov	r18, r24
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	3f 83       	std	Y+7, r19	; 0x07
    3628:	2e 83       	std	Y+6, r18	; 0x06
    362a:	8e 81       	ldd	r24, Y+6	; 0x06
    362c:	9f 81       	ldd	r25, Y+7	; 0x07
    362e:	85 30       	cpi	r24, 0x05	; 5
    3630:	91 05       	cpc	r25, r1
    3632:	51 f1       	breq	.+84     	; 0x3688 <DIO_SetPinDirection+0x8a>
    3634:	2e 81       	ldd	r18, Y+6	; 0x06
    3636:	3f 81       	ldd	r19, Y+7	; 0x07
    3638:	26 30       	cpi	r18, 0x06	; 6
    363a:	31 05       	cpc	r19, r1
    363c:	34 f4       	brge	.+12     	; 0x364a <DIO_SetPinDirection+0x4c>
    363e:	8e 81       	ldd	r24, Y+6	; 0x06
    3640:	9f 81       	ldd	r25, Y+7	; 0x07
    3642:	84 30       	cpi	r24, 0x04	; 4
    3644:	91 05       	cpc	r25, r1
    3646:	61 f0       	breq	.+24     	; 0x3660 <DIO_SetPinDirection+0x62>
    3648:	5a c0       	rjmp	.+180    	; 0x36fe <DIO_SetPinDirection+0x100>
    364a:	2e 81       	ldd	r18, Y+6	; 0x06
    364c:	3f 81       	ldd	r19, Y+7	; 0x07
    364e:	26 30       	cpi	r18, 0x06	; 6
    3650:	31 05       	cpc	r19, r1
    3652:	71 f1       	breq	.+92     	; 0x36b0 <DIO_SetPinDirection+0xb2>
    3654:	8e 81       	ldd	r24, Y+6	; 0x06
    3656:	9f 81       	ldd	r25, Y+7	; 0x07
    3658:	87 30       	cpi	r24, 0x07	; 7
    365a:	91 05       	cpc	r25, r1
    365c:	e9 f1       	breq	.+122    	; 0x36d8 <DIO_SetPinDirection+0xda>
    365e:	4f c0       	rjmp	.+158    	; 0x36fe <DIO_SetPinDirection+0x100>
		{
		case DDRA:
			set_bit(DDRA_REG , DIO_PINID);
    3660:	aa e3       	ldi	r26, 0x3A	; 58
    3662:	b0 e0       	ldi	r27, 0x00	; 0
    3664:	ea e3       	ldi	r30, 0x3A	; 58
    3666:	f0 e0       	ldi	r31, 0x00	; 0
    3668:	80 81       	ld	r24, Z
    366a:	48 2f       	mov	r20, r24
    366c:	8a 81       	ldd	r24, Y+2	; 0x02
    366e:	28 2f       	mov	r18, r24
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	02 2e       	mov	r0, r18
    3678:	02 c0       	rjmp	.+4      	; 0x367e <DIO_SetPinDirection+0x80>
    367a:	88 0f       	add	r24, r24
    367c:	99 1f       	adc	r25, r25
    367e:	0a 94       	dec	r0
    3680:	e2 f7       	brpl	.-8      	; 0x367a <DIO_SetPinDirection+0x7c>
    3682:	84 2b       	or	r24, r20
    3684:	8c 93       	st	X, r24
    3686:	3b c0       	rjmp	.+118    	; 0x36fe <DIO_SetPinDirection+0x100>
		break;

		case DDRB:
			set_bit(DDRB_REG , DIO_PINID) ;
    3688:	a7 e3       	ldi	r26, 0x37	; 55
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	e7 e3       	ldi	r30, 0x37	; 55
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	80 81       	ld	r24, Z
    3692:	48 2f       	mov	r20, r24
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	28 2f       	mov	r18, r24
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	02 2e       	mov	r0, r18
    36a0:	02 c0       	rjmp	.+4      	; 0x36a6 <DIO_SetPinDirection+0xa8>
    36a2:	88 0f       	add	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	0a 94       	dec	r0
    36a8:	e2 f7       	brpl	.-8      	; 0x36a2 <DIO_SetPinDirection+0xa4>
    36aa:	84 2b       	or	r24, r20
    36ac:	8c 93       	st	X, r24
    36ae:	27 c0       	rjmp	.+78     	; 0x36fe <DIO_SetPinDirection+0x100>
		break;

		case DDRC:
			set_bit(DDRC_REG , DIO_PINID) ;
    36b0:	a4 e3       	ldi	r26, 0x34	; 52
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	e4 e3       	ldi	r30, 0x34	; 52
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	48 2f       	mov	r20, r24
    36bc:	8a 81       	ldd	r24, Y+2	; 0x02
    36be:	28 2f       	mov	r18, r24
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	02 2e       	mov	r0, r18
    36c8:	02 c0       	rjmp	.+4      	; 0x36ce <DIO_SetPinDirection+0xd0>
    36ca:	88 0f       	add	r24, r24
    36cc:	99 1f       	adc	r25, r25
    36ce:	0a 94       	dec	r0
    36d0:	e2 f7       	brpl	.-8      	; 0x36ca <DIO_SetPinDirection+0xcc>
    36d2:	84 2b       	or	r24, r20
    36d4:	8c 93       	st	X, r24
    36d6:	13 c0       	rjmp	.+38     	; 0x36fe <DIO_SetPinDirection+0x100>
		break;

		case DDRD:
			set_bit(DDRD_REG , DIO_PINID) ;
    36d8:	a1 e3       	ldi	r26, 0x31	; 49
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	e1 e3       	ldi	r30, 0x31	; 49
    36de:	f0 e0       	ldi	r31, 0x00	; 0
    36e0:	80 81       	ld	r24, Z
    36e2:	48 2f       	mov	r20, r24
    36e4:	8a 81       	ldd	r24, Y+2	; 0x02
    36e6:	28 2f       	mov	r18, r24
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	02 2e       	mov	r0, r18
    36f0:	02 c0       	rjmp	.+4      	; 0x36f6 <DIO_SetPinDirection+0xf8>
    36f2:	88 0f       	add	r24, r24
    36f4:	99 1f       	adc	r25, r25
    36f6:	0a 94       	dec	r0
    36f8:	e2 f7       	brpl	.-8      	; 0x36f2 <DIO_SetPinDirection+0xf4>
    36fa:	84 2b       	or	r24, r20
    36fc:	8c 93       	st	X, r24

		}

	}

	if (DIO_PINIO == INPUT)
    36fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3700:	88 23       	and	r24, r24
    3702:	09 f0       	breq	.+2      	; 0x3706 <DIO_SetPinDirection+0x108>
    3704:	74 c0       	rjmp	.+232    	; 0x37ee <DIO_SetPinDirection+0x1f0>
	{
		switch(DIO_DDRID)
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	28 2f       	mov	r18, r24
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	3d 83       	std	Y+5, r19	; 0x05
    370e:	2c 83       	std	Y+4, r18	; 0x04
    3710:	8c 81       	ldd	r24, Y+4	; 0x04
    3712:	9d 81       	ldd	r25, Y+5	; 0x05
    3714:	85 30       	cpi	r24, 0x05	; 5
    3716:	91 05       	cpc	r25, r1
    3718:	61 f1       	breq	.+88     	; 0x3772 <DIO_SetPinDirection+0x174>
    371a:	2c 81       	ldd	r18, Y+4	; 0x04
    371c:	3d 81       	ldd	r19, Y+5	; 0x05
    371e:	26 30       	cpi	r18, 0x06	; 6
    3720:	31 05       	cpc	r19, r1
    3722:	34 f4       	brge	.+12     	; 0x3730 <DIO_SetPinDirection+0x132>
    3724:	8c 81       	ldd	r24, Y+4	; 0x04
    3726:	9d 81       	ldd	r25, Y+5	; 0x05
    3728:	84 30       	cpi	r24, 0x04	; 4
    372a:	91 05       	cpc	r25, r1
    372c:	69 f0       	breq	.+26     	; 0x3748 <DIO_SetPinDirection+0x14a>
    372e:	5f c0       	rjmp	.+190    	; 0x37ee <DIO_SetPinDirection+0x1f0>
    3730:	2c 81       	ldd	r18, Y+4	; 0x04
    3732:	3d 81       	ldd	r19, Y+5	; 0x05
    3734:	26 30       	cpi	r18, 0x06	; 6
    3736:	31 05       	cpc	r19, r1
    3738:	89 f1       	breq	.+98     	; 0x379c <DIO_SetPinDirection+0x19e>
    373a:	8c 81       	ldd	r24, Y+4	; 0x04
    373c:	9d 81       	ldd	r25, Y+5	; 0x05
    373e:	87 30       	cpi	r24, 0x07	; 7
    3740:	91 05       	cpc	r25, r1
    3742:	09 f4       	brne	.+2      	; 0x3746 <DIO_SetPinDirection+0x148>
    3744:	40 c0       	rjmp	.+128    	; 0x37c6 <DIO_SetPinDirection+0x1c8>
    3746:	53 c0       	rjmp	.+166    	; 0x37ee <DIO_SetPinDirection+0x1f0>
		{
			case DDRA:
				clr_bit(DDRA_REG , DIO_PINID);
    3748:	aa e3       	ldi	r26, 0x3A	; 58
    374a:	b0 e0       	ldi	r27, 0x00	; 0
    374c:	ea e3       	ldi	r30, 0x3A	; 58
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	80 81       	ld	r24, Z
    3752:	48 2f       	mov	r20, r24
    3754:	8a 81       	ldd	r24, Y+2	; 0x02
    3756:	28 2f       	mov	r18, r24
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	02 2e       	mov	r0, r18
    3760:	02 c0       	rjmp	.+4      	; 0x3766 <DIO_SetPinDirection+0x168>
    3762:	88 0f       	add	r24, r24
    3764:	99 1f       	adc	r25, r25
    3766:	0a 94       	dec	r0
    3768:	e2 f7       	brpl	.-8      	; 0x3762 <DIO_SetPinDirection+0x164>
    376a:	80 95       	com	r24
    376c:	84 23       	and	r24, r20
    376e:	8c 93       	st	X, r24
    3770:	3e c0       	rjmp	.+124    	; 0x37ee <DIO_SetPinDirection+0x1f0>
			break;

			case DDRB:
				clr_bit(DDRB_REG , DIO_PINID) ;
    3772:	a7 e3       	ldi	r26, 0x37	; 55
    3774:	b0 e0       	ldi	r27, 0x00	; 0
    3776:	e7 e3       	ldi	r30, 0x37	; 55
    3778:	f0 e0       	ldi	r31, 0x00	; 0
    377a:	80 81       	ld	r24, Z
    377c:	48 2f       	mov	r20, r24
    377e:	8a 81       	ldd	r24, Y+2	; 0x02
    3780:	28 2f       	mov	r18, r24
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	02 2e       	mov	r0, r18
    378a:	02 c0       	rjmp	.+4      	; 0x3790 <DIO_SetPinDirection+0x192>
    378c:	88 0f       	add	r24, r24
    378e:	99 1f       	adc	r25, r25
    3790:	0a 94       	dec	r0
    3792:	e2 f7       	brpl	.-8      	; 0x378c <DIO_SetPinDirection+0x18e>
    3794:	80 95       	com	r24
    3796:	84 23       	and	r24, r20
    3798:	8c 93       	st	X, r24
    379a:	29 c0       	rjmp	.+82     	; 0x37ee <DIO_SetPinDirection+0x1f0>
			break;

			case DDRC:
				clr_bit(DDRC_REG , DIO_PINID) ;
    379c:	a4 e3       	ldi	r26, 0x34	; 52
    379e:	b0 e0       	ldi	r27, 0x00	; 0
    37a0:	e4 e3       	ldi	r30, 0x34	; 52
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	80 81       	ld	r24, Z
    37a6:	48 2f       	mov	r20, r24
    37a8:	8a 81       	ldd	r24, Y+2	; 0x02
    37aa:	28 2f       	mov	r18, r24
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	02 2e       	mov	r0, r18
    37b4:	02 c0       	rjmp	.+4      	; 0x37ba <DIO_SetPinDirection+0x1bc>
    37b6:	88 0f       	add	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	0a 94       	dec	r0
    37bc:	e2 f7       	brpl	.-8      	; 0x37b6 <DIO_SetPinDirection+0x1b8>
    37be:	80 95       	com	r24
    37c0:	84 23       	and	r24, r20
    37c2:	8c 93       	st	X, r24
    37c4:	14 c0       	rjmp	.+40     	; 0x37ee <DIO_SetPinDirection+0x1f0>
			break;

			case DDRD:
				clr_bit(DDRD_REG , DIO_PINID) ;
    37c6:	a1 e3       	ldi	r26, 0x31	; 49
    37c8:	b0 e0       	ldi	r27, 0x00	; 0
    37ca:	e1 e3       	ldi	r30, 0x31	; 49
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	80 81       	ld	r24, Z
    37d0:	48 2f       	mov	r20, r24
    37d2:	8a 81       	ldd	r24, Y+2	; 0x02
    37d4:	28 2f       	mov	r18, r24
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	02 2e       	mov	r0, r18
    37de:	02 c0       	rjmp	.+4      	; 0x37e4 <DIO_SetPinDirection+0x1e6>
    37e0:	88 0f       	add	r24, r24
    37e2:	99 1f       	adc	r25, r25
    37e4:	0a 94       	dec	r0
    37e6:	e2 f7       	brpl	.-8      	; 0x37e0 <DIO_SetPinDirection+0x1e2>
    37e8:	80 95       	com	r24
    37ea:	84 23       	and	r24, r20
    37ec:	8c 93       	st	X, r24
			break;

		}

	}
}
    37ee:	27 96       	adiw	r28, 0x07	; 7
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	cd bf       	out	0x3d, r28	; 61
    37fa:	cf 91       	pop	r28
    37fc:	df 91       	pop	r29
    37fe:	08 95       	ret

00003800 <DIO_GetPinValue>:

u8 DIO_GetPinValue (u8 DIO_PIN , u8 DIO_PINID)
{
    3800:	df 93       	push	r29
    3802:	cf 93       	push	r28
    3804:	00 d0       	rcall	.+0      	; 0x3806 <DIO_GetPinValue+0x6>
    3806:	00 d0       	rcall	.+0      	; 0x3808 <DIO_GetPinValue+0x8>
    3808:	0f 92       	push	r0
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
    380e:	8a 83       	std	Y+2, r24	; 0x02
    3810:	6b 83       	std	Y+3, r22	; 0x03
	u8 value_read ;

	switch(DIO_PIN)
    3812:	8a 81       	ldd	r24, Y+2	; 0x02
    3814:	28 2f       	mov	r18, r24
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	3d 83       	std	Y+5, r19	; 0x05
    381a:	2c 83       	std	Y+4, r18	; 0x04
    381c:	4c 81       	ldd	r20, Y+4	; 0x04
    381e:	5d 81       	ldd	r21, Y+5	; 0x05
    3820:	41 30       	cpi	r20, 0x01	; 1
    3822:	51 05       	cpc	r21, r1
    3824:	41 f1       	breq	.+80     	; 0x3876 <DIO_GetPinValue+0x76>
    3826:	8c 81       	ldd	r24, Y+4	; 0x04
    3828:	9d 81       	ldd	r25, Y+5	; 0x05
    382a:	82 30       	cpi	r24, 0x02	; 2
    382c:	91 05       	cpc	r25, r1
    382e:	34 f4       	brge	.+12     	; 0x383c <DIO_GetPinValue+0x3c>
    3830:	2c 81       	ldd	r18, Y+4	; 0x04
    3832:	3d 81       	ldd	r19, Y+5	; 0x05
    3834:	21 15       	cp	r18, r1
    3836:	31 05       	cpc	r19, r1
    3838:	61 f0       	breq	.+24     	; 0x3852 <DIO_GetPinValue+0x52>
    383a:	52 c0       	rjmp	.+164    	; 0x38e0 <DIO_GetPinValue+0xe0>
    383c:	4c 81       	ldd	r20, Y+4	; 0x04
    383e:	5d 81       	ldd	r21, Y+5	; 0x05
    3840:	42 30       	cpi	r20, 0x02	; 2
    3842:	51 05       	cpc	r21, r1
    3844:	51 f1       	breq	.+84     	; 0x389a <DIO_GetPinValue+0x9a>
    3846:	8c 81       	ldd	r24, Y+4	; 0x04
    3848:	9d 81       	ldd	r25, Y+5	; 0x05
    384a:	83 30       	cpi	r24, 0x03	; 3
    384c:	91 05       	cpc	r25, r1
    384e:	b9 f1       	breq	.+110    	; 0x38be <DIO_GetPinValue+0xbe>
    3850:	47 c0       	rjmp	.+142    	; 0x38e0 <DIO_GetPinValue+0xe0>
	{

	case PINA :
		value_read = read_bit(PINA_REG , DIO_PINID);
    3852:	e9 e3       	ldi	r30, 0x39	; 57
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	80 81       	ld	r24, Z
    3858:	28 2f       	mov	r18, r24
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	8b 81       	ldd	r24, Y+3	; 0x03
    385e:	88 2f       	mov	r24, r24
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	a9 01       	movw	r20, r18
    3864:	02 c0       	rjmp	.+4      	; 0x386a <DIO_GetPinValue+0x6a>
    3866:	55 95       	asr	r21
    3868:	47 95       	ror	r20
    386a:	8a 95       	dec	r24
    386c:	e2 f7       	brpl	.-8      	; 0x3866 <DIO_GetPinValue+0x66>
    386e:	ca 01       	movw	r24, r20
    3870:	81 70       	andi	r24, 0x01	; 1
    3872:	89 83       	std	Y+1, r24	; 0x01
    3874:	35 c0       	rjmp	.+106    	; 0x38e0 <DIO_GetPinValue+0xe0>
	break;

	case PINB :
	value_read = read_bit(PINB_REG , DIO_PINID) ;
    3876:	e6 e3       	ldi	r30, 0x36	; 54
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	28 2f       	mov	r18, r24
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	88 2f       	mov	r24, r24
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	a9 01       	movw	r20, r18
    3888:	02 c0       	rjmp	.+4      	; 0x388e <DIO_GetPinValue+0x8e>
    388a:	55 95       	asr	r21
    388c:	47 95       	ror	r20
    388e:	8a 95       	dec	r24
    3890:	e2 f7       	brpl	.-8      	; 0x388a <DIO_GetPinValue+0x8a>
    3892:	ca 01       	movw	r24, r20
    3894:	81 70       	andi	r24, 0x01	; 1
    3896:	89 83       	std	Y+1, r24	; 0x01
    3898:	23 c0       	rjmp	.+70     	; 0x38e0 <DIO_GetPinValue+0xe0>

	break;

	case PINC:
	value_read = read_bit(PINC_REG , DIO_PINID) ;
    389a:	e3 e3       	ldi	r30, 0x33	; 51
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	80 81       	ld	r24, Z
    38a0:	28 2f       	mov	r18, r24
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	8b 81       	ldd	r24, Y+3	; 0x03
    38a6:	88 2f       	mov	r24, r24
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	a9 01       	movw	r20, r18
    38ac:	02 c0       	rjmp	.+4      	; 0x38b2 <DIO_GetPinValue+0xb2>
    38ae:	55 95       	asr	r21
    38b0:	47 95       	ror	r20
    38b2:	8a 95       	dec	r24
    38b4:	e2 f7       	brpl	.-8      	; 0x38ae <DIO_GetPinValue+0xae>
    38b6:	ca 01       	movw	r24, r20
    38b8:	81 70       	andi	r24, 0x01	; 1
    38ba:	89 83       	std	Y+1, r24	; 0x01
    38bc:	11 c0       	rjmp	.+34     	; 0x38e0 <DIO_GetPinValue+0xe0>
	break;

	case PIND:
	value_read = read_bit(PIND_REG ,DIO_PINID) ;
    38be:	e0 e3       	ldi	r30, 0x30	; 48
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	80 81       	ld	r24, Z
    38c4:	28 2f       	mov	r18, r24
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ca:	88 2f       	mov	r24, r24
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	a9 01       	movw	r20, r18
    38d0:	02 c0       	rjmp	.+4      	; 0x38d6 <DIO_GetPinValue+0xd6>
    38d2:	55 95       	asr	r21
    38d4:	47 95       	ror	r20
    38d6:	8a 95       	dec	r24
    38d8:	e2 f7       	brpl	.-8      	; 0x38d2 <DIO_GetPinValue+0xd2>
    38da:	ca 01       	movw	r24, r20
    38dc:	81 70       	andi	r24, 0x01	; 1
    38de:	89 83       	std	Y+1, r24	; 0x01
	break;

	}

	return value_read ;
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    38e2:	0f 90       	pop	r0
    38e4:	0f 90       	pop	r0
    38e6:	0f 90       	pop	r0
    38e8:	0f 90       	pop	r0
    38ea:	0f 90       	pop	r0
    38ec:	cf 91       	pop	r28
    38ee:	df 91       	pop	r29
    38f0:	08 95       	ret

000038f2 <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 DIO_DDRID , u8 DIO_PortValue)
{
    38f2:	df 93       	push	r29
    38f4:	cf 93       	push	r28
    38f6:	00 d0       	rcall	.+0      	; 0x38f8 <DIO_SetPortDirection+0x6>
    38f8:	00 d0       	rcall	.+0      	; 0x38fa <DIO_SetPortDirection+0x8>
    38fa:	00 d0       	rcall	.+0      	; 0x38fc <DIO_SetPortDirection+0xa>
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	89 83       	std	Y+1, r24	; 0x01
    3902:	6a 83       	std	Y+2, r22	; 0x02

		switch(DIO_DDRID)
    3904:	89 81       	ldd	r24, Y+1	; 0x01
    3906:	28 2f       	mov	r18, r24
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	3e 83       	std	Y+6, r19	; 0x06
    390c:	2d 83       	std	Y+5, r18	; 0x05
    390e:	8d 81       	ldd	r24, Y+5	; 0x05
    3910:	9e 81       	ldd	r25, Y+6	; 0x06
    3912:	85 30       	cpi	r24, 0x05	; 5
    3914:	91 05       	cpc	r25, r1
    3916:	d9 f0       	breq	.+54     	; 0x394e <DIO_SetPortDirection+0x5c>
    3918:	2d 81       	ldd	r18, Y+5	; 0x05
    391a:	3e 81       	ldd	r19, Y+6	; 0x06
    391c:	26 30       	cpi	r18, 0x06	; 6
    391e:	31 05       	cpc	r19, r1
    3920:	34 f4       	brge	.+12     	; 0x392e <DIO_SetPortDirection+0x3c>
    3922:	8d 81       	ldd	r24, Y+5	; 0x05
    3924:	9e 81       	ldd	r25, Y+6	; 0x06
    3926:	84 30       	cpi	r24, 0x04	; 4
    3928:	91 05       	cpc	r25, r1
    392a:	61 f0       	breq	.+24     	; 0x3944 <DIO_SetPortDirection+0x52>
    392c:	1e c0       	rjmp	.+60     	; 0x396a <DIO_SetPortDirection+0x78>
    392e:	2d 81       	ldd	r18, Y+5	; 0x05
    3930:	3e 81       	ldd	r19, Y+6	; 0x06
    3932:	26 30       	cpi	r18, 0x06	; 6
    3934:	31 05       	cpc	r19, r1
    3936:	81 f0       	breq	.+32     	; 0x3958 <DIO_SetPortDirection+0x66>
    3938:	8d 81       	ldd	r24, Y+5	; 0x05
    393a:	9e 81       	ldd	r25, Y+6	; 0x06
    393c:	87 30       	cpi	r24, 0x07	; 7
    393e:	91 05       	cpc	r25, r1
    3940:	81 f0       	breq	.+32     	; 0x3962 <DIO_SetPortDirection+0x70>
    3942:	13 c0       	rjmp	.+38     	; 0x396a <DIO_SetPortDirection+0x78>
		{
		case DDRA:
			DDRA_REG = DIO_PortValue ;
    3944:	ea e3       	ldi	r30, 0x3A	; 58
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	8a 81       	ldd	r24, Y+2	; 0x02
    394a:	80 83       	st	Z, r24
    394c:	0e c0       	rjmp	.+28     	; 0x396a <DIO_SetPortDirection+0x78>
		break ;

		case DDRB:
			DDRB_REG = DIO_PortValue ;
    394e:	e7 e3       	ldi	r30, 0x37	; 55
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	8a 81       	ldd	r24, Y+2	; 0x02
    3954:	80 83       	st	Z, r24
    3956:	09 c0       	rjmp	.+18     	; 0x396a <DIO_SetPortDirection+0x78>
		break ;

		case DDRC:
			DDRC_REG = DIO_PortValue ;
    3958:	e4 e3       	ldi	r30, 0x34	; 52
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	8a 81       	ldd	r24, Y+2	; 0x02
    395e:	80 83       	st	Z, r24
    3960:	04 c0       	rjmp	.+8      	; 0x396a <DIO_SetPortDirection+0x78>
		break ;

		case DDRD:
			DDRD_REG = DIO_PortValue ;
    3962:	e1 e3       	ldi	r30, 0x31	; 49
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	8a 81       	ldd	r24, Y+2	; 0x02
    3968:	80 83       	st	Z, r24
		break ;

		}

		switch(DIO_DDRID)
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	28 2f       	mov	r18, r24
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	3c 83       	std	Y+4, r19	; 0x04
    3972:	2b 83       	std	Y+3, r18	; 0x03
    3974:	8b 81       	ldd	r24, Y+3	; 0x03
    3976:	9c 81       	ldd	r25, Y+4	; 0x04
    3978:	85 30       	cpi	r24, 0x05	; 5
    397a:	91 05       	cpc	r25, r1
    397c:	d9 f0       	breq	.+54     	; 0x39b4 <DIO_SetPortDirection+0xc2>
    397e:	2b 81       	ldd	r18, Y+3	; 0x03
    3980:	3c 81       	ldd	r19, Y+4	; 0x04
    3982:	26 30       	cpi	r18, 0x06	; 6
    3984:	31 05       	cpc	r19, r1
    3986:	34 f4       	brge	.+12     	; 0x3994 <DIO_SetPortDirection+0xa2>
    3988:	8b 81       	ldd	r24, Y+3	; 0x03
    398a:	9c 81       	ldd	r25, Y+4	; 0x04
    398c:	84 30       	cpi	r24, 0x04	; 4
    398e:	91 05       	cpc	r25, r1
    3990:	61 f0       	breq	.+24     	; 0x39aa <DIO_SetPortDirection+0xb8>
    3992:	1e c0       	rjmp	.+60     	; 0x39d0 <DIO_SetPortDirection+0xde>
    3994:	2b 81       	ldd	r18, Y+3	; 0x03
    3996:	3c 81       	ldd	r19, Y+4	; 0x04
    3998:	26 30       	cpi	r18, 0x06	; 6
    399a:	31 05       	cpc	r19, r1
    399c:	81 f0       	breq	.+32     	; 0x39be <DIO_SetPortDirection+0xcc>
    399e:	8b 81       	ldd	r24, Y+3	; 0x03
    39a0:	9c 81       	ldd	r25, Y+4	; 0x04
    39a2:	87 30       	cpi	r24, 0x07	; 7
    39a4:	91 05       	cpc	r25, r1
    39a6:	81 f0       	breq	.+32     	; 0x39c8 <DIO_SetPortDirection+0xd6>
    39a8:	13 c0       	rjmp	.+38     	; 0x39d0 <DIO_SetPortDirection+0xde>
		{
		case DDRA:
			DDRA_REG =DIO_PortValue ;
    39aa:	ea e3       	ldi	r30, 0x3A	; 58
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	8a 81       	ldd	r24, Y+2	; 0x02
    39b0:	80 83       	st	Z, r24
    39b2:	0e c0       	rjmp	.+28     	; 0x39d0 <DIO_SetPortDirection+0xde>
		break ;

		case DDRB:
			DDRB_REG = DIO_PortValue ;
    39b4:	e7 e3       	ldi	r30, 0x37	; 55
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ba:	80 83       	st	Z, r24
    39bc:	09 c0       	rjmp	.+18     	; 0x39d0 <DIO_SetPortDirection+0xde>
		break ;

		case DDRC:
			DDRC_REG = DIO_PortValue ;
    39be:	e4 e3       	ldi	r30, 0x34	; 52
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	8a 81       	ldd	r24, Y+2	; 0x02
    39c4:	80 83       	st	Z, r24
    39c6:	04 c0       	rjmp	.+8      	; 0x39d0 <DIO_SetPortDirection+0xde>
		break ;

		case DDRD:
			DDRD_REG = DIO_PortValue ;
    39c8:	e1 e3       	ldi	r30, 0x31	; 49
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	8a 81       	ldd	r24, Y+2	; 0x02
    39ce:	80 83       	st	Z, r24
		break ;
	   }
}
    39d0:	26 96       	adiw	r28, 0x06	; 6
    39d2:	0f b6       	in	r0, 0x3f	; 63
    39d4:	f8 94       	cli
    39d6:	de bf       	out	0x3e, r29	; 62
    39d8:	0f be       	out	0x3f, r0	; 63
    39da:	cd bf       	out	0x3d, r28	; 61
    39dc:	cf 91       	pop	r28
    39de:	df 91       	pop	r29
    39e0:	08 95       	ret

000039e2 <DIO_SetPortValue>:

void DIO_SetPortValue(u8 DIO_PORTID , u8 DIO_PortValue)
{
    39e2:	df 93       	push	r29
    39e4:	cf 93       	push	r28
    39e6:	00 d0       	rcall	.+0      	; 0x39e8 <DIO_SetPortValue+0x6>
    39e8:	00 d0       	rcall	.+0      	; 0x39ea <DIO_SetPortValue+0x8>
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    39ee:	89 83       	std	Y+1, r24	; 0x01
    39f0:	6a 83       	std	Y+2, r22	; 0x02

		switch(DIO_PORTID)
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	28 2f       	mov	r18, r24
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	3c 83       	std	Y+4, r19	; 0x04
    39fa:	2b 83       	std	Y+3, r18	; 0x03
    39fc:	8b 81       	ldd	r24, Y+3	; 0x03
    39fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3a00:	81 30       	cpi	r24, 0x01	; 1
    3a02:	91 05       	cpc	r25, r1
    3a04:	d1 f0       	breq	.+52     	; 0x3a3a <DIO_SetPortValue+0x58>
    3a06:	2b 81       	ldd	r18, Y+3	; 0x03
    3a08:	3c 81       	ldd	r19, Y+4	; 0x04
    3a0a:	22 30       	cpi	r18, 0x02	; 2
    3a0c:	31 05       	cpc	r19, r1
    3a0e:	2c f4       	brge	.+10     	; 0x3a1a <DIO_SetPortValue+0x38>
    3a10:	8b 81       	ldd	r24, Y+3	; 0x03
    3a12:	9c 81       	ldd	r25, Y+4	; 0x04
    3a14:	00 97       	sbiw	r24, 0x00	; 0
    3a16:	61 f0       	breq	.+24     	; 0x3a30 <DIO_SetPortValue+0x4e>
    3a18:	1e c0       	rjmp	.+60     	; 0x3a56 <DIO_SetPortValue+0x74>
    3a1a:	2b 81       	ldd	r18, Y+3	; 0x03
    3a1c:	3c 81       	ldd	r19, Y+4	; 0x04
    3a1e:	22 30       	cpi	r18, 0x02	; 2
    3a20:	31 05       	cpc	r19, r1
    3a22:	81 f0       	breq	.+32     	; 0x3a44 <DIO_SetPortValue+0x62>
    3a24:	8b 81       	ldd	r24, Y+3	; 0x03
    3a26:	9c 81       	ldd	r25, Y+4	; 0x04
    3a28:	83 30       	cpi	r24, 0x03	; 3
    3a2a:	91 05       	cpc	r25, r1
    3a2c:	81 f0       	breq	.+32     	; 0x3a4e <DIO_SetPortValue+0x6c>
    3a2e:	13 c0       	rjmp	.+38     	; 0x3a56 <DIO_SetPortValue+0x74>
		{

		case PORTA:
			PORTA_REG = DIO_PortValue ;
    3a30:	eb e3       	ldi	r30, 0x3B	; 59
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	8a 81       	ldd	r24, Y+2	; 0x02
    3a36:	80 83       	st	Z, r24
    3a38:	0e c0       	rjmp	.+28     	; 0x3a56 <DIO_SetPortValue+0x74>
		break ;

		case PORTB:
			PORTB_REG = DIO_PortValue ;
    3a3a:	e8 e3       	ldi	r30, 0x38	; 56
    3a3c:	f0 e0       	ldi	r31, 0x00	; 0
    3a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a40:	80 83       	st	Z, r24
    3a42:	09 c0       	rjmp	.+18     	; 0x3a56 <DIO_SetPortValue+0x74>
		break ;

		case PORTC:
			PORTC_REG = DIO_PortValue ;
    3a44:	e5 e3       	ldi	r30, 0x35	; 53
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4a:	80 83       	st	Z, r24
    3a4c:	04 c0       	rjmp	.+8      	; 0x3a56 <DIO_SetPortValue+0x74>
		break ;

		case PORTD:
			PORTD_REG = DIO_PortValue ;
    3a4e:	e2 e3       	ldi	r30, 0x32	; 50
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	8a 81       	ldd	r24, Y+2	; 0x02
    3a54:	80 83       	st	Z, r24
		break ;

		}

}
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	cf 91       	pop	r28
    3a60:	df 91       	pop	r29
    3a62:	08 95       	ret

00003a64 <LCD_voidInit>:
#include <avr\delay.h>


// initialization function : use it in the beginning of any lcd program
void LCD_voidInit(void)
{
    3a64:	0f 93       	push	r16
    3a66:	1f 93       	push	r17
    3a68:	df 93       	push	r29
    3a6a:	cf 93       	push	r28
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	c6 54       	subi	r28, 0x46	; 70
    3a72:	d0 40       	sbci	r29, 0x00	; 0
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	fe 01       	movw	r30, r28
    3a80:	ed 5b       	subi	r30, 0xBD	; 189
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	a0 e2       	ldi	r26, 0x20	; 32
    3a8a:	b2 e4       	ldi	r27, 0x42	; 66
    3a8c:	80 83       	st	Z, r24
    3a8e:	91 83       	std	Z+1, r25	; 0x01
    3a90:	a2 83       	std	Z+2, r26	; 0x02
    3a92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a94:	8e 01       	movw	r16, r28
    3a96:	01 5c       	subi	r16, 0xC1	; 193
    3a98:	1f 4f       	sbci	r17, 0xFF	; 255
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	ed 5b       	subi	r30, 0xBD	; 189
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	60 81       	ld	r22, Z
    3aa2:	71 81       	ldd	r23, Z+1	; 0x01
    3aa4:	82 81       	ldd	r24, Z+2	; 0x02
    3aa6:	93 81       	ldd	r25, Z+3	; 0x03
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	4a ef       	ldi	r20, 0xFA	; 250
    3aae:	54 e4       	ldi	r21, 0x44	; 68
    3ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	f8 01       	movw	r30, r16
    3aba:	80 83       	st	Z, r24
    3abc:	91 83       	std	Z+1, r25	; 0x01
    3abe:	a2 83       	std	Z+2, r26	; 0x02
    3ac0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	ff 96       	adiw	r30, 0x3f	; 63
    3ac6:	60 81       	ld	r22, Z
    3ac8:	71 81       	ldd	r23, Z+1	; 0x01
    3aca:	82 81       	ldd	r24, Z+2	; 0x02
    3acc:	93 81       	ldd	r25, Z+3	; 0x03
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	40 e8       	ldi	r20, 0x80	; 128
    3ad4:	5f e3       	ldi	r21, 0x3F	; 63
    3ad6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ada:	88 23       	and	r24, r24
    3adc:	2c f4       	brge	.+10     	; 0x3ae8 <LCD_voidInit+0x84>
		__ticks = 1;
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	9e af       	std	Y+62, r25	; 0x3e
    3ae4:	8d af       	std	Y+61, r24	; 0x3d
    3ae6:	46 c0       	rjmp	.+140    	; 0x3b74 <LCD_voidInit+0x110>
	else if (__tmp > 65535)
    3ae8:	fe 01       	movw	r30, r28
    3aea:	ff 96       	adiw	r30, 0x3f	; 63
    3aec:	60 81       	ld	r22, Z
    3aee:	71 81       	ldd	r23, Z+1	; 0x01
    3af0:	82 81       	ldd	r24, Z+2	; 0x02
    3af2:	93 81       	ldd	r25, Z+3	; 0x03
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	3f ef       	ldi	r19, 0xFF	; 255
    3af8:	4f e7       	ldi	r20, 0x7F	; 127
    3afa:	57 e4       	ldi	r21, 0x47	; 71
    3afc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b00:	18 16       	cp	r1, r24
    3b02:	64 f5       	brge	.+88     	; 0x3b5c <LCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b04:	fe 01       	movw	r30, r28
    3b06:	ed 5b       	subi	r30, 0xBD	; 189
    3b08:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0a:	60 81       	ld	r22, Z
    3b0c:	71 81       	ldd	r23, Z+1	; 0x01
    3b0e:	82 81       	ldd	r24, Z+2	; 0x02
    3b10:	93 81       	ldd	r25, Z+3	; 0x03
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	40 e2       	ldi	r20, 0x20	; 32
    3b18:	51 e4       	ldi	r21, 0x41	; 65
    3b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	bc 01       	movw	r22, r24
    3b24:	cd 01       	movw	r24, r26
    3b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	9e af       	std	Y+62, r25	; 0x3e
    3b30:	8d af       	std	Y+61, r24	; 0x3d
    3b32:	0f c0       	rjmp	.+30     	; 0x3b52 <LCD_voidInit+0xee>
    3b34:	88 ec       	ldi	r24, 0xC8	; 200
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	9c af       	std	Y+60, r25	; 0x3c
    3b3a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b3c:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b3e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b40:	01 97       	sbiw	r24, 0x01	; 1
    3b42:	f1 f7       	brne	.-4      	; 0x3b40 <LCD_voidInit+0xdc>
    3b44:	9c af       	std	Y+60, r25	; 0x3c
    3b46:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b48:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b4c:	01 97       	sbiw	r24, 0x01	; 1
    3b4e:	9e af       	std	Y+62, r25	; 0x3e
    3b50:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b52:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b54:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b56:	00 97       	sbiw	r24, 0x00	; 0
    3b58:	69 f7       	brne	.-38     	; 0x3b34 <LCD_voidInit+0xd0>
    3b5a:	16 c0       	rjmp	.+44     	; 0x3b88 <LCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	ff 96       	adiw	r30, 0x3f	; 63
    3b60:	60 81       	ld	r22, Z
    3b62:	71 81       	ldd	r23, Z+1	; 0x01
    3b64:	82 81       	ldd	r24, Z+2	; 0x02
    3b66:	93 81       	ldd	r25, Z+3	; 0x03
    3b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	9e af       	std	Y+62, r25	; 0x3e
    3b72:	8d af       	std	Y+61, r24	; 0x3d
    3b74:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b76:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b78:	9a af       	std	Y+58, r25	; 0x3a
    3b7a:	89 af       	std	Y+57, r24	; 0x39
    3b7c:	89 ad       	ldd	r24, Y+57	; 0x39
    3b7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b80:	01 97       	sbiw	r24, 0x01	; 1
    3b82:	f1 f7       	brne	.-4      	; 0x3b80 <LCD_voidInit+0x11c>
    3b84:	9a af       	std	Y+58, r25	; 0x3a
    3b86:	89 af       	std	Y+57, r24	; 0x39
	// wait for more than 30 ms
	_delay_ms(40);

	// function set command (8bit mode -- 2 lines -- 5*7)
	LCD_voidSendCommand (0b00111000);
    3b88:	88 e3       	ldi	r24, 0x38	; 56
    3b8a:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <LCD_voidSendCommand>
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	a0 e8       	ldi	r26, 0x80	; 128
    3b94:	bf e3       	ldi	r27, 0x3F	; 63
    3b96:	8d ab       	std	Y+53, r24	; 0x35
    3b98:	9e ab       	std	Y+54, r25	; 0x36
    3b9a:	af ab       	std	Y+55, r26	; 0x37
    3b9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9e:	6d a9       	ldd	r22, Y+53	; 0x35
    3ba0:	7e a9       	ldd	r23, Y+54	; 0x36
    3ba2:	8f a9       	ldd	r24, Y+55	; 0x37
    3ba4:	98 ad       	ldd	r25, Y+56	; 0x38
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	4a ef       	ldi	r20, 0xFA	; 250
    3bac:	54 e4       	ldi	r21, 0x44	; 68
    3bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	89 ab       	std	Y+49, r24	; 0x31
    3bb8:	9a ab       	std	Y+50, r25	; 0x32
    3bba:	ab ab       	std	Y+51, r26	; 0x33
    3bbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3bbe:	69 a9       	ldd	r22, Y+49	; 0x31
    3bc0:	7a a9       	ldd	r23, Y+50	; 0x32
    3bc2:	8b a9       	ldd	r24, Y+51	; 0x33
    3bc4:	9c a9       	ldd	r25, Y+52	; 0x34
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	40 e8       	ldi	r20, 0x80	; 128
    3bcc:	5f e3       	ldi	r21, 0x3F	; 63
    3bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bd2:	88 23       	and	r24, r24
    3bd4:	2c f4       	brge	.+10     	; 0x3be0 <LCD_voidInit+0x17c>
		__ticks = 1;
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	98 ab       	std	Y+48, r25	; 0x30
    3bdc:	8f a7       	std	Y+47, r24	; 0x2f
    3bde:	3f c0       	rjmp	.+126    	; 0x3c5e <LCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    3be0:	69 a9       	ldd	r22, Y+49	; 0x31
    3be2:	7a a9       	ldd	r23, Y+50	; 0x32
    3be4:	8b a9       	ldd	r24, Y+51	; 0x33
    3be6:	9c a9       	ldd	r25, Y+52	; 0x34
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	3f ef       	ldi	r19, 0xFF	; 255
    3bec:	4f e7       	ldi	r20, 0x7F	; 127
    3bee:	57 e4       	ldi	r21, 0x47	; 71
    3bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bf4:	18 16       	cp	r1, r24
    3bf6:	4c f5       	brge	.+82     	; 0x3c4a <LCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf8:	6d a9       	ldd	r22, Y+53	; 0x35
    3bfa:	7e a9       	ldd	r23, Y+54	; 0x36
    3bfc:	8f a9       	ldd	r24, Y+55	; 0x37
    3bfe:	98 ad       	ldd	r25, Y+56	; 0x38
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	40 e2       	ldi	r20, 0x20	; 32
    3c06:	51 e4       	ldi	r21, 0x41	; 65
    3c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	bc 01       	movw	r22, r24
    3c12:	cd 01       	movw	r24, r26
    3c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	98 ab       	std	Y+48, r25	; 0x30
    3c1e:	8f a7       	std	Y+47, r24	; 0x2f
    3c20:	0f c0       	rjmp	.+30     	; 0x3c40 <LCD_voidInit+0x1dc>
    3c22:	88 ec       	ldi	r24, 0xC8	; 200
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	9e a7       	std	Y+46, r25	; 0x2e
    3c28:	8d a7       	std	Y+45, r24	; 0x2d
    3c2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	f1 f7       	brne	.-4      	; 0x3c2e <LCD_voidInit+0x1ca>
    3c32:	9e a7       	std	Y+46, r25	; 0x2e
    3c34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c36:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c38:	98 a9       	ldd	r25, Y+48	; 0x30
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	98 ab       	std	Y+48, r25	; 0x30
    3c3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c40:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c42:	98 a9       	ldd	r25, Y+48	; 0x30
    3c44:	00 97       	sbiw	r24, 0x00	; 0
    3c46:	69 f7       	brne	.-38     	; 0x3c22 <LCD_voidInit+0x1be>
    3c48:	14 c0       	rjmp	.+40     	; 0x3c72 <LCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c4a:	69 a9       	ldd	r22, Y+49	; 0x31
    3c4c:	7a a9       	ldd	r23, Y+50	; 0x32
    3c4e:	8b a9       	ldd	r24, Y+51	; 0x33
    3c50:	9c a9       	ldd	r25, Y+52	; 0x34
    3c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	98 ab       	std	Y+48, r25	; 0x30
    3c5c:	8f a7       	std	Y+47, r24	; 0x2f
    3c5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c60:	98 a9       	ldd	r25, Y+48	; 0x30
    3c62:	9c a7       	std	Y+44, r25	; 0x2c
    3c64:	8b a7       	std	Y+43, r24	; 0x2b
    3c66:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c68:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	f1 f7       	brne	.-4      	; 0x3c6a <LCD_voidInit+0x206>
    3c6e:	9c a7       	std	Y+44, r25	; 0x2c
    3c70:	8b a7       	std	Y+43, r24	; 0x2b

	//wait for more than 39 us
	_delay_ms(1);

	//display on/off control command (cursor on/off -- cursor blink/not blink)
	LCD_voidSendCommand (0x0c);
    3c72:	8c e0       	ldi	r24, 0x0C	; 12
    3c74:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <LCD_voidSendCommand>
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	a0 e8       	ldi	r26, 0x80	; 128
    3c7e:	bf e3       	ldi	r27, 0x3F	; 63
    3c80:	8f a3       	std	Y+39, r24	; 0x27
    3c82:	98 a7       	std	Y+40, r25	; 0x28
    3c84:	a9 a7       	std	Y+41, r26	; 0x29
    3c86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c88:	6f a1       	ldd	r22, Y+39	; 0x27
    3c8a:	78 a5       	ldd	r23, Y+40	; 0x28
    3c8c:	89 a5       	ldd	r24, Y+41	; 0x29
    3c8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	4a ef       	ldi	r20, 0xFA	; 250
    3c96:	54 e4       	ldi	r21, 0x44	; 68
    3c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	8b a3       	std	Y+35, r24	; 0x23
    3ca2:	9c a3       	std	Y+36, r25	; 0x24
    3ca4:	ad a3       	std	Y+37, r26	; 0x25
    3ca6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ca8:	6b a1       	ldd	r22, Y+35	; 0x23
    3caa:	7c a1       	ldd	r23, Y+36	; 0x24
    3cac:	8d a1       	ldd	r24, Y+37	; 0x25
    3cae:	9e a1       	ldd	r25, Y+38	; 0x26
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	40 e8       	ldi	r20, 0x80	; 128
    3cb6:	5f e3       	ldi	r21, 0x3F	; 63
    3cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cbc:	88 23       	and	r24, r24
    3cbe:	2c f4       	brge	.+10     	; 0x3cca <LCD_voidInit+0x266>
		__ticks = 1;
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	9a a3       	std	Y+34, r25	; 0x22
    3cc6:	89 a3       	std	Y+33, r24	; 0x21
    3cc8:	3f c0       	rjmp	.+126    	; 0x3d48 <LCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    3cca:	6b a1       	ldd	r22, Y+35	; 0x23
    3ccc:	7c a1       	ldd	r23, Y+36	; 0x24
    3cce:	8d a1       	ldd	r24, Y+37	; 0x25
    3cd0:	9e a1       	ldd	r25, Y+38	; 0x26
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	3f ef       	ldi	r19, 0xFF	; 255
    3cd6:	4f e7       	ldi	r20, 0x7F	; 127
    3cd8:	57 e4       	ldi	r21, 0x47	; 71
    3cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cde:	18 16       	cp	r1, r24
    3ce0:	4c f5       	brge	.+82     	; 0x3d34 <LCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce2:	6f a1       	ldd	r22, Y+39	; 0x27
    3ce4:	78 a5       	ldd	r23, Y+40	; 0x28
    3ce6:	89 a5       	ldd	r24, Y+41	; 0x29
    3ce8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	40 e2       	ldi	r20, 0x20	; 32
    3cf0:	51 e4       	ldi	r21, 0x41	; 65
    3cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	bc 01       	movw	r22, r24
    3cfc:	cd 01       	movw	r24, r26
    3cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	9a a3       	std	Y+34, r25	; 0x22
    3d08:	89 a3       	std	Y+33, r24	; 0x21
    3d0a:	0f c0       	rjmp	.+30     	; 0x3d2a <LCD_voidInit+0x2c6>
    3d0c:	88 ec       	ldi	r24, 0xC8	; 200
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	98 a3       	std	Y+32, r25	; 0x20
    3d12:	8f 8f       	std	Y+31, r24	; 0x1f
    3d14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d16:	98 a1       	ldd	r25, Y+32	; 0x20
    3d18:	01 97       	sbiw	r24, 0x01	; 1
    3d1a:	f1 f7       	brne	.-4      	; 0x3d18 <LCD_voidInit+0x2b4>
    3d1c:	98 a3       	std	Y+32, r25	; 0x20
    3d1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d20:	89 a1       	ldd	r24, Y+33	; 0x21
    3d22:	9a a1       	ldd	r25, Y+34	; 0x22
    3d24:	01 97       	sbiw	r24, 0x01	; 1
    3d26:	9a a3       	std	Y+34, r25	; 0x22
    3d28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2a:	89 a1       	ldd	r24, Y+33	; 0x21
    3d2c:	9a a1       	ldd	r25, Y+34	; 0x22
    3d2e:	00 97       	sbiw	r24, 0x00	; 0
    3d30:	69 f7       	brne	.-38     	; 0x3d0c <LCD_voidInit+0x2a8>
    3d32:	14 c0       	rjmp	.+40     	; 0x3d5c <LCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d34:	6b a1       	ldd	r22, Y+35	; 0x23
    3d36:	7c a1       	ldd	r23, Y+36	; 0x24
    3d38:	8d a1       	ldd	r24, Y+37	; 0x25
    3d3a:	9e a1       	ldd	r25, Y+38	; 0x26
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	9a a3       	std	Y+34, r25	; 0x22
    3d46:	89 a3       	std	Y+33, r24	; 0x21
    3d48:	89 a1       	ldd	r24, Y+33	; 0x21
    3d4a:	9a a1       	ldd	r25, Y+34	; 0x22
    3d4c:	9e 8f       	std	Y+30, r25	; 0x1e
    3d4e:	8d 8f       	std	Y+29, r24	; 0x1d
    3d50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d54:	01 97       	sbiw	r24, 0x01	; 1
    3d56:	f1 f7       	brne	.-4      	; 0x3d54 <LCD_voidInit+0x2f0>
    3d58:	9e 8f       	std	Y+30, r25	; 0x1e
    3d5a:	8d 8f       	std	Y+29, r24	; 0x1d

	// wait for more than 39 us
	_delay_ms(1);

	//lcd clear : to clear any data on the lcd
	LCD_voidSendCommand (0x01);
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <LCD_voidSendCommand>
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	a0 e0       	ldi	r26, 0x00	; 0
    3d68:	b0 e4       	ldi	r27, 0x40	; 64
    3d6a:	89 8f       	std	Y+25, r24	; 0x19
    3d6c:	9a 8f       	std	Y+26, r25	; 0x1a
    3d6e:	ab 8f       	std	Y+27, r26	; 0x1b
    3d70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d72:	69 8d       	ldd	r22, Y+25	; 0x19
    3d74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	4a ef       	ldi	r20, 0xFA	; 250
    3d80:	54 e4       	ldi	r21, 0x44	; 68
    3d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d86:	dc 01       	movw	r26, r24
    3d88:	cb 01       	movw	r24, r22
    3d8a:	8d 8b       	std	Y+21, r24	; 0x15
    3d8c:	9e 8b       	std	Y+22, r25	; 0x16
    3d8e:	af 8b       	std	Y+23, r26	; 0x17
    3d90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d92:	6d 89       	ldd	r22, Y+21	; 0x15
    3d94:	7e 89       	ldd	r23, Y+22	; 0x16
    3d96:	8f 89       	ldd	r24, Y+23	; 0x17
    3d98:	98 8d       	ldd	r25, Y+24	; 0x18
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	40 e8       	ldi	r20, 0x80	; 128
    3da0:	5f e3       	ldi	r21, 0x3F	; 63
    3da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3da6:	88 23       	and	r24, r24
    3da8:	2c f4       	brge	.+10     	; 0x3db4 <LCD_voidInit+0x350>
		__ticks = 1;
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	9c 8b       	std	Y+20, r25	; 0x14
    3db0:	8b 8b       	std	Y+19, r24	; 0x13
    3db2:	3f c0       	rjmp	.+126    	; 0x3e32 <LCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    3db4:	6d 89       	ldd	r22, Y+21	; 0x15
    3db6:	7e 89       	ldd	r23, Y+22	; 0x16
    3db8:	8f 89       	ldd	r24, Y+23	; 0x17
    3dba:	98 8d       	ldd	r25, Y+24	; 0x18
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	3f ef       	ldi	r19, 0xFF	; 255
    3dc0:	4f e7       	ldi	r20, 0x7F	; 127
    3dc2:	57 e4       	ldi	r21, 0x47	; 71
    3dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3dc8:	18 16       	cp	r1, r24
    3dca:	4c f5       	brge	.+82     	; 0x3e1e <LCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dcc:	69 8d       	ldd	r22, Y+25	; 0x19
    3dce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	40 e2       	ldi	r20, 0x20	; 32
    3dda:	51 e4       	ldi	r21, 0x41	; 65
    3ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	bc 01       	movw	r22, r24
    3de6:	cd 01       	movw	r24, r26
    3de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	9c 8b       	std	Y+20, r25	; 0x14
    3df2:	8b 8b       	std	Y+19, r24	; 0x13
    3df4:	0f c0       	rjmp	.+30     	; 0x3e14 <LCD_voidInit+0x3b0>
    3df6:	88 ec       	ldi	r24, 0xC8	; 200
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	9a 8b       	std	Y+18, r25	; 0x12
    3dfc:	89 8b       	std	Y+17, r24	; 0x11
    3dfe:	89 89       	ldd	r24, Y+17	; 0x11
    3e00:	9a 89       	ldd	r25, Y+18	; 0x12
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	f1 f7       	brne	.-4      	; 0x3e02 <LCD_voidInit+0x39e>
    3e06:	9a 8b       	std	Y+18, r25	; 0x12
    3e08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	9c 8b       	std	Y+20, r25	; 0x14
    3e12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e14:	8b 89       	ldd	r24, Y+19	; 0x13
    3e16:	9c 89       	ldd	r25, Y+20	; 0x14
    3e18:	00 97       	sbiw	r24, 0x00	; 0
    3e1a:	69 f7       	brne	.-38     	; 0x3df6 <LCD_voidInit+0x392>
    3e1c:	14 c0       	rjmp	.+40     	; 0x3e46 <LCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    3e20:	7e 89       	ldd	r23, Y+22	; 0x16
    3e22:	8f 89       	ldd	r24, Y+23	; 0x17
    3e24:	98 8d       	ldd	r25, Y+24	; 0x18
    3e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	9c 8b       	std	Y+20, r25	; 0x14
    3e30:	8b 8b       	std	Y+19, r24	; 0x13
    3e32:	8b 89       	ldd	r24, Y+19	; 0x13
    3e34:	9c 89       	ldd	r25, Y+20	; 0x14
    3e36:	98 8b       	std	Y+16, r25	; 0x10
    3e38:	8f 87       	std	Y+15, r24	; 0x0f
    3e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e3c:	98 89       	ldd	r25, Y+16	; 0x10
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	f1 f7       	brne	.-4      	; 0x3e3e <LCD_voidInit+0x3da>
    3e42:	98 8b       	std	Y+16, r25	; 0x10
    3e44:	8f 87       	std	Y+15, r24	; 0x0f

	// delay for more than 1.53 ms
	_delay_ms(2);

	// entry mode set
	LCD_voidSendCommand(0x0A);
    3e46:	8a e0       	ldi	r24, 0x0A	; 10
    3e48:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <LCD_voidSendCommand>
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	a0 e8       	ldi	r26, 0x80	; 128
    3e52:	bf e3       	ldi	r27, 0x3F	; 63
    3e54:	8b 87       	std	Y+11, r24	; 0x0b
    3e56:	9c 87       	std	Y+12, r25	; 0x0c
    3e58:	ad 87       	std	Y+13, r26	; 0x0d
    3e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	4a ef       	ldi	r20, 0xFA	; 250
    3e6a:	54 e4       	ldi	r21, 0x44	; 68
    3e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	8f 83       	std	Y+7, r24	; 0x07
    3e76:	98 87       	std	Y+8, r25	; 0x08
    3e78:	a9 87       	std	Y+9, r26	; 0x09
    3e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e7e:	78 85       	ldd	r23, Y+8	; 0x08
    3e80:	89 85       	ldd	r24, Y+9	; 0x09
    3e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	40 e8       	ldi	r20, 0x80	; 128
    3e8a:	5f e3       	ldi	r21, 0x3F	; 63
    3e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e90:	88 23       	and	r24, r24
    3e92:	2c f4       	brge	.+10     	; 0x3e9e <LCD_voidInit+0x43a>
		__ticks = 1;
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	9e 83       	std	Y+6, r25	; 0x06
    3e9a:	8d 83       	std	Y+5, r24	; 0x05
    3e9c:	3f c0       	rjmp	.+126    	; 0x3f1c <LCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    3e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    3ea0:	78 85       	ldd	r23, Y+8	; 0x08
    3ea2:	89 85       	ldd	r24, Y+9	; 0x09
    3ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	3f ef       	ldi	r19, 0xFF	; 255
    3eaa:	4f e7       	ldi	r20, 0x7F	; 127
    3eac:	57 e4       	ldi	r21, 0x47	; 71
    3eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eb2:	18 16       	cp	r1, r24
    3eb4:	4c f5       	brge	.+82     	; 0x3f08 <LCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	40 e2       	ldi	r20, 0x20	; 32
    3ec4:	51 e4       	ldi	r21, 0x41	; 65
    3ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eca:	dc 01       	movw	r26, r24
    3ecc:	cb 01       	movw	r24, r22
    3ece:	bc 01       	movw	r22, r24
    3ed0:	cd 01       	movw	r24, r26
    3ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	cb 01       	movw	r24, r22
    3eda:	9e 83       	std	Y+6, r25	; 0x06
    3edc:	8d 83       	std	Y+5, r24	; 0x05
    3ede:	0f c0       	rjmp	.+30     	; 0x3efe <LCD_voidInit+0x49a>
    3ee0:	88 ec       	ldi	r24, 0xC8	; 200
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	9c 83       	std	Y+4, r25	; 0x04
    3ee6:	8b 83       	std	Y+3, r24	; 0x03
    3ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eea:	9c 81       	ldd	r25, Y+4	; 0x04
    3eec:	01 97       	sbiw	r24, 0x01	; 1
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <LCD_voidInit+0x488>
    3ef0:	9c 83       	std	Y+4, r25	; 0x04
    3ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef8:	01 97       	sbiw	r24, 0x01	; 1
    3efa:	9e 83       	std	Y+6, r25	; 0x06
    3efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3efe:	8d 81       	ldd	r24, Y+5	; 0x05
    3f00:	9e 81       	ldd	r25, Y+6	; 0x06
    3f02:	00 97       	sbiw	r24, 0x00	; 0
    3f04:	69 f7       	brne	.-38     	; 0x3ee0 <LCD_voidInit+0x47c>
    3f06:	14 c0       	rjmp	.+40     	; 0x3f30 <LCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f08:	6f 81       	ldd	r22, Y+7	; 0x07
    3f0a:	78 85       	ldd	r23, Y+8	; 0x08
    3f0c:	89 85       	ldd	r24, Y+9	; 0x09
    3f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f14:	dc 01       	movw	r26, r24
    3f16:	cb 01       	movw	r24, r22
    3f18:	9e 83       	std	Y+6, r25	; 0x06
    3f1a:	8d 83       	std	Y+5, r24	; 0x05
    3f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f20:	9a 83       	std	Y+2, r25	; 0x02
    3f22:	89 83       	std	Y+1, r24	; 0x01
    3f24:	89 81       	ldd	r24, Y+1	; 0x01
    3f26:	9a 81       	ldd	r25, Y+2	; 0x02
    3f28:	01 97       	sbiw	r24, 0x01	; 1
    3f2a:	f1 f7       	brne	.-4      	; 0x3f28 <LCD_voidInit+0x4c4>
    3f2c:	9a 83       	std	Y+2, r25	; 0x02
    3f2e:	89 83       	std	Y+1, r24	; 0x01

	//delay for more than 1 ms
	_delay_ms(1);

}
    3f30:	ca 5b       	subi	r28, 0xBA	; 186
    3f32:	df 4f       	sbci	r29, 0xFF	; 255
    3f34:	0f b6       	in	r0, 0x3f	; 63
    3f36:	f8 94       	cli
    3f38:	de bf       	out	0x3e, r29	; 62
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	cd bf       	out	0x3d, r28	; 61
    3f3e:	cf 91       	pop	r28
    3f40:	df 91       	pop	r29
    3f42:	1f 91       	pop	r17
    3f44:	0f 91       	pop	r16
    3f46:	08 95       	ret

00003f48 <LCD_voidSendCommand>:


void LCD_voidSendCommand (u8 COPY_LCD_CMD)
{
    3f48:	df 93       	push	r29
    3f4a:	cf 93       	push	r28
    3f4c:	cd b7       	in	r28, 0x3d	; 61
    3f4e:	de b7       	in	r29, 0x3e	; 62
    3f50:	6d 97       	sbiw	r28, 0x1d	; 29
    3f52:	0f b6       	in	r0, 0x3f	; 63
    3f54:	f8 94       	cli
    3f56:	de bf       	out	0x3e, r29	; 62
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	cd bf       	out	0x3d, r28	; 61
    3f5c:	8d 8f       	std	Y+29, r24	; 0x1d
	// disable Enable bin
	DIO_SetPinValue (LCD_CTRL_PORT,LCD_EN,LOW);
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	62 e0       	ldi	r22, 0x02	; 2
    3f62:	40 e0       	ldi	r20, 0x00	; 0
    3f64:	0e 94 ff 19 	call	0x33fe	; 0x33fe <DIO_SetPinValue>

	//RS COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RS , LOW) ;
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	60 e0       	ldi	r22, 0x00	; 0
    3f6c:	40 e0       	ldi	r20, 0x00	; 0
    3f6e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <DIO_SetPinValue>
	//_delay_ms(1) ;

	//RW COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RW , LOW) ;
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	61 e0       	ldi	r22, 0x01	; 1
    3f76:	40 e0       	ldi	r20, 0x00	; 0
    3f78:	0e 94 ff 19 	call	0x33fe	; 0x33fe <DIO_SetPinValue>
	//_delay_ms(1) ;

	// SEND THE COMMAND
	DIO_SetPortValue (LCD_DATA_PORT ,COPY_LCD_CMD) ;
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
    3f7e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3f80:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <DIO_SetPortValue>
    3f84:	80 e0       	ldi	r24, 0x00	; 0
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	a0 e8       	ldi	r26, 0x80	; 128
    3f8a:	bf e3       	ldi	r27, 0x3F	; 63
    3f8c:	89 8f       	std	Y+25, r24	; 0x19
    3f8e:	9a 8f       	std	Y+26, r25	; 0x1a
    3f90:	ab 8f       	std	Y+27, r26	; 0x1b
    3f92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f94:	69 8d       	ldd	r22, Y+25	; 0x19
    3f96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	4a ef       	ldi	r20, 0xFA	; 250
    3fa2:	54 e4       	ldi	r21, 0x44	; 68
    3fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa8:	dc 01       	movw	r26, r24
    3faa:	cb 01       	movw	r24, r22
    3fac:	8d 8b       	std	Y+21, r24	; 0x15
    3fae:	9e 8b       	std	Y+22, r25	; 0x16
    3fb0:	af 8b       	std	Y+23, r26	; 0x17
    3fb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fb4:	6d 89       	ldd	r22, Y+21	; 0x15
    3fb6:	7e 89       	ldd	r23, Y+22	; 0x16
    3fb8:	8f 89       	ldd	r24, Y+23	; 0x17
    3fba:	98 8d       	ldd	r25, Y+24	; 0x18
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	40 e8       	ldi	r20, 0x80	; 128
    3fc2:	5f e3       	ldi	r21, 0x3F	; 63
    3fc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fc8:	88 23       	and	r24, r24
    3fca:	2c f4       	brge	.+10     	; 0x3fd6 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	9c 8b       	std	Y+20, r25	; 0x14
    3fd2:	8b 8b       	std	Y+19, r24	; 0x13
    3fd4:	3f c0       	rjmp	.+126    	; 0x4054 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    3fd6:	6d 89       	ldd	r22, Y+21	; 0x15
    3fd8:	7e 89       	ldd	r23, Y+22	; 0x16
    3fda:	8f 89       	ldd	r24, Y+23	; 0x17
    3fdc:	98 8d       	ldd	r25, Y+24	; 0x18
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	3f ef       	ldi	r19, 0xFF	; 255
    3fe2:	4f e7       	ldi	r20, 0x7F	; 127
    3fe4:	57 e4       	ldi	r21, 0x47	; 71
    3fe6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fea:	18 16       	cp	r1, r24
    3fec:	4c f5       	brge	.+82     	; 0x4040 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fee:	69 8d       	ldd	r22, Y+25	; 0x19
    3ff0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ff4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	40 e2       	ldi	r20, 0x20	; 32
    3ffc:	51 e4       	ldi	r21, 0x41	; 65
    3ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	bc 01       	movw	r22, r24
    4008:	cd 01       	movw	r24, r26
    400a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	9c 8b       	std	Y+20, r25	; 0x14
    4014:	8b 8b       	std	Y+19, r24	; 0x13
    4016:	0f c0       	rjmp	.+30     	; 0x4036 <LCD_voidSendCommand+0xee>
    4018:	88 ec       	ldi	r24, 0xC8	; 200
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	9a 8b       	std	Y+18, r25	; 0x12
    401e:	89 8b       	std	Y+17, r24	; 0x11
    4020:	89 89       	ldd	r24, Y+17	; 0x11
    4022:	9a 89       	ldd	r25, Y+18	; 0x12
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	f1 f7       	brne	.-4      	; 0x4024 <LCD_voidSendCommand+0xdc>
    4028:	9a 8b       	std	Y+18, r25	; 0x12
    402a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    402c:	8b 89       	ldd	r24, Y+19	; 0x13
    402e:	9c 89       	ldd	r25, Y+20	; 0x14
    4030:	01 97       	sbiw	r24, 0x01	; 1
    4032:	9c 8b       	std	Y+20, r25	; 0x14
    4034:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4036:	8b 89       	ldd	r24, Y+19	; 0x13
    4038:	9c 89       	ldd	r25, Y+20	; 0x14
    403a:	00 97       	sbiw	r24, 0x00	; 0
    403c:	69 f7       	brne	.-38     	; 0x4018 <LCD_voidSendCommand+0xd0>
    403e:	14 c0       	rjmp	.+40     	; 0x4068 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4040:	6d 89       	ldd	r22, Y+21	; 0x15
    4042:	7e 89       	ldd	r23, Y+22	; 0x16
    4044:	8f 89       	ldd	r24, Y+23	; 0x17
    4046:	98 8d       	ldd	r25, Y+24	; 0x18
    4048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    404c:	dc 01       	movw	r26, r24
    404e:	cb 01       	movw	r24, r22
    4050:	9c 8b       	std	Y+20, r25	; 0x14
    4052:	8b 8b       	std	Y+19, r24	; 0x13
    4054:	8b 89       	ldd	r24, Y+19	; 0x13
    4056:	9c 89       	ldd	r25, Y+20	; 0x14
    4058:	98 8b       	std	Y+16, r25	; 0x10
    405a:	8f 87       	std	Y+15, r24	; 0x0f
    405c:	8f 85       	ldd	r24, Y+15	; 0x0f
    405e:	98 89       	ldd	r25, Y+16	; 0x10
    4060:	01 97       	sbiw	r24, 0x01	; 1
    4062:	f1 f7       	brne	.-4      	; 0x4060 <LCD_voidSendCommand+0x118>
    4064:	98 8b       	std	Y+16, r25	; 0x10
    4066:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , HIGH) ;
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	62 e0       	ldi	r22, 0x02	; 2
    406c:	41 e0       	ldi	r20, 0x01	; 1
    406e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <DIO_SetPinValue>
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	a0 e8       	ldi	r26, 0x80	; 128
    4078:	bf e3       	ldi	r27, 0x3F	; 63
    407a:	8b 87       	std	Y+11, r24	; 0x0b
    407c:	9c 87       	std	Y+12, r25	; 0x0c
    407e:	ad 87       	std	Y+13, r26	; 0x0d
    4080:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4082:	6b 85       	ldd	r22, Y+11	; 0x0b
    4084:	7c 85       	ldd	r23, Y+12	; 0x0c
    4086:	8d 85       	ldd	r24, Y+13	; 0x0d
    4088:	9e 85       	ldd	r25, Y+14	; 0x0e
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	4a ef       	ldi	r20, 0xFA	; 250
    4090:	54 e4       	ldi	r21, 0x44	; 68
    4092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4096:	dc 01       	movw	r26, r24
    4098:	cb 01       	movw	r24, r22
    409a:	8f 83       	std	Y+7, r24	; 0x07
    409c:	98 87       	std	Y+8, r25	; 0x08
    409e:	a9 87       	std	Y+9, r26	; 0x09
    40a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40a2:	6f 81       	ldd	r22, Y+7	; 0x07
    40a4:	78 85       	ldd	r23, Y+8	; 0x08
    40a6:	89 85       	ldd	r24, Y+9	; 0x09
    40a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	40 e8       	ldi	r20, 0x80	; 128
    40b0:	5f e3       	ldi	r21, 0x3F	; 63
    40b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40b6:	88 23       	and	r24, r24
    40b8:	2c f4       	brge	.+10     	; 0x40c4 <LCD_voidSendCommand+0x17c>
		__ticks = 1;
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	9e 83       	std	Y+6, r25	; 0x06
    40c0:	8d 83       	std	Y+5, r24	; 0x05
    40c2:	3f c0       	rjmp	.+126    	; 0x4142 <LCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    40c4:	6f 81       	ldd	r22, Y+7	; 0x07
    40c6:	78 85       	ldd	r23, Y+8	; 0x08
    40c8:	89 85       	ldd	r24, Y+9	; 0x09
    40ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	3f ef       	ldi	r19, 0xFF	; 255
    40d0:	4f e7       	ldi	r20, 0x7F	; 127
    40d2:	57 e4       	ldi	r21, 0x47	; 71
    40d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40d8:	18 16       	cp	r1, r24
    40da:	4c f5       	brge	.+82     	; 0x412e <LCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    40de:	7c 85       	ldd	r23, Y+12	; 0x0c
    40e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	40 e2       	ldi	r20, 0x20	; 32
    40ea:	51 e4       	ldi	r21, 0x41	; 65
    40ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	bc 01       	movw	r22, r24
    40f6:	cd 01       	movw	r24, r26
    40f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fc:	dc 01       	movw	r26, r24
    40fe:	cb 01       	movw	r24, r22
    4100:	9e 83       	std	Y+6, r25	; 0x06
    4102:	8d 83       	std	Y+5, r24	; 0x05
    4104:	0f c0       	rjmp	.+30     	; 0x4124 <LCD_voidSendCommand+0x1dc>
    4106:	88 ec       	ldi	r24, 0xC8	; 200
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	9c 83       	std	Y+4, r25	; 0x04
    410c:	8b 83       	std	Y+3, r24	; 0x03
    410e:	8b 81       	ldd	r24, Y+3	; 0x03
    4110:	9c 81       	ldd	r25, Y+4	; 0x04
    4112:	01 97       	sbiw	r24, 0x01	; 1
    4114:	f1 f7       	brne	.-4      	; 0x4112 <LCD_voidSendCommand+0x1ca>
    4116:	9c 83       	std	Y+4, r25	; 0x04
    4118:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    411a:	8d 81       	ldd	r24, Y+5	; 0x05
    411c:	9e 81       	ldd	r25, Y+6	; 0x06
    411e:	01 97       	sbiw	r24, 0x01	; 1
    4120:	9e 83       	std	Y+6, r25	; 0x06
    4122:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4124:	8d 81       	ldd	r24, Y+5	; 0x05
    4126:	9e 81       	ldd	r25, Y+6	; 0x06
    4128:	00 97       	sbiw	r24, 0x00	; 0
    412a:	69 f7       	brne	.-38     	; 0x4106 <LCD_voidSendCommand+0x1be>
    412c:	14 c0       	rjmp	.+40     	; 0x4156 <LCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    412e:	6f 81       	ldd	r22, Y+7	; 0x07
    4130:	78 85       	ldd	r23, Y+8	; 0x08
    4132:	89 85       	ldd	r24, Y+9	; 0x09
    4134:	9a 85       	ldd	r25, Y+10	; 0x0a
    4136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22
    413e:	9e 83       	std	Y+6, r25	; 0x06
    4140:	8d 83       	std	Y+5, r24	; 0x05
    4142:	8d 81       	ldd	r24, Y+5	; 0x05
    4144:	9e 81       	ldd	r25, Y+6	; 0x06
    4146:	9a 83       	std	Y+2, r25	; 0x02
    4148:	89 83       	std	Y+1, r24	; 0x01
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	9a 81       	ldd	r25, Y+2	; 0x02
    414e:	01 97       	sbiw	r24, 0x01	; 1
    4150:	f1 f7       	brne	.-4      	; 0x414e <LCD_voidSendCommand+0x206>
    4152:	9a 83       	std	Y+2, r25	; 0x02
    4154:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , LOW) ;
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	62 e0       	ldi	r22, 0x02	; 2
    415a:	40 e0       	ldi	r20, 0x00	; 0
    415c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <DIO_SetPinValue>

}
    4160:	6d 96       	adiw	r28, 0x1d	; 29
    4162:	0f b6       	in	r0, 0x3f	; 63
    4164:	f8 94       	cli
    4166:	de bf       	out	0x3e, r29	; 62
    4168:	0f be       	out	0x3f, r0	; 63
    416a:	cd bf       	out	0x3d, r28	; 61
    416c:	cf 91       	pop	r28
    416e:	df 91       	pop	r29
    4170:	08 95       	ret

00004172 <LCD_voidWriteData>:
void LCD_voidWriteData (u8  COPY_LCD_WRITE)
{
    4172:	df 93       	push	r29
    4174:	cf 93       	push	r28
    4176:	cd b7       	in	r28, 0x3d	; 61
    4178:	de b7       	in	r29, 0x3e	; 62
    417a:	6d 97       	sbiw	r28, 0x1d	; 29
    417c:	0f b6       	in	r0, 0x3f	; 63
    417e:	f8 94       	cli
    4180:	de bf       	out	0x3e, r29	; 62
    4182:	0f be       	out	0x3f, r0	; 63
    4184:	cd bf       	out	0x3d, r28	; 61
    4186:	8d 8f       	std	Y+29, r24	; 0x1d

	// disable Enable bin
	DIO_SetPinValue (LCD_CTRL_PORT,LCD_EN,LOW);
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	62 e0       	ldi	r22, 0x02	; 2
    418c:	40 e0       	ldi	r20, 0x00	; 0
    418e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <DIO_SetPinValue>

	//RS COMMAND : HIGH
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RS , HIGH) ;
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	60 e0       	ldi	r22, 0x00	; 0
    4196:	41 e0       	ldi	r20, 0x01	; 1
    4198:	0e 94 ff 19 	call	0x33fe	; 0x33fe <DIO_SetPinValue>
	//_delay_ms(1) ;

	//RW COMMAND : LOW
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_RW , LOW) ;
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	61 e0       	ldi	r22, 0x01	; 1
    41a0:	40 e0       	ldi	r20, 0x00	; 0
    41a2:	0e 94 ff 19 	call	0x33fe	; 0x33fe <DIO_SetPinValue>
	//_delay_ms(1) ;

	// SEND THE COMMAND
	DIO_SetPortValue (LCD_DATA_PORT ,COPY_LCD_WRITE) ;
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    41aa:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <DIO_SetPortValue>
    41ae:	80 e0       	ldi	r24, 0x00	; 0
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	a0 e8       	ldi	r26, 0x80	; 128
    41b4:	bf e3       	ldi	r27, 0x3F	; 63
    41b6:	89 8f       	std	Y+25, r24	; 0x19
    41b8:	9a 8f       	std	Y+26, r25	; 0x1a
    41ba:	ab 8f       	std	Y+27, r26	; 0x1b
    41bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41be:	69 8d       	ldd	r22, Y+25	; 0x19
    41c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	4a ef       	ldi	r20, 0xFA	; 250
    41cc:	54 e4       	ldi	r21, 0x44	; 68
    41ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d2:	dc 01       	movw	r26, r24
    41d4:	cb 01       	movw	r24, r22
    41d6:	8d 8b       	std	Y+21, r24	; 0x15
    41d8:	9e 8b       	std	Y+22, r25	; 0x16
    41da:	af 8b       	std	Y+23, r26	; 0x17
    41dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41de:	6d 89       	ldd	r22, Y+21	; 0x15
    41e0:	7e 89       	ldd	r23, Y+22	; 0x16
    41e2:	8f 89       	ldd	r24, Y+23	; 0x17
    41e4:	98 8d       	ldd	r25, Y+24	; 0x18
    41e6:	20 e0       	ldi	r18, 0x00	; 0
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	40 e8       	ldi	r20, 0x80	; 128
    41ec:	5f e3       	ldi	r21, 0x3F	; 63
    41ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41f2:	88 23       	and	r24, r24
    41f4:	2c f4       	brge	.+10     	; 0x4200 <LCD_voidWriteData+0x8e>
		__ticks = 1;
    41f6:	81 e0       	ldi	r24, 0x01	; 1
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	9c 8b       	std	Y+20, r25	; 0x14
    41fc:	8b 8b       	std	Y+19, r24	; 0x13
    41fe:	3f c0       	rjmp	.+126    	; 0x427e <LCD_voidWriteData+0x10c>
	else if (__tmp > 65535)
    4200:	6d 89       	ldd	r22, Y+21	; 0x15
    4202:	7e 89       	ldd	r23, Y+22	; 0x16
    4204:	8f 89       	ldd	r24, Y+23	; 0x17
    4206:	98 8d       	ldd	r25, Y+24	; 0x18
    4208:	20 e0       	ldi	r18, 0x00	; 0
    420a:	3f ef       	ldi	r19, 0xFF	; 255
    420c:	4f e7       	ldi	r20, 0x7F	; 127
    420e:	57 e4       	ldi	r21, 0x47	; 71
    4210:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4214:	18 16       	cp	r1, r24
    4216:	4c f5       	brge	.+82     	; 0x426a <LCD_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4218:	69 8d       	ldd	r22, Y+25	; 0x19
    421a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    421c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    421e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4220:	20 e0       	ldi	r18, 0x00	; 0
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	40 e2       	ldi	r20, 0x20	; 32
    4226:	51 e4       	ldi	r21, 0x41	; 65
    4228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	bc 01       	movw	r22, r24
    4232:	cd 01       	movw	r24, r26
    4234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4238:	dc 01       	movw	r26, r24
    423a:	cb 01       	movw	r24, r22
    423c:	9c 8b       	std	Y+20, r25	; 0x14
    423e:	8b 8b       	std	Y+19, r24	; 0x13
    4240:	0f c0       	rjmp	.+30     	; 0x4260 <LCD_voidWriteData+0xee>
    4242:	88 ec       	ldi	r24, 0xC8	; 200
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	9a 8b       	std	Y+18, r25	; 0x12
    4248:	89 8b       	std	Y+17, r24	; 0x11
    424a:	89 89       	ldd	r24, Y+17	; 0x11
    424c:	9a 89       	ldd	r25, Y+18	; 0x12
    424e:	01 97       	sbiw	r24, 0x01	; 1
    4250:	f1 f7       	brne	.-4      	; 0x424e <LCD_voidWriteData+0xdc>
    4252:	9a 8b       	std	Y+18, r25	; 0x12
    4254:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4256:	8b 89       	ldd	r24, Y+19	; 0x13
    4258:	9c 89       	ldd	r25, Y+20	; 0x14
    425a:	01 97       	sbiw	r24, 0x01	; 1
    425c:	9c 8b       	std	Y+20, r25	; 0x14
    425e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4260:	8b 89       	ldd	r24, Y+19	; 0x13
    4262:	9c 89       	ldd	r25, Y+20	; 0x14
    4264:	00 97       	sbiw	r24, 0x00	; 0
    4266:	69 f7       	brne	.-38     	; 0x4242 <LCD_voidWriteData+0xd0>
    4268:	14 c0       	rjmp	.+40     	; 0x4292 <LCD_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    426a:	6d 89       	ldd	r22, Y+21	; 0x15
    426c:	7e 89       	ldd	r23, Y+22	; 0x16
    426e:	8f 89       	ldd	r24, Y+23	; 0x17
    4270:	98 8d       	ldd	r25, Y+24	; 0x18
    4272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4276:	dc 01       	movw	r26, r24
    4278:	cb 01       	movw	r24, r22
    427a:	9c 8b       	std	Y+20, r25	; 0x14
    427c:	8b 8b       	std	Y+19, r24	; 0x13
    427e:	8b 89       	ldd	r24, Y+19	; 0x13
    4280:	9c 89       	ldd	r25, Y+20	; 0x14
    4282:	98 8b       	std	Y+16, r25	; 0x10
    4284:	8f 87       	std	Y+15, r24	; 0x0f
    4286:	8f 85       	ldd	r24, Y+15	; 0x0f
    4288:	98 89       	ldd	r25, Y+16	; 0x10
    428a:	01 97       	sbiw	r24, 0x01	; 1
    428c:	f1 f7       	brne	.-4      	; 0x428a <LCD_voidWriteData+0x118>
    428e:	98 8b       	std	Y+16, r25	; 0x10
    4290:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , HIGH) ;
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	62 e0       	ldi	r22, 0x02	; 2
    4296:	41 e0       	ldi	r20, 0x01	; 1
    4298:	0e 94 ff 19 	call	0x33fe	; 0x33fe <DIO_SetPinValue>
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	a0 e8       	ldi	r26, 0x80	; 128
    42a2:	bf e3       	ldi	r27, 0x3F	; 63
    42a4:	8b 87       	std	Y+11, r24	; 0x0b
    42a6:	9c 87       	std	Y+12, r25	; 0x0c
    42a8:	ad 87       	std	Y+13, r26	; 0x0d
    42aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    42ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    42b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    42b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	4a ef       	ldi	r20, 0xFA	; 250
    42ba:	54 e4       	ldi	r21, 0x44	; 68
    42bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	8f 83       	std	Y+7, r24	; 0x07
    42c6:	98 87       	std	Y+8, r25	; 0x08
    42c8:	a9 87       	std	Y+9, r26	; 0x09
    42ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42cc:	6f 81       	ldd	r22, Y+7	; 0x07
    42ce:	78 85       	ldd	r23, Y+8	; 0x08
    42d0:	89 85       	ldd	r24, Y+9	; 0x09
    42d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d4:	20 e0       	ldi	r18, 0x00	; 0
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	40 e8       	ldi	r20, 0x80	; 128
    42da:	5f e3       	ldi	r21, 0x3F	; 63
    42dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42e0:	88 23       	and	r24, r24
    42e2:	2c f4       	brge	.+10     	; 0x42ee <LCD_voidWriteData+0x17c>
		__ticks = 1;
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	9e 83       	std	Y+6, r25	; 0x06
    42ea:	8d 83       	std	Y+5, r24	; 0x05
    42ec:	3f c0       	rjmp	.+126    	; 0x436c <LCD_voidWriteData+0x1fa>
	else if (__tmp > 65535)
    42ee:	6f 81       	ldd	r22, Y+7	; 0x07
    42f0:	78 85       	ldd	r23, Y+8	; 0x08
    42f2:	89 85       	ldd	r24, Y+9	; 0x09
    42f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	3f ef       	ldi	r19, 0xFF	; 255
    42fa:	4f e7       	ldi	r20, 0x7F	; 127
    42fc:	57 e4       	ldi	r21, 0x47	; 71
    42fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4302:	18 16       	cp	r1, r24
    4304:	4c f5       	brge	.+82     	; 0x4358 <LCD_voidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4306:	6b 85       	ldd	r22, Y+11	; 0x0b
    4308:	7c 85       	ldd	r23, Y+12	; 0x0c
    430a:	8d 85       	ldd	r24, Y+13	; 0x0d
    430c:	9e 85       	ldd	r25, Y+14	; 0x0e
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	40 e2       	ldi	r20, 0x20	; 32
    4314:	51 e4       	ldi	r21, 0x41	; 65
    4316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    431a:	dc 01       	movw	r26, r24
    431c:	cb 01       	movw	r24, r22
    431e:	bc 01       	movw	r22, r24
    4320:	cd 01       	movw	r24, r26
    4322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4326:	dc 01       	movw	r26, r24
    4328:	cb 01       	movw	r24, r22
    432a:	9e 83       	std	Y+6, r25	; 0x06
    432c:	8d 83       	std	Y+5, r24	; 0x05
    432e:	0f c0       	rjmp	.+30     	; 0x434e <LCD_voidWriteData+0x1dc>
    4330:	88 ec       	ldi	r24, 0xC8	; 200
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	9c 83       	std	Y+4, r25	; 0x04
    4336:	8b 83       	std	Y+3, r24	; 0x03
    4338:	8b 81       	ldd	r24, Y+3	; 0x03
    433a:	9c 81       	ldd	r25, Y+4	; 0x04
    433c:	01 97       	sbiw	r24, 0x01	; 1
    433e:	f1 f7       	brne	.-4      	; 0x433c <LCD_voidWriteData+0x1ca>
    4340:	9c 83       	std	Y+4, r25	; 0x04
    4342:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4344:	8d 81       	ldd	r24, Y+5	; 0x05
    4346:	9e 81       	ldd	r25, Y+6	; 0x06
    4348:	01 97       	sbiw	r24, 0x01	; 1
    434a:	9e 83       	std	Y+6, r25	; 0x06
    434c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434e:	8d 81       	ldd	r24, Y+5	; 0x05
    4350:	9e 81       	ldd	r25, Y+6	; 0x06
    4352:	00 97       	sbiw	r24, 0x00	; 0
    4354:	69 f7       	brne	.-38     	; 0x4330 <LCD_voidWriteData+0x1be>
    4356:	14 c0       	rjmp	.+40     	; 0x4380 <LCD_voidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4358:	6f 81       	ldd	r22, Y+7	; 0x07
    435a:	78 85       	ldd	r23, Y+8	; 0x08
    435c:	89 85       	ldd	r24, Y+9	; 0x09
    435e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4364:	dc 01       	movw	r26, r24
    4366:	cb 01       	movw	r24, r22
    4368:	9e 83       	std	Y+6, r25	; 0x06
    436a:	8d 83       	std	Y+5, r24	; 0x05
    436c:	8d 81       	ldd	r24, Y+5	; 0x05
    436e:	9e 81       	ldd	r25, Y+6	; 0x06
    4370:	9a 83       	std	Y+2, r25	; 0x02
    4372:	89 83       	std	Y+1, r24	; 0x01
    4374:	89 81       	ldd	r24, Y+1	; 0x01
    4376:	9a 81       	ldd	r25, Y+2	; 0x02
    4378:	01 97       	sbiw	r24, 0x01	; 1
    437a:	f1 f7       	brne	.-4      	; 0x4378 <LCD_voidWriteData+0x206>
    437c:	9a 83       	std	Y+2, r25	; 0x02
    437e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	DIO_SetPinValue(LCD_CTRL_PORT , LCD_EN , LOW) ;
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	62 e0       	ldi	r22, 0x02	; 2
    4384:	40 e0       	ldi	r20, 0x00	; 0
    4386:	0e 94 ff 19 	call	0x33fe	; 0x33fe <DIO_SetPinValue>

}
    438a:	6d 96       	adiw	r28, 0x1d	; 29
    438c:	0f b6       	in	r0, 0x3f	; 63
    438e:	f8 94       	cli
    4390:	de bf       	out	0x3e, r29	; 62
    4392:	0f be       	out	0x3f, r0	; 63
    4394:	cd bf       	out	0x3d, r28	; 61
    4396:	cf 91       	pop	r28
    4398:	df 91       	pop	r29
    439a:	08 95       	ret

0000439c <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 LCD_XPOS , u8 LCD_YPOS)
{
    439c:	df 93       	push	r29
    439e:	cf 93       	push	r28
    43a0:	00 d0       	rcall	.+0      	; 0x43a2 <LCD_voidGoToXY+0x6>
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
    43a6:	89 83       	std	Y+1, r24	; 0x01
    43a8:	6a 83       	std	Y+2, r22	; 0x02
	// SET DD RAM ADRESS
	LCD_voidSendCommand((LCD_XPOS * 0x40 + LCD_YPOS) | 0b10000000);
    43aa:	89 81       	ldd	r24, Y+1	; 0x01
    43ac:	88 2f       	mov	r24, r24
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	00 24       	eor	r0, r0
    43b2:	96 95       	lsr	r25
    43b4:	87 95       	ror	r24
    43b6:	07 94       	ror	r0
    43b8:	96 95       	lsr	r25
    43ba:	87 95       	ror	r24
    43bc:	07 94       	ror	r0
    43be:	98 2f       	mov	r25, r24
    43c0:	80 2d       	mov	r24, r0
    43c2:	98 2f       	mov	r25, r24
    43c4:	8a 81       	ldd	r24, Y+2	; 0x02
    43c6:	89 0f       	add	r24, r25
    43c8:	80 68       	ori	r24, 0x80	; 128
    43ca:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <LCD_voidSendCommand>

}
    43ce:	0f 90       	pop	r0
    43d0:	0f 90       	pop	r0
    43d2:	cf 91       	pop	r28
    43d4:	df 91       	pop	r29
    43d6:	08 95       	ret

000043d8 <LCD_voidWriteSpecialChar>:

void LCD_voidWriteSpecialChar(u8 *pattern , u8 block_no, u8 x, u8 y)
{
    43d8:	df 93       	push	r29
    43da:	cf 93       	push	r28
    43dc:	cd b7       	in	r28, 0x3d	; 61
    43de:	de b7       	in	r29, 0x3e	; 62
    43e0:	27 97       	sbiw	r28, 0x07	; 7
    43e2:	0f b6       	in	r0, 0x3f	; 63
    43e4:	f8 94       	cli
    43e6:	de bf       	out	0x3e, r29	; 62
    43e8:	0f be       	out	0x3f, r0	; 63
    43ea:	cd bf       	out	0x3d, r28	; 61
    43ec:	9c 83       	std	Y+4, r25	; 0x04
    43ee:	8b 83       	std	Y+3, r24	; 0x03
    43f0:	6d 83       	std	Y+5, r22	; 0x05
    43f2:	4e 83       	std	Y+6, r20	; 0x06
    43f4:	2f 83       	std	Y+7, r18	; 0x07
	// variable for loop
	u8 i;

	// every block is 8 bytes so calculate address by multiply it with 8
	u8 address = 8 * block_no ;
    43f6:	8d 81       	ldd	r24, Y+5	; 0x05
    43f8:	88 2f       	mov	r24, r24
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	88 0f       	add	r24, r24
    43fe:	99 1f       	adc	r25, r25
    4400:	88 0f       	add	r24, r24
    4402:	99 1f       	adc	r25, r25
    4404:	88 0f       	add	r24, r24
    4406:	99 1f       	adc	r25, r25
    4408:	89 83       	std	Y+1, r24	; 0x01

	// set CG RAM address from data sheet (00 01 A5-A0)
	LCD_voidSendCommand(address | 0b01000000);
    440a:	89 81       	ldd	r24, Y+1	; 0x01
    440c:	80 64       	ori	r24, 0x40	; 64
    440e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <LCD_voidSendCommand>

	// LOOP to write data from CGRAM to DDRAM (array of 8 bytes)
	for(i = 0 ; i< 8; i++)
    4412:	1a 82       	std	Y+2, r1	; 0x02
    4414:	0e c0       	rjmp	.+28     	; 0x4432 <LCD_voidWriteSpecialChar+0x5a>
	{
		LCD_voidWriteData(pattern[i]);
    4416:	8a 81       	ldd	r24, Y+2	; 0x02
    4418:	28 2f       	mov	r18, r24
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	8b 81       	ldd	r24, Y+3	; 0x03
    441e:	9c 81       	ldd	r25, Y+4	; 0x04
    4420:	fc 01       	movw	r30, r24
    4422:	e2 0f       	add	r30, r18
    4424:	f3 1f       	adc	r31, r19
    4426:	80 81       	ld	r24, Z
    4428:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_voidWriteData>

	// set CG RAM address from data sheet (00 01 A5-A0)
	LCD_voidSendCommand(address | 0b01000000);

	// LOOP to write data from CGRAM to DDRAM (array of 8 bytes)
	for(i = 0 ; i< 8; i++)
    442c:	8a 81       	ldd	r24, Y+2	; 0x02
    442e:	8f 5f       	subi	r24, 0xFF	; 255
    4430:	8a 83       	std	Y+2, r24	; 0x02
    4432:	8a 81       	ldd	r24, Y+2	; 0x02
    4434:	88 30       	cpi	r24, 0x08	; 8
    4436:	78 f3       	brcs	.-34     	; 0x4416 <LCD_voidWriteSpecialChar+0x3e>
	{
		LCD_voidWriteData(pattern[i]);
	}
	// set DDRAM to write on LCD by using GO TO XY
	LCD_voidGoToXY(x , y);
    4438:	8e 81       	ldd	r24, Y+6	; 0x06
    443a:	6f 81       	ldd	r22, Y+7	; 0x07
    443c:	0e 94 ce 21 	call	0x439c	; 0x439c <LCD_voidGoToXY>

	//display block number from CGRAM
	LCD_voidWriteData(block_no);
    4440:	8d 81       	ldd	r24, Y+5	; 0x05
    4442:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_voidWriteData>
}
    4446:	27 96       	adiw	r28, 0x07	; 7
    4448:	0f b6       	in	r0, 0x3f	; 63
    444a:	f8 94       	cli
    444c:	de bf       	out	0x3e, r29	; 62
    444e:	0f be       	out	0x3f, r0	; 63
    4450:	cd bf       	out	0x3d, r28	; 61
    4452:	cf 91       	pop	r28
    4454:	df 91       	pop	r29
    4456:	08 95       	ret

00004458 <LCD_voidWriteNumber>:
void LCD_voidWriteNumber(u16 Number)
{
    4458:	df 93       	push	r29
    445a:	cf 93       	push	r28
    445c:	cd b7       	in	r28, 0x3d	; 61
    445e:	de b7       	in	r29, 0x3e	; 62
    4460:	2e 97       	sbiw	r28, 0x0e	; 14
    4462:	0f b6       	in	r0, 0x3f	; 63
    4464:	f8 94       	cli
    4466:	de bf       	out	0x3e, r29	; 62
    4468:	0f be       	out	0x3f, r0	; 63
    446a:	cd bf       	out	0x3d, r28	; 61
    446c:	98 87       	std	Y+8, r25	; 0x08
    446e:	8f 83       	std	Y+7, r24	; 0x07
	for(i = 0 ; i<num_digit ; i++)
	{
		LCD_voidWriteData(arr[i]) ;
	}

}
    4470:	2d b7       	in	r18, 0x3d	; 61
    4472:	3e b7       	in	r19, 0x3e	; 62
    4474:	3e 87       	std	Y+14, r19	; 0x0e
    4476:	2d 87       	std	Y+13, r18	; 0x0d

	//display block number from CGRAM
	LCD_voidWriteData(block_no);
}
void LCD_voidWriteNumber(u16 Number)
{
    4478:	8d b7       	in	r24, 0x3d	; 61
    447a:	9e b7       	in	r25, 0x3e	; 62
    447c:	9a 87       	std	Y+10, r25	; 0x0a
    447e:	89 87       	std	Y+9, r24	; 0x09
	u8 num_digit = 0 ;
    4480:	1c 82       	std	Y+4, r1	; 0x04
	u8 i;
	u16 copy_number = Number;
    4482:	8f 81       	ldd	r24, Y+7	; 0x07
    4484:	98 85       	ldd	r25, Y+8	; 0x08
    4486:	9a 83       	std	Y+2, r25	; 0x02
    4488:	89 83       	std	Y+1, r24	; 0x01
    448a:	0d c0       	rjmp	.+26     	; 0x44a6 <LCD_voidWriteNumber+0x4e>

	while(copy_number != 0)
	{
		copy_number /= 10 ;
    448c:	89 81       	ldd	r24, Y+1	; 0x01
    448e:	9a 81       	ldd	r25, Y+2	; 0x02
    4490:	2a e0       	ldi	r18, 0x0A	; 10
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	b9 01       	movw	r22, r18
    4496:	0e 94 7e 23 	call	0x46fc	; 0x46fc <__udivmodhi4>
    449a:	cb 01       	movw	r24, r22
    449c:	9a 83       	std	Y+2, r25	; 0x02
    449e:	89 83       	std	Y+1, r24	; 0x01
		num_digit += 1;
    44a0:	8c 81       	ldd	r24, Y+4	; 0x04
    44a2:	8f 5f       	subi	r24, 0xFF	; 255
    44a4:	8c 83       	std	Y+4, r24	; 0x04
{
	u8 num_digit = 0 ;
	u8 i;
	u16 copy_number = Number;

	while(copy_number != 0)
    44a6:	89 81       	ldd	r24, Y+1	; 0x01
    44a8:	9a 81       	ldd	r25, Y+2	; 0x02
    44aa:	00 97       	sbiw	r24, 0x00	; 0
    44ac:	79 f7       	brne	.-34     	; 0x448c <LCD_voidWriteNumber+0x34>
	{
		copy_number /= 10 ;
		num_digit += 1;
	}

	u8 arr[num_digit] ;
    44ae:	8c 81       	ldd	r24, Y+4	; 0x04
    44b0:	88 2f       	mov	r24, r24
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	2d b7       	in	r18, 0x3d	; 61
    44b6:	3e b7       	in	r19, 0x3e	; 62
    44b8:	28 1b       	sub	r18, r24
    44ba:	39 0b       	sbc	r19, r25
    44bc:	0f b6       	in	r0, 0x3f	; 63
    44be:	f8 94       	cli
    44c0:	3e bf       	out	0x3e, r19	; 62
    44c2:	0f be       	out	0x3f, r0	; 63
    44c4:	2d bf       	out	0x3d, r18	; 61
    44c6:	8d b7       	in	r24, 0x3d	; 61
    44c8:	9e b7       	in	r25, 0x3e	; 62
    44ca:	01 96       	adiw	r24, 0x01	; 1
    44cc:	9c 87       	std	Y+12, r25	; 0x0c
    44ce:	8b 87       	std	Y+11, r24	; 0x0b
    44d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    44d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    44d4:	00 96       	adiw	r24, 0x00	; 0
    44d6:	9c 87       	std	Y+12, r25	; 0x0c
    44d8:	8b 87       	std	Y+11, r24	; 0x0b
    44da:	2b 85       	ldd	r18, Y+11	; 0x0b
    44dc:	3c 85       	ldd	r19, Y+12	; 0x0c
    44de:	3e 83       	std	Y+6, r19	; 0x06
    44e0:	2d 83       	std	Y+5, r18	; 0x05

	for(i = num_digit ; i> 0 ; i--)
    44e2:	8c 81       	ldd	r24, Y+4	; 0x04
    44e4:	8b 83       	std	Y+3, r24	; 0x03
    44e6:	20 c0       	rjmp	.+64     	; 0x4528 <LCD_voidWriteNumber+0xd0>
	{
		arr[i-1] = (u8)((Number % 10) +'0') ;
    44e8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ea:	88 2f       	mov	r24, r24
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	fc 01       	movw	r30, r24
    44f0:	31 97       	sbiw	r30, 0x01	; 1
    44f2:	8f 81       	ldd	r24, Y+7	; 0x07
    44f4:	98 85       	ldd	r25, Y+8	; 0x08
    44f6:	2a e0       	ldi	r18, 0x0A	; 10
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	b9 01       	movw	r22, r18
    44fc:	0e 94 7e 23 	call	0x46fc	; 0x46fc <__udivmodhi4>
    4500:	28 2f       	mov	r18, r24
    4502:	20 5d       	subi	r18, 0xD0	; 208
    4504:	8d 81       	ldd	r24, Y+5	; 0x05
    4506:	9e 81       	ldd	r25, Y+6	; 0x06
    4508:	e8 0f       	add	r30, r24
    450a:	f9 1f       	adc	r31, r25
    450c:	20 83       	st	Z, r18
		Number = Number /10 ;
    450e:	8f 81       	ldd	r24, Y+7	; 0x07
    4510:	98 85       	ldd	r25, Y+8	; 0x08
    4512:	2a e0       	ldi	r18, 0x0A	; 10
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	b9 01       	movw	r22, r18
    4518:	0e 94 7e 23 	call	0x46fc	; 0x46fc <__udivmodhi4>
    451c:	cb 01       	movw	r24, r22
    451e:	98 87       	std	Y+8, r25	; 0x08
    4520:	8f 83       	std	Y+7, r24	; 0x07
		num_digit += 1;
	}

	u8 arr[num_digit] ;

	for(i = num_digit ; i> 0 ; i--)
    4522:	8b 81       	ldd	r24, Y+3	; 0x03
    4524:	81 50       	subi	r24, 0x01	; 1
    4526:	8b 83       	std	Y+3, r24	; 0x03
    4528:	8b 81       	ldd	r24, Y+3	; 0x03
    452a:	88 23       	and	r24, r24
    452c:	e9 f6       	brne	.-70     	; 0x44e8 <LCD_voidWriteNumber+0x90>
		arr[i-1] = (u8)((Number % 10) +'0') ;
		Number = Number /10 ;
	}


	for(i = 0 ; i<num_digit ; i++)
    452e:	1b 82       	std	Y+3, r1	; 0x03
    4530:	0e c0       	rjmp	.+28     	; 0x454e <LCD_voidWriteNumber+0xf6>
	{
		LCD_voidWriteData(arr[i]) ;
    4532:	8b 81       	ldd	r24, Y+3	; 0x03
    4534:	28 2f       	mov	r18, r24
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	8d 81       	ldd	r24, Y+5	; 0x05
    453a:	9e 81       	ldd	r25, Y+6	; 0x06
    453c:	fc 01       	movw	r30, r24
    453e:	e2 0f       	add	r30, r18
    4540:	f3 1f       	adc	r31, r19
    4542:	80 81       	ld	r24, Z
    4544:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_voidWriteData>
		arr[i-1] = (u8)((Number % 10) +'0') ;
		Number = Number /10 ;
	}


	for(i = 0 ; i<num_digit ; i++)
    4548:	8b 81       	ldd	r24, Y+3	; 0x03
    454a:	8f 5f       	subi	r24, 0xFF	; 255
    454c:	8b 83       	std	Y+3, r24	; 0x03
    454e:	9b 81       	ldd	r25, Y+3	; 0x03
    4550:	8c 81       	ldd	r24, Y+4	; 0x04
    4552:	98 17       	cp	r25, r24
    4554:	70 f3       	brcs	.-36     	; 0x4532 <LCD_voidWriteNumber+0xda>
    4556:	89 85       	ldd	r24, Y+9	; 0x09
    4558:	9a 85       	ldd	r25, Y+10	; 0x0a
    455a:	0f b6       	in	r0, 0x3f	; 63
    455c:	f8 94       	cli
    455e:	9e bf       	out	0x3e, r25	; 62
    4560:	0f be       	out	0x3f, r0	; 63
    4562:	8d bf       	out	0x3d, r24	; 61
	{
		LCD_voidWriteData(arr[i]) ;
	}

}
    4564:	2d 85       	ldd	r18, Y+13	; 0x0d
    4566:	3e 85       	ldd	r19, Y+14	; 0x0e
    4568:	0f b6       	in	r0, 0x3f	; 63
    456a:	f8 94       	cli
    456c:	3e bf       	out	0x3e, r19	; 62
    456e:	0f be       	out	0x3f, r0	; 63
    4570:	2d bf       	out	0x3d, r18	; 61
    4572:	2e 96       	adiw	r28, 0x0e	; 14
    4574:	0f b6       	in	r0, 0x3f	; 63
    4576:	f8 94       	cli
    4578:	de bf       	out	0x3e, r29	; 62
    457a:	0f be       	out	0x3f, r0	; 63
    457c:	cd bf       	out	0x3d, r28	; 61
    457e:	cf 91       	pop	r28
    4580:	df 91       	pop	r29
    4582:	08 95       	ret

00004584 <LCD_Display>:

void LCD_Display(u8 word[])
{
    4584:	df 93       	push	r29
    4586:	cf 93       	push	r28
    4588:	00 d0       	rcall	.+0      	; 0x458a <LCD_Display+0x6>
    458a:	0f 92       	push	r0
    458c:	cd b7       	in	r28, 0x3d	; 61
    458e:	de b7       	in	r29, 0x3e	; 62
    4590:	9b 83       	std	Y+3, r25	; 0x03
    4592:	8a 83       	std	Y+2, r24	; 0x02
	u8 i ;

	for(i = 0; word[i]!=0 ;i++)
    4594:	19 82       	std	Y+1, r1	; 0x01
    4596:	0e c0       	rjmp	.+28     	; 0x45b4 <LCD_Display+0x30>
	{
		LCD_voidWriteData(word[i]);
    4598:	89 81       	ldd	r24, Y+1	; 0x01
    459a:	28 2f       	mov	r18, r24
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	8a 81       	ldd	r24, Y+2	; 0x02
    45a0:	9b 81       	ldd	r25, Y+3	; 0x03
    45a2:	fc 01       	movw	r30, r24
    45a4:	e2 0f       	add	r30, r18
    45a6:	f3 1f       	adc	r31, r19
    45a8:	80 81       	ld	r24, Z
    45aa:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_voidWriteData>

void LCD_Display(u8 word[])
{
	u8 i ;

	for(i = 0; word[i]!=0 ;i++)
    45ae:	89 81       	ldd	r24, Y+1	; 0x01
    45b0:	8f 5f       	subi	r24, 0xFF	; 255
    45b2:	89 83       	std	Y+1, r24	; 0x01
    45b4:	89 81       	ldd	r24, Y+1	; 0x01
    45b6:	28 2f       	mov	r18, r24
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	8a 81       	ldd	r24, Y+2	; 0x02
    45bc:	9b 81       	ldd	r25, Y+3	; 0x03
    45be:	fc 01       	movw	r30, r24
    45c0:	e2 0f       	add	r30, r18
    45c2:	f3 1f       	adc	r31, r19
    45c4:	80 81       	ld	r24, Z
    45c6:	88 23       	and	r24, r24
    45c8:	39 f7       	brne	.-50     	; 0x4598 <LCD_Display+0x14>
	{
		LCD_voidWriteData(word[i]);
	}
}
    45ca:	0f 90       	pop	r0
    45cc:	0f 90       	pop	r0
    45ce:	0f 90       	pop	r0
    45d0:	cf 91       	pop	r28
    45d2:	df 91       	pop	r29
    45d4:	08 95       	ret

000045d6 <main>:

void lcd1(void *PV);
void lcd2(void *PV);

void main()
{
    45d6:	af 92       	push	r10
    45d8:	bf 92       	push	r11
    45da:	cf 92       	push	r12
    45dc:	df 92       	push	r13
    45de:	ef 92       	push	r14
    45e0:	ff 92       	push	r15
    45e2:	0f 93       	push	r16
    45e4:	df 93       	push	r29
    45e6:	cf 93       	push	r28
    45e8:	cd b7       	in	r28, 0x3d	; 61
    45ea:	de b7       	in	r29, 0x3e	; 62
	LCD_voidInit();
    45ec:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <LCD_voidInit>

	DIO_SetPortDirection(DDRA , 0XFF);
    45f0:	84 e0       	ldi	r24, 0x04	; 4
    45f2:	6f ef       	ldi	r22, 0xFF	; 255
    45f4:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <DIO_SetPortDirection>
	DIO_SetPortDirection(DDRB , 0XFF);
    45f8:	85 e0       	ldi	r24, 0x05	; 5
    45fa:	6f ef       	ldi	r22, 0xFF	; 255
    45fc:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <DIO_SetPortDirection>

	LCD_voidSendCommand(0X01);
    4600:	81 e0       	ldi	r24, 0x01	; 1
    4602:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <LCD_voidSendCommand>

	LCD_Display("Task 2");
    4606:	85 e6       	ldi	r24, 0x65	; 101
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	0e 94 c2 22 	call	0x4584	; 0x4584 <LCD_Display>
	xTaskCreate(lcd1 , NULL ,configMINIMAL_STACK_SIZE , NULL ,1 , NULL);
    460e:	8e e5       	ldi	r24, 0x5E	; 94
    4610:	93 e2       	ldi	r25, 0x23	; 35
    4612:	60 e0       	ldi	r22, 0x00	; 0
    4614:	70 e0       	ldi	r23, 0x00	; 0
    4616:	4a ef       	ldi	r20, 0xFA	; 250
    4618:	50 e0       	ldi	r21, 0x00	; 0
    461a:	20 e0       	ldi	r18, 0x00	; 0
    461c:	30 e0       	ldi	r19, 0x00	; 0
    461e:	01 e0       	ldi	r16, 0x01	; 1
    4620:	ee 24       	eor	r14, r14
    4622:	ff 24       	eor	r15, r15
    4624:	cc 24       	eor	r12, r12
    4626:	dd 24       	eor	r13, r13
    4628:	aa 24       	eor	r10, r10
    462a:	bb 24       	eor	r11, r11
    462c:	0e 94 94 11 	call	0x2328	; 0x2328 <xTaskGenericCreate>
	xTaskCreate(lcd2 , NULL ,configMINIMAL_STACK_SIZE , NULL ,1 , NULL);
    4630:	8e e6       	ldi	r24, 0x6E	; 110
    4632:	93 e2       	ldi	r25, 0x23	; 35
    4634:	60 e0       	ldi	r22, 0x00	; 0
    4636:	70 e0       	ldi	r23, 0x00	; 0
    4638:	4a ef       	ldi	r20, 0xFA	; 250
    463a:	50 e0       	ldi	r21, 0x00	; 0
    463c:	20 e0       	ldi	r18, 0x00	; 0
    463e:	30 e0       	ldi	r19, 0x00	; 0
    4640:	01 e0       	ldi	r16, 0x01	; 1
    4642:	ee 24       	eor	r14, r14
    4644:	ff 24       	eor	r15, r15
    4646:	cc 24       	eor	r12, r12
    4648:	dd 24       	eor	r13, r13
    464a:	aa 24       	eor	r10, r10
    464c:	bb 24       	eor	r11, r11
    464e:	0e 94 94 11 	call	0x2328	; 0x2328 <xTaskGenericCreate>


	vTaskStartScheduler();
    4652:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <vTaskStartScheduler>
    4656:	ff cf       	rjmp	.-2      	; 0x4656 <main+0x80>

00004658 <LED1>:
	while(1)
	{};
}

void LED1(void *PV)
{
    4658:	df 93       	push	r29
    465a:	cf 93       	push	r28
    465c:	00 d0       	rcall	.+0      	; 0x465e <LED1+0x6>
    465e:	cd b7       	in	r28, 0x3d	; 61
    4660:	de b7       	in	r29, 0x3e	; 62
    4662:	9a 83       	std	Y+2, r25	; 0x02
    4664:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(DDRC , PIN0 , OUTPUT);
    4666:	86 e0       	ldi	r24, 0x06	; 6
    4668:	60 e0       	ldi	r22, 0x00	; 0
    466a:	41 e0       	ldi	r20, 0x01	; 1
    466c:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <DIO_SetPinDirection>
	while(1)
	{
		toggle_bit(PORTC_REG , PIN0);
    4670:	a5 e3       	ldi	r26, 0x35	; 53
    4672:	b0 e0       	ldi	r27, 0x00	; 0
    4674:	e5 e3       	ldi	r30, 0x35	; 53
    4676:	f0 e0       	ldi	r31, 0x00	; 0
    4678:	90 81       	ld	r25, Z
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	89 27       	eor	r24, r25
    467e:	8c 93       	st	X, r24
		vTaskDelay(200);
    4680:	88 ec       	ldi	r24, 0xC8	; 200
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	0e 94 58 13 	call	0x26b0	; 0x26b0 <vTaskDelay>
    4688:	f3 cf       	rjmp	.-26     	; 0x4670 <LED1+0x18>

0000468a <LED2>:


}

void LED2(void *PV)
{
    468a:	df 93       	push	r29
    468c:	cf 93       	push	r28
    468e:	00 d0       	rcall	.+0      	; 0x4690 <LED2+0x6>
    4690:	cd b7       	in	r28, 0x3d	; 61
    4692:	de b7       	in	r29, 0x3e	; 62
    4694:	9a 83       	std	Y+2, r25	; 0x02
    4696:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(DDRC , PIN1 , OUTPUT);
    4698:	86 e0       	ldi	r24, 0x06	; 6
    469a:	61 e0       	ldi	r22, 0x01	; 1
    469c:	41 e0       	ldi	r20, 0x01	; 1
    469e:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <DIO_SetPinDirection>
	while(1)
	{
		toggle_bit(PORTC_REG , PIN1);
    46a2:	a5 e3       	ldi	r26, 0x35	; 53
    46a4:	b0 e0       	ldi	r27, 0x00	; 0
    46a6:	e5 e3       	ldi	r30, 0x35	; 53
    46a8:	f0 e0       	ldi	r31, 0x00	; 0
    46aa:	90 81       	ld	r25, Z
    46ac:	82 e0       	ldi	r24, 0x02	; 2
    46ae:	89 27       	eor	r24, r25
    46b0:	8c 93       	st	X, r24
		vTaskDelay(1000);
    46b2:	88 ee       	ldi	r24, 0xE8	; 232
    46b4:	93 e0       	ldi	r25, 0x03	; 3
    46b6:	0e 94 58 13 	call	0x26b0	; 0x26b0 <vTaskDelay>
    46ba:	f3 cf       	rjmp	.-26     	; 0x46a2 <LED2+0x18>

000046bc <lcd1>:
	}

}

void lcd1(void *PV)
{
    46bc:	df 93       	push	r29
    46be:	cf 93       	push	r28
    46c0:	00 d0       	rcall	.+0      	; 0x46c2 <lcd1+0x6>
    46c2:	cd b7       	in	r28, 0x3d	; 61
    46c4:	de b7       	in	r29, 0x3e	; 62
    46c6:	9a 83       	std	Y+2, r25	; 0x02
    46c8:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPortDirection(DDRB , 0XFF);*/


	while(1)
	{
		LCD_Display("Task 1");
    46ca:	8c e6       	ldi	r24, 0x6C	; 108
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	0e 94 c2 22 	call	0x4584	; 0x4584 <LCD_Display>

		vTaskDelay(500);
    46d2:	84 ef       	ldi	r24, 0xF4	; 244
    46d4:	91 e0       	ldi	r25, 0x01	; 1
    46d6:	0e 94 58 13 	call	0x26b0	; 0x26b0 <vTaskDelay>
    46da:	f7 cf       	rjmp	.-18     	; 0x46ca <lcd1+0xe>

000046dc <lcd2>:
	}

}

void lcd2(void *PV)
{
    46dc:	df 93       	push	r29
    46de:	cf 93       	push	r28
    46e0:	00 d0       	rcall	.+0      	; 0x46e2 <lcd2+0x6>
    46e2:	cd b7       	in	r28, 0x3d	; 61
    46e4:	de b7       	in	r29, 0x3e	; 62
    46e6:	9a 83       	std	Y+2, r25	; 0x02
    46e8:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPortDirection(DDRB , 0XFF);*/


	while(1)
	{
		LCD_Display("Task 2");
    46ea:	85 e6       	ldi	r24, 0x65	; 101
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	0e 94 c2 22 	call	0x4584	; 0x4584 <LCD_Display>

		vTaskDelay(500);
    46f2:	84 ef       	ldi	r24, 0xF4	; 244
    46f4:	91 e0       	ldi	r25, 0x01	; 1
    46f6:	0e 94 58 13 	call	0x26b0	; 0x26b0 <vTaskDelay>
    46fa:	f7 cf       	rjmp	.-18     	; 0x46ea <lcd2+0xe>

000046fc <__udivmodhi4>:
    46fc:	aa 1b       	sub	r26, r26
    46fe:	bb 1b       	sub	r27, r27
    4700:	51 e1       	ldi	r21, 0x11	; 17
    4702:	07 c0       	rjmp	.+14     	; 0x4712 <__udivmodhi4_ep>

00004704 <__udivmodhi4_loop>:
    4704:	aa 1f       	adc	r26, r26
    4706:	bb 1f       	adc	r27, r27
    4708:	a6 17       	cp	r26, r22
    470a:	b7 07       	cpc	r27, r23
    470c:	10 f0       	brcs	.+4      	; 0x4712 <__udivmodhi4_ep>
    470e:	a6 1b       	sub	r26, r22
    4710:	b7 0b       	sbc	r27, r23

00004712 <__udivmodhi4_ep>:
    4712:	88 1f       	adc	r24, r24
    4714:	99 1f       	adc	r25, r25
    4716:	5a 95       	dec	r21
    4718:	a9 f7       	brne	.-22     	; 0x4704 <__udivmodhi4_loop>
    471a:	80 95       	com	r24
    471c:	90 95       	com	r25
    471e:	bc 01       	movw	r22, r24
    4720:	cd 01       	movw	r24, r26
    4722:	08 95       	ret

00004724 <__prologue_saves__>:
    4724:	2f 92       	push	r2
    4726:	3f 92       	push	r3
    4728:	4f 92       	push	r4
    472a:	5f 92       	push	r5
    472c:	6f 92       	push	r6
    472e:	7f 92       	push	r7
    4730:	8f 92       	push	r8
    4732:	9f 92       	push	r9
    4734:	af 92       	push	r10
    4736:	bf 92       	push	r11
    4738:	cf 92       	push	r12
    473a:	df 92       	push	r13
    473c:	ef 92       	push	r14
    473e:	ff 92       	push	r15
    4740:	0f 93       	push	r16
    4742:	1f 93       	push	r17
    4744:	cf 93       	push	r28
    4746:	df 93       	push	r29
    4748:	cd b7       	in	r28, 0x3d	; 61
    474a:	de b7       	in	r29, 0x3e	; 62
    474c:	ca 1b       	sub	r28, r26
    474e:	db 0b       	sbc	r29, r27
    4750:	0f b6       	in	r0, 0x3f	; 63
    4752:	f8 94       	cli
    4754:	de bf       	out	0x3e, r29	; 62
    4756:	0f be       	out	0x3f, r0	; 63
    4758:	cd bf       	out	0x3d, r28	; 61
    475a:	09 94       	ijmp

0000475c <__epilogue_restores__>:
    475c:	2a 88       	ldd	r2, Y+18	; 0x12
    475e:	39 88       	ldd	r3, Y+17	; 0x11
    4760:	48 88       	ldd	r4, Y+16	; 0x10
    4762:	5f 84       	ldd	r5, Y+15	; 0x0f
    4764:	6e 84       	ldd	r6, Y+14	; 0x0e
    4766:	7d 84       	ldd	r7, Y+13	; 0x0d
    4768:	8c 84       	ldd	r8, Y+12	; 0x0c
    476a:	9b 84       	ldd	r9, Y+11	; 0x0b
    476c:	aa 84       	ldd	r10, Y+10	; 0x0a
    476e:	b9 84       	ldd	r11, Y+9	; 0x09
    4770:	c8 84       	ldd	r12, Y+8	; 0x08
    4772:	df 80       	ldd	r13, Y+7	; 0x07
    4774:	ee 80       	ldd	r14, Y+6	; 0x06
    4776:	fd 80       	ldd	r15, Y+5	; 0x05
    4778:	0c 81       	ldd	r16, Y+4	; 0x04
    477a:	1b 81       	ldd	r17, Y+3	; 0x03
    477c:	aa 81       	ldd	r26, Y+2	; 0x02
    477e:	b9 81       	ldd	r27, Y+1	; 0x01
    4780:	ce 0f       	add	r28, r30
    4782:	d1 1d       	adc	r29, r1
    4784:	0f b6       	in	r0, 0x3f	; 63
    4786:	f8 94       	cli
    4788:	de bf       	out	0x3e, r29	; 62
    478a:	0f be       	out	0x3f, r0	; 63
    478c:	cd bf       	out	0x3d, r28	; 61
    478e:	ed 01       	movw	r28, r26
    4790:	08 95       	ret

00004792 <memcpy>:
    4792:	fb 01       	movw	r30, r22
    4794:	dc 01       	movw	r26, r24
    4796:	02 c0       	rjmp	.+4      	; 0x479c <memcpy+0xa>
    4798:	01 90       	ld	r0, Z+
    479a:	0d 92       	st	X+, r0
    479c:	41 50       	subi	r20, 0x01	; 1
    479e:	50 40       	sbci	r21, 0x00	; 0
    47a0:	d8 f7       	brcc	.-10     	; 0x4798 <memcpy+0x6>
    47a2:	08 95       	ret

000047a4 <memset>:
    47a4:	dc 01       	movw	r26, r24
    47a6:	01 c0       	rjmp	.+2      	; 0x47aa <memset+0x6>
    47a8:	6d 93       	st	X+, r22
    47aa:	41 50       	subi	r20, 0x01	; 1
    47ac:	50 40       	sbci	r21, 0x00	; 0
    47ae:	e0 f7       	brcc	.-8      	; 0x47a8 <memset+0x4>
    47b0:	08 95       	ret

000047b2 <strncpy>:
    47b2:	fb 01       	movw	r30, r22
    47b4:	dc 01       	movw	r26, r24
    47b6:	41 50       	subi	r20, 0x01	; 1
    47b8:	50 40       	sbci	r21, 0x00	; 0
    47ba:	48 f0       	brcs	.+18     	; 0x47ce <strncpy+0x1c>
    47bc:	01 90       	ld	r0, Z+
    47be:	0d 92       	st	X+, r0
    47c0:	00 20       	and	r0, r0
    47c2:	c9 f7       	brne	.-14     	; 0x47b6 <strncpy+0x4>
    47c4:	01 c0       	rjmp	.+2      	; 0x47c8 <strncpy+0x16>
    47c6:	1d 92       	st	X+, r1
    47c8:	41 50       	subi	r20, 0x01	; 1
    47ca:	50 40       	sbci	r21, 0x00	; 0
    47cc:	e0 f7       	brcc	.-8      	; 0x47c6 <strncpy+0x14>
    47ce:	08 95       	ret

000047d0 <_exit>:
    47d0:	f8 94       	cli

000047d2 <__stop_program>:
    47d2:	ff cf       	rjmp	.-2      	; 0x47d2 <__stop_program>
